<?xml version="1.0" encoding="UTF-8" ?>

<!-- ======================================================================
				INIT TARGET
====================================================================== -->

<target name="init">
<stopwatch name="timer1"/>
<tstamp>
<format property="day" pattern="MMM_dd_yyyy"/>
<format property="today" pattern="MMM_dd"/>
<format property="now" pattern="MMM_dd_HH_mm"/>
<format property="year" pattern="yyyy"/>
<format property="sec" pattern="HHmmss"/>
<format property="msec" pattern="HH_mm_ss_mS"/>
</tstamp>
<echo message="----------- ${product_name} ${product_version} ${year} ------------"/>
<stopwatch name="timer1" action="total"/>
<echo message="-----------total time ${timer1} ------------"/>
</target>

<!-- ======================================================================
				PUTLABEL TARGET
====================================================================== -->

<target name="putlabel" depends="init">

<property name="plabel" value="putlabel"/>
<record name="${basedir}/buildlogs/${plabel}_${val}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${plabel}_${val}_${msec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${plabel}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>

<propertycopy name="cvsroot" from="${val}_label_cvsroot" silent="false"/>
<propertycopy name="package" from="${val}_label_pkg"     silent="false"/>
<propertycopy name="colabel" from="${val}_label_tag"     silent="false"/>
<propertycopy name="label"   from="${val}_build_label"   silent="false"/>

<cvs cvsRoot="${cvsroot}"
		 command="rtag -F -r${colabel} ${label}"
		 package="${package}"
		 failonerror="true"/>

<record name="${basedir}/buildlogs/${plabel}_${val}_${msec}_err.log" action="stop"/>
<record name="${basedir}/buildlogs/${plabel}_${val}_${msec}.log" action="stop"/>
</target>

<!-- ======================================================================
				CHECKOUT TARGET
====================================================================== -->

<target name="checkout" depends="init">

<property name="cout" value="checkout"/>
<record name="${basedir}/buildlogs/${cout}_${val}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${cout}_${val}_${msec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${cout}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>

<propertycopy name="cvsroot" from="${val}_cvsroot"  silent="false"/>
<propertycopy name="package" from="${val}_co_mod"   silent="false"/>
<propertycopy name="colabel" from="${val}_co_label" silent="false"/>
<propertycopy name="codir"   from="${val}_co_dir"   silent="false"/>
<propertycopy name="rootpass" from="${val}_cvs_password"   silent="true"/>
<propertycopy name="command" from="${val}_cvscommand"   silent="true"/>
<propertycopy name="revlbl" from="${val}_co_label_reviewed" silent="true"/>
<property name="hgclonedir" value="${codir}/components"/>
<property name="co_wget" value="${cmtp_hgroot}"/>
<var name="hg_config" value=" --config http_proxy.no=cmsuite.csez.zohocorpin.com " />


<propertyregex property="revlblsearch" input="${branch_name}" regexp="(.*_REVIEWED$)" select="\1" casesensitive="true"/>
<if>
	<and>
		<isset property="revlblsearch"/>
		<isset property="revlbl"/>
	</and>
	<then>
		<property name="co_lbl" value="${revlbl}"/>
	</then>
	<else>
		<property name="co_lbl" value="${colabel}"/>
	</else>
</if>
<echo message="Checkout Label : ${co_lbl}" />

<if>	<and>
	<contains casesensitive="false" substring=":pserver:anonymous@cm-server:/advent/projects/components" string = "${cvsroot}" />
	<contains casesensitive="false" substring="http://build/tp/components/" string = "${co_wget}" />
	</and>
        <then>
        <antcall target="geturl">
        	<param name="${val}_url" value="${co_wget}"/>
	        <param name="${val}_dest_zip" value="${build_dir}/zips/tp_components.zip"/>
        </antcall>
        <antcall target="unzip">
        	<param name="${val}_unzip_srcdir" value="${build_dir}/zips/"/>
	        <param name="${val}_unzip_todir" value="${codir}/"/>
        	<param name="${val}_files_include" value="tp_components.zip"/>
        </antcall>
                                                                                                                                                                                                             	     <antcallback target="copy_tppackages">
                <param name="pdt_name" value="${pdt_name}"/>
        </antcallback>

        </then>
        <else>
                     <echo message="hg clone process started.."/>


<if>
 <equals arg1="${cvsroot}" arg2=":pserver:anonymous@cm-server:/advent/projects/components" />
 <then>
	<if>
	     <available file="${hgclonedir}/.hg" type="dir"/>
	     <then>
	 	    <var name="cvsroot" value="https://anonymous:anon@cmsuite.csez.zohocorpin.com/integ/components"/>
		    <echo message="Directory ${hgclonedir} exists" />
                    <if>
                       <not>
                        <equals  arg1="${env.ZERO_HELPER_STATUS}" arg2="ON" />
                       </not>
                        <then>
		         <exec dir="${hgclonedir}" executable="hg" failonerror="true">
                          <arg line=" ${hg_config} pull -u -r${co_lbl}; hg upd -C ${co_lbl}"/>
        	         </exec>
                        </then>
                        <else>
		         <exec dir="${hgclonedir}" executable="hg" failonerror="true">
                          <arg line="  pull -u -r${co_lbl}; hg upd -C ${co_lbl}"/>
        	         </exec>
                        </else>
                    </if>
             </then>
	     <else>
	 	   <var name="cvsroot" value="https://cmsuite.csez.zohocorpin.com/integ/components"/>
           <if>
           		<not>
           			<available file="${codir}" type="dir"/>
           		</not>
           		<then>
           			<mkdir dir="${codir}"/>
           		</then>
           </if>
                 <if>
                       <not>
                        <equals  arg1="${env.ZERO_HELPER_STATUS}" arg2="ON" />
                       </not>
                        <then>
		   <exec dir="${codir}" executable="hg" failonerror="true">
        	       <arg line=" ${hg_config} clone -r${co_lbl} https://anonymous:anon@cmsuite.csez.zohocorpin.com/integ/components"/>
		   </exec>
                        </then>
                        <else>
		   <exec dir="${codir}" executable="hg" failonerror="true">
        	       <arg line=" clone -r${co_lbl} https://anonymous:anon@cmsuite.csez.zohocorpin.com/integ/components"/>
		   </exec>
                   </else>
                 </if>
		 <loadfile property="hgrcfile" srcfile="${hgclonedir}/.hg/hgrc" >
                        <filterchain>
                                <striplinecomments>
                                        <comment value="[paths]" />
                                </striplinecomments>
                        </filterchain>
		</loadfile>
		<!--
                <for param="line" list="${hgrcfile}" delimiter="${line.separator}" >
                <sequential>
                                <propertyregex property="stored_url" input="@{line}" regexp="(^.*)=(.*)" select ="\2" casesensitive="true" override ="true"/>
                                <propertyregex property="host_name_authentication" input="${stored_url}" regexp="(^.*)@(.*)" select="\1" casesensitive="true" override ="true" />
                                <propertyregex property="clone_url" input="${stored_url}" regexp ="(^.*)@(.*)" select="\2" casesensitive="true" override ="true" />
                                <echo message="${stored_url}" />
                                <if>
					<not>
	                                        <contains casesensitive="false" substring="anonymous:anon" string = "${host_name_authentication}" />
					</not>
                                        <then>
						<replace file="${hgclonedir}/.hg/hgrc" token="${stored_url}" value="https://anonymous:anon@${clone_url}" />
                                        </then>
                                        <elseif>
						<contains casesensitive="false" substring="anonymous" string= "${host_name_authentication}"/>
                                                <then>
                                                        <replace file="${hgclonedir}/.hg/hgrc" token="${stored_url}" value="https://anonymous:anon@${clone_url}" />
						</then>
                                        </elseif>
                                </if>
                </sequential>
	</for>
	-->
        		<antcallback target="copy_tppackages">
		                <param name="pdt_name" value="${pdt_name}"/>
		                <param name="co_dir" value="${codir}"/>
		        </antcallback>

	    </else>
	</if>
	<exec dir="${hgclonedir}" executable="hg" failonerror="true">
          <arg line="parent --template '{node|short}'"/>
          <redirector outputproperty="changesetval" errorproperty="errmsg">
          </redirector>
	</exec>

	<copy todir="${codir}" overwrite="true" includeEmptyDirs="false">
                <fileset dir="${hgclonedir}" includes="**" excludes=""/>
    </copy>
	<echo message="Updated Changeset Value : ${changesetval}" />
    <echo message="${co_lbl}=${changesetval}${line.separator}" file="${basedir}/changeset.txt" append="true"/>
    <echo message="${co_lbl}=${errmsg}${line.separator}" file="${basedir}/errormsg.txt" append="true"/>
 </then>
 <else>
	<if>
      		<isset property="command"/>
      		<then>
      			<cvs cvsRoot="${cvsroot}"
                        command="${command}"
                        package="${package}"
                        tag="${co_lbl}"
                        dest="${codir}"
                        failonerror="true"/>
       		 </then>
        <else>

        	<cvspass cvsroot="${cvsroot}" password="${rootpass}"/>
        	<cvs cvsRoot="${cvsroot}"
                 package="${package}"
                 tag="${co_lbl}"
                 dest="${codir}"
          	failonerror="true"/>
        </else>
	</if>
	<echo message="${product_name}@${branch_name}@${build_id}@cvscheckoutprocess ${line.separator}" file="${basedir}/cvscheckout_java_home.txt" append="true"/>
</else>    
	
</if>

</else>
</if>

<record name="${basedir}/buildlogs/${cout}_${val}_${msec}_err.log" action="stop"/>
<record name="${basedir}/buildlogs/${cout}_${val}_${msec}.log" action="stop"/>
<echo message="${val}_co_mod=${package}#${val}_co_label=${co_lbl}#${val}_cvsroot=${cvsroot}" file="${basedir}/checkout.txt" append="true"/>
<echo message="${line.separator}" file="${basedir}/checkout.txt" append="true"/>
</target>

<!-- ======================================================================
                                HG CLONE TARGET
====================================================================== -->

<target name="hgclone" depends="init">

<property name="cout" value="hgclone"/>
<record name="${basedir}/buildlogs/${cout}_${val}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${cout}_${val}_${msec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${cout}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>

<propertycopy name="hgroot" from="${val}_hgroot"  silent="false"/>
<propertycopy name="hgclonedir" from="${val}_hgclone_dir"   silent="false"/>
<propertycopy name="hgcolabel" from="${val}_hgco_label" silent="false"/>
<propertycopy name="hgrevlbl" from="${val}_hgco_label_reviewed" silent="true"/>
<propertyregex property="hgrevlblsearch" input="${branch_name}" regexp="(.*_REVIEWED$)" select="\1" casesensitive="true"/>
<property name="co_wget" value="${cmtp_hgroot}"/>
<var name="hg_config" value=" --config http_proxy.no=cmsuite.csez.zohocorpin.com " />

<if>
	<and>
		<isset property="hgrevlblsearch"/>
		<isset property="hgrevlbl"/>
	</and>
	<then>
		<property name="co_lbl" value="${hgrevlbl}"/>
	</then>
	<else>
		<property name="co_lbl" value="${hgcolabel}"/>
	</else>
</if>
<echo message ="${co_lbl}" />

<if>
      <contains casesensitive="false" substring="http://build/tp/components/" string = "${co_wget}" />
       <then>
       <antcall target="geturl">
	       <param name="${val}_url" value="${co_wget}"/>
	       <param name="${val}_dest_zip" value="${build_dir}/zips/tp_components.zip"/>
       </antcall>
       <antcall target="unzip">
	       <param name="${val}_unzip_srcdir" value="${build_dir}/zips/"/>
	       <param name="${val}_unzip_todir" value="${hgclonedir}/"/>
	       <param name="${val}_files_include" value="tp_components.zip"/>
       </antcall>

        <antcallback target="copy_tppackages">
        	<param name="pdt_name" value="${pdt_name}"/>
        </antcallback>
        </then>
        <else>
        <echo message="hg clone process started.."/>


<if>
	
	<available property="value" file="${hgclonedir}/.hg" type="dir"/>

     <then>
	     <if>
 		<contains casesensitive="false" substring="_REVIEWED" string = "${co_lbl}" />
                <then>
                             <echo message="tags_branch pull process started.."/>
<if>
                       <not>
                        <equals  arg1="${env.ZERO_HELPER_STATUS}" arg2="ON" />
                       </not>
                        <then>
                        <exec dir="${hgclonedir}" executable="hg" failonerror="true">
                                 <arg line=" ${hg_config} pull -b tags_branch"/>
                        </exec>
			</then>
			<else>
                        <exec dir="${hgclonedir}" executable="hg" failonerror="true">
                                 <arg line=" pull -b tags_branch"/>
                        </exec>
			</else>
</if>
        	</then>
        </if>
<if>
                       <not>
                        <equals  arg1="${env.ZERO_HELPER_STATUS}" arg2="ON" />
                       </not>
                        <then>
                        <exec dir="${hgclonedir}" executable="hg" failonerror="true">
                                 <arg line=" ${hg_config} pull -r ${co_lbl}"/>
                        </exec>
			</then>
			<else>
           <exec dir="${hgclonedir}" executable="hg" failonerror="true">  
              <arg line=" pull -r${co_lbl}"/>
      </exec>
			</else>
</if>
<if>
                       <not>
                        <equals  arg1="${env.ZERO_HELPER_STATUS}" arg2="ON" />
                       </not>
                        <then>
      	<exec dir="${hgclonedir}" executable="hg" failonerror="true">
              <arg line=" ${hg_config} upd -C ${co_lbl}"/>
      </exec>
			</then>
			<else>
      	<exec dir="${hgclonedir}" executable="hg" failonerror="true">
              <arg line="   upd -C ${co_lbl}"/>
      </exec>
			</else>
</if>

     </then>
     <else>
             
<if>
                       <not>
                        <equals  arg1="${env.ZERO_HELPER_STATUS}" arg2="ON" />
                       </not>
                        <then>
           <exec dir="${basedir}" executable="hg" failonerror="true">
               <arg line=" ${hg_config} clone -r${co_lbl} ${hgroot} ${hgclonedir}"/>
           </exec>
			</then>
			<else>
           <exec dir="${basedir}" executable="hg" failonerror="true">
               <arg line="  clone -r${co_lbl} ${hgroot} ${hgclonedir}"/>
           </exec>
			</else>
</if>
	   <loadfile property="hgrcfile" srcfile="${hgclonedir}/.hg/hgrc" >
			<filterchain>
				<striplinecomments>
					<comment value="[paths]" />
				</striplinecomments>
			</filterchain>
		</loadfile>
		<!--
                <for param="line" list="${hgrcfile}" delimiter="${line.separator}" >
                <sequential>  
                        	<propertyregex property="stored_url" input="@{line}" regexp="(^.*)=(.*)" select ="\2" casesensitive="true" override ="true"/>
                        	<propertyregex property="host_name_authentication" input="${stored_url}" regexp="(^.*)@(.*)" select="\1" casesensitive="true" override ="true" />
				<propertyregex property="clone_url" input="${stored_url}" regexp ="(^.*)@(.*)" select="\2" casesensitive="true" override ="true" />
				<echo message="${stored_url}" />
				<if>
					<not>
                               			<contains casesensitive="false" substring="anonymous:anon" string = "${host_name_authentication}" />
                                	</not>
                                      	<then>
                                        	<replace file="${hgclonedir}/.hg/hgrc" token="${stored_url}" value="https://anonymous:anon@${clone_url}" />
                                	</then>
					<elseif>
                                                <contains casesensitive="false" substring="anonymous" string= "${host_name_authentication}"/>
                                                <then>
                                                        <replace file="${hgclonedir}/.hg/hgrc" token="${stored_url}" value="https://anonymous:anon@${clone_url}" />
                                                </then>
                                        </elseif>
                         	</if>
                </sequential>
	</for>
	-->
    </else>

</if>

<antcallback target="copy_tppackages">
	<param name="pdt_name" value="${pdt_name}"/>
</antcallback>

<exec dir="${hgclonedir}" executable="hg" failonerror="true">
	<arg line="parent --template '{node|short}'"/>
	<redirector outputproperty="hgcl_changesetval" errorproperty="hgcl_errmsg">
	</redirector>
</exec>

<if>
 <equals arg1="${hgroot}" arg2="https://anonymous:anon@cmsuite.csez.zohocorpin.com/integ/components" />
  <then>
        <echo message="${co_lbl}=${hgcl_changesetval}${line.separator}" file="${basedir}/changeset.txt" append="true"/>
  </then>
</if>

</else>
</if>
<echo message="Updated Changeset Value : ${hgcl_changesetval}" />
<echo message="${co_lbl}=${hgcl_errmsg}${line.separator}" file="${basedir}/errormsg.txt" append="true"/>

<record name="${basedir}/buildlogs/${cout}_${val}_${msec}_err.log" action="stop"/>
<record name="${basedir}/buildlogs/${cout}_${val}_${msec}.log" action="stop"/>
<echo message="${val}_hgco_label=${co_lbl}#${val}_hgroot=${hgroot}" file="${basedir}/hgclone.txt" append="true"/>
<echo message="${line.separator}" file="${basedir}/hgclone.txt" append="true"/>
</target>

<!-- ======================================================================
				GETURL TARGET
====================================================================== -->

<target name="geturl" depends="init">

<property name="gurl" value="geturl"/>
<record name="${basedir}/buildlogs/${gurl}_${val}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${gurl}_${val}_${msec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${gurl}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>

<if>
    <isset property="${val}_url"/>
    <then>
        <propertycopy name="url_src"  from="${val}_url" silent="true"/>
    </then>
    <else>
        <propertycopy name="url_src"  from="${val}_download_url" silent="false"/>
    </else>
</if>

<propertycopy name="url_dest_tmp" from="${val}_dest_zip" silent="true"/>
<if>
   <available file="${url_dest_tmp}" type="dir" />
   <then>
       <basename property="url.dest.name" file="${url_src}" />
       <echo message="basename : ${url.dest.name}" />
       <property name="url_dest" value="${url_dest_tmp}/${url.dest.name}" />
       <echo message="destination : ${url.dest}" />
    </then>
    <else>
        <propertycopy name="url_dest" from="${val}_dest_zip" silent="true"/>
    </else>
</if>
<echo message=" --- ${url_dest}"/>

<propertycopy name="url_dest" from="${val}_dest_zip" silent="true"/>
<propertycopy name="url_username" from="${val}_url_username" silent="true"/>
<propertycopy name="url_password" from="${val}_url_password" silent="true"/>

<echo message="${val}"/>
<echo message="${url_src}"/>
<echo message="${url_dest}"/>


<dirname property="url.dest.dir" file="${url_dest}"/>
<if>
<not>
<available file="${url.dest.dir}" type="dir"/>
</not>
<then>
<mkdir dir="${url.dest.dir}"/>
</then>
</if>

<if>
 <equals arg1="${env.CIDE_LOCAL}" arg2="true" />
 <then>
   <java classpath="${basedir}/hg_utils/build/precheck/lib/download.jar" 
	fork="false"
        classname="com.zoho.cide.ant.LocalDownload"
        resultproperty="exitcode"
        failonerror="false">
        <arg line="${url_src} ${url_dest}"/>
   </java>
 </then>
 <else>
	<property name="exitcode" value="-1"/>
 </else>
</if>

<if>
 <equals arg1="${exitcode}" arg2="-1" />
 <then>
	<if>
		<equals arg1="${ceph_copy_needed}" arg2="yes"/>
		<then>
			<propertyregex property="ceph_url" input="${url_src}" regexp="(.*http://build/.*)" select="\1" casesensitive="true"/>
			<if>
				<isset property="ceph_url"/>
				<then>
					<propertyregex property="dependency_dir" input="${ceph_url}" regexp="http://build/" replace="" casesensitive="true"/>
                                        <propertyregex property="htaccess_dir" input="${dependency_dir}" regexp="(/[^/]*$)" replace=""/>
					<property name="dependency_path" value="/zoho/build/downloads/dload/${dependency_dir}"/>
                                        <if>
                                        	<available file="/zoho/build/downloads/dload/${htaccess_dir}/.htpasswd" type="file"/>
						<then>
							<if>
								<not>
            								<contains string="${env.ANT_HOME}" substring="/usr/ant/apache-ant-1.6.5"/>
								</not>
            							<then>
									<get src="${url_src}" dest="${url_dest}" verbose="true" usetimestamp="false" ignoreerrors="true" username="${url_username}" password="${url_password}" maxtime="600" />
								</then>
        						</if>

							<get src="${url_src}" dest="${url_dest}" verbose="true" usetimestamp="false" ignoreerrors="true" username="${url_username}" password="${url_password}"/>
						</then>
						<else>
							<if>
                                                                <available file="${dependency_path}" type="file"/>
                                                        <then>
								<antcall target="copyfile">
									<param name="${val}_copy_src_file" value="${dependency_path}"/>
									<param name="${val}_copy_tofile" value="${url_dest}"/>
								</antcall>
							</then>

							 <else>
                                                                  <echo message="${dependency_path}  is not available." />
                                                                  <echo message="${dependency_path}  is not available." />
                                                         <if>
                                                                <not>
                                                                        <contains string="${env.ANT_HOME}" substring="/usr/ant/apache-ant-1.6.5"/>
                                                                </not>

                                                                <then>
                                                                        <get src="${url_src}" dest="${url_dest}" verbose="true" usetimestamp="false" ignoreerrors="true" username="${url_username}" password="${url_password}" maxtime="600" />
                                                                </then>
                                                                <else>

                                                                        <get src="${url_src}" dest="${url_dest}" verbose="true" usetimestamp="false" ignoreerrors="true" username="${url_username}" password="${url_password}"/>
                                                                </else>
                                                        </if>


                                                          </else>
							

                                                        </if>
						
						</else>
					</if>
				</then>
				<else>
					<if>
						<not>
							<contains string="${env.ANT_HOME}" substring="/usr/ant/apache-ant-1.6.5"/>
						</not>
				
						<then>
							<get src="${url_src}" dest="${url_dest}" verbose="true" usetimestamp="false" ignoreerrors="true" username="${url_username}" password="${url_password}" maxtime="600" />
						</then>
						<else>

							<get src="${url_src}" dest="${url_dest}" verbose="true" usetimestamp="false" ignoreerrors="true" username="${url_username}" password="${url_password}"/>
						</else>
					</if>
				</else>
			</if>
		</then>
		<else>
        <get src="${url_src}"
        dest="${url_dest}"
        verbose="true"
        usetimestamp="true"
        ignoreerrors="true"
        username="${url_username}"
        password="${url_password}"/>
		</else>
	</if>
	<propertyregex property="depurl" input="${url_src}" regexp="(.*)(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)_([0-9]){2}_([0-9]){4}(_[0-9]+)?" select ="\0" casesensitive="true" override ="true"/>
	<basename property="archivename" file="${url_src}"/>
	<if>
		<and>
			<or>
			<not><available file="${url_dest}" type="file"/></not>
			</or>
			<or>
			<not><available file="${url_dest}/${archivename}" type="file"/></not>
			</or>
			<isset property="depurl"/>
		</and>
		<then>
			<exec dir="${basedir}/hg_utils/build" executable="python" failonerror="true">
				<arg line="apiwrapper.py ${product_name} GetDependency ${depurl}"/>
				<redirector outputproperty="depdet" errorproperty="depdeterr"></redirector>
			</exec>
			<if>
				<not>
					<equals arg1="${depdet}" arg2=""/>
				</not>
				<then>
					<propertyregex property="dep_wh_loc" input="${depdet}" regexp="([^\s]+)([\s]+)([^\s]+)" select="\1" casesensitive="true" override ="true"/>
					<propertyregex property="dep_ml_loc" input="${depdet}" regexp="([^\s]+)([\s]+)([^\s]+)" select="\3" casesensitive="true" override ="true"/>
					<propertyregex property="modified_url_src" input="${url_src}" regexp="${dep_wh_loc}" replace="${dep_ml_loc}" casesensitive="true" override ="true"/>
					<if>
						<not>
							<contains string="${env.ANT_HOME}" substring="/usr/ant/apache-ant-1.6.5"/>
						</not>

						<then>
							<get src="${modified_url_src}" dest="${url_dest}" verbose="true" usetimestamp="false" ignoreerrors="true" username="${url_username}" password="${url_password}" maxtime="600" />
							<propertycopy name="url_src" from="modified_url_src" silent="false" override="true"/>
                                        		<echo message="modified_url_src ::::: ${modified_url_src}" />
                                        		<echo message="url_src ::::: ${url_src}" />
						</then>
					<else>
					<get src="${modified_url_src}" dest="${url_dest}" verbose="true" usetimestamp="false" username="${url_username}" password="${url_password}"/>
					<propertycopy name="url_src" from="modified_url_src" silent="false" override="true"/>
					</else>
					</if>
				</then>
				<else>
					<echo message="Unable to download ${url_src}" file="${basedir}/build_err.txt" append="true"/>
					<fail message="Unable to download ${url_src}"/>
				</else>
			</if>
		</then>
	</if>
 </then>
 <else>
    <property name="exitcode" value="-1"/>
 </else>
</if>

 <if>
        <not>
        <available file="${url_dest}" type="file"/>
        </not>
        <then>
                <if>
                 <not><available file="${url_dest}/${archivename}" type="file"/></not>
		 <then>
		<echo message="Unable to download ${url_src}" file="${basedir}/build_err.txt" append="true"/>
                 <fail message="Unable to download ${url_src}"/>
                 </then>
                 </if>

        </then>
        </if>


<record name="${basedir}/buildlogs/${gurl}_${val}_${msec}_err.log" action="stop"/>
<record name="${basedir}/buildlogs/${gurl}_${val}_${msec}.log" action="stop"/>

<if>
<available file="${url_dest}" type="file"/>
<then>

<if>
	<isset property="dep_param"/>
	<then>
		<echo message="${dep_param}=${url_src}${line.separator}" file="${basedir}/buildlogs/urls.html" append="true"/>
	</then>
	<else>
		<echo message="${val}=${url_src}${line.separator}" file="${basedir}/buildlogs/urls.html" append="true"/>
	</else>
</if>

</then>
</if>

<!--echo message="${line.separator}" file="${basedir}/buildlogs/urls.html" append="true"/-->
</target>

<!-- ==================================================================== -->
<!-- ============ DDTool ( data-dictionary.xml parser )  ================ -->
<!-- ==================================================================== -->

<target name="ddparser" description="java -dd &lt;file&gt; -outDir &lt;directory&gt; -pkg &lt;packagename&gt; -template &lt;templatefile&gt;" depends="init">

	<property name="ddpar" value="ddparser"/>
	<record name="${basedir}/buildlogs/${ddpar}_${val}_${msec}.log" action="start" loglevel="info"/>
	<record name="${basedir}/buildlogs/${ddpar}_${val}_${msec}_err.log" action="start" loglevel="error"/>
	<record name="${basedir}/buildlogs/${ddpar}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>

	<propertycopy name="dd_clp" from="ddclsp" silent="true"/>
	<propertycopy name="dd_classname" from="ddclassname" silent="true"/>
	<propertycopy name="dd_confDir" from="${val}_ddconfdir" silent="true"/>
	<propertycopy name="dd_ip" from="${val}_ddinp" silent="true"/>
	<propertycopy name="dd_template" from="ddtemplate" silent="true"/>
	<propertycopy name="dd_op" from="${val}_ddout" silent="true"/>
	<propertycopy name="sysproperty1_key" from="ddsysproperty1_key" silent="true"/>
	<propertycopy name="sysproperty1_value" from="ddsysproperty1_value" silent="true"/>
	<propertycopy name="sysproperty2_key" from="ddsysproperty2_key" silent="true"/>
	<propertycopy name="sysproperty2_value" from="ddsysproperty2_value" silent="true"/>

	<if>
		<not>
                	<isset property="sysproperty1_key"/>
		</not>
                <then>
                        <propertycopy name="sysproperty1_key" from="${val}_ddsysproperty1_key" silent="true"/>
                        <propertycopy name="sysproperty1_value" from="${val}_ddsysproperty1_value" silent="true"/>
                        <propertycopy name="sysproperty2_key" from="${val}_ddsysproperty2_key" silent="true"/>
                        <propertycopy name="sysproperty2_value" from="${val}_ddsysproperty2_value" silent="true"/>
                </then>
        </if>

	<if>
		<isset property="sysproperty1_key"/>
		<then>
			<if>
				<isset property="sysproperty2_key"/>
				<then>
					<if>
						<isset property="dd_confDir"/>
						<then>
							<java
								classpath="${dd_clp}"
								fork="yes"
								dir="${dd_confDir}"
								failonerror="true"
								classname="${dd_classname}">
								<sysproperty key="${sysproperty1_key}" value="${sysproperty1_value}"/>
								<sysproperty key="${sysproperty2_key}" value="${sysproperty2_value}"/>
								<arg line="-dd ${dd_ip} -template ${dd_template} -outDir ${dd_op}"/>
							</java>
						</then>
						<else>
							<java
								classpath="${dd_clp}"
								fork="yes"
								failonerror="true"
								classname="${dd_classname}">
								<sysproperty key="${sysproperty1_key}" value="${sysproperty1_value}"/>
								<sysproperty key="${sysproperty2_key}" value="${sysproperty2_value}"/>
								<arg line="-dd ${dd_ip} -template ${dd_template} -outDir ${dd_op}"/>
							</java>
						</else>
					</if>
				</then>
				<else>
					<if>
						<isset property="dd_confDir"/>
						<then>
							<java
								classpath="${dd_clp}"
								fork="yes"
								dir="${dd_confDir}"
								failonerror="true"
								classname="${dd_classname}">
								<sysproperty key="${sysproperty1_key}" value="${sysproperty1_value}"/>
								<arg line="-dd ${dd_ip} -template ${dd_template} -outDir ${dd_op}"/>
							</java>
						</then>
						<else>
							<java
								classpath="${dd_clp}"
								fork="yes"
								failonerror="true"
								classname="${dd_classname}">
								<sysproperty key="${sysproperty1_key}" value="${sysproperty1_value}"/>
								<arg line="-dd ${dd_ip} -template ${dd_template} -outDir ${dd_op}"/>
							</java>
						</else>
					</if>
				</else>
			</if>
		</then>
		<else>
			<if>
				<isset property="dd_confDir"/>
				<then>
					<java
						classpath="${dd_clp}"
						fork="yes"
						dir="${dd_confDir}"
						failonerror="true"
						classname="${dd_classname}">
						<arg line="-dd ${dd_ip} -template ${dd_template} -outDir ${dd_op}"/>
					</java>
				</then>
				<else>
					<java
						classpath="${dd_clp}"
						fork="yes"
						failonerror="true"
						classname="${dd_classname}">
						<arg line="-dd ${dd_ip} -template ${dd_template} -outDir ${dd_op}"/>
					</java>
				</else>
			</if>
		</else>
	</if>

	<record name="${basedir}/buildlogs/${ddpar}_${val}_${msec}_err.log" action="stop"/>
	<record name="${basedir}/buildlogs/${ddpar}_${val}_${msec}.log" action="stop"/>
</target>

<!-- ======================================================================
				COMPILE TARGET
====================================================================== -->

<target name="compilesrc" depends="init">

<property name="csrc" value="compilesrc"/>
<record name="${basedir}/buildlogs/${csrc}_${val}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${csrc}_${val}_${msec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${csrc}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>
<propertycopy name="taskname" from="${val}_taskname" silent="true"/>

<if>
<equals arg1="${taskname}" arg2="jspcompilation" />
<then>
<propertycopy name="classdir" from="${val}_classes_dir" silent="true"/>
</then>
<else>
<if>
<equals arg1="${common_classdir}" arg2="true"/>
<then>
<property name="classdir" value="${classes_dir}"/>
</then>
<else>
<propertycopy name="classdir" from="${val}_classes_dir" silent="true"/>
</else>
</if>
</else>
</if>

<if>
<equals arg1="${common_classpath}" arg2="true"/>
<then>
<property name="clp" value="${classpath}"/>
</then>
<else>
<propertycopy name="clp" from="${val}_classpath" silent="true"/>
</else>
</if>

<propertycopy name="source_dir" from="${val}_compile_srcdir" silent="true"/>
<propertycopy name="src" from="${val}_compile_includes" silent="true"/>
<propertycopy name="src_excl" from="${val}_compile_excludes" silent="true"/>
<propertycopy name="executable" from="${val}_javac_exe" silent="true"/>
<propertycopy name="compiler" from="${val}_javac_compiler" silent="true"/>
<propertycopy name="compiler_nowarn" from="compiler_nowarn" silent="true"/>
<propertycopy name="backward_comp" from="backward_comp" silent="true"/>
<propertycopy name="backward_compatible" from="${val}_backward_compatible" silent="true"/>
<propertycopy name="compilerarg" from="${val}_javac_compilerarg" silent="true"/>
<propertycopy name="classpath_excludes" from="${val}_classpath_excludes" silent="true" />


<propertycopy name="compilesrcsource" from="${val}_javac_sourceversion" silent="true"/>
<propertycopy name="compilesrctarget" from="${val}_javac_targetversion" silent="true"/>



<if>
     <and>
           <isset property="compilesrcsource"/>
           <isset property="compilesrctarget"/>
     </and>
      <then>
      <echo message="${product_name}@${branch_name}@${build_id}@compilesrcsource:${compilesrcsource}${line.separator}" file="${basedir}/cvscheckout_java_home.txt" append="true"/>
      <echo message="${product_name}@${branch_name}@(${build_id@compilesrctarget:${compilesrctarget}${line.separator}" file="${basedir}/cvscheckout_java_home.txt" append="true"/>	

      </then>
      <elseif>
      	<isset property="executable"/>
      	<then>
   
	 <echo message="${product_name}@${branch_name}@${build_id@executable:${executable}${line.separator}" file="${basedir}/cvscheckout_java_home.txt" append="true"/>


      	</then>
</elseif>


	<elseif>
        <isset property="compiler"/>
        <then>
         <echo message="${product_name}@${branch_name}@${build_id}@compiler:${compiler}${line.separator}" file="${basedir}/cvscheckout_java_home.txt" append="true"/>

        </then>
	</elseif>

</if>

<if>
        <isset property="clp"/>
        <then>
        <if>
    <contains string="${clp}" substring=":" />
    <then>
        <for param="classpathval" list="${clp}" delimiter=":">
            <sequential>
                <if>
                <available file="@{classpathval}" type="file"/>
                <then>
                    <var name="clp" value="${clp}:@{classpathval}"/>
                </then>
                <else>
        <if><not>
        <available file="@{classpathval}" type="dir" />
        </not>
        <then>
        <var name="clp" value="${clp}" />
        </then>
        <else>
             <for param="dirjarfiles">
                     <path>
                             <fileset dir="@{classpathval}">
                                     <include name="**/*.jar"/>
                     <exclude name="${classpath_excludes}"/>
                             </fileset>
                     </path>
                     <sequential>
                             <var name="clp" value="${clp}:@{dirjarfiles}" />
                     </sequential>
                     </for>
        </else></if>
                </else>
                </if>
                </sequential>
                </for>
    </then>
    <else>
        <if>
                <available file="${clp}" type="file"/>
                        <then>
                                <var name="clp" value="${clp}:${clp}"/>
                        </then>
                        <else>
                <if><not>
                    <available file="${clp}" type="dir" />
                </not>
                <then>
                <var name="clp" value="${clp}"/>
                </then>
                <else>
                <for param="jarfiles">
                                <path>
                                        <fileset dir="${clp}">
                                                <include name="**/*.jar"/>
                                <exclude name="${classpath_excludes}"/>
                                        </fileset>
                                </path>
                <sequential>
                    <var name="clp" value="${clp}:@{jarfiles}" />
                </sequential>
                </for>
                </else>
                </if>
                        </else>
                </if>
    </else>
    </if>
    </then>
</if>

<echo message="${val}"/>
<echo message="${src}"/>
<echo message="${clp}"/>
<echo message="source_dir : ${source_basedir}"/>
<echo message="task_src_dir : ${source_dir}"/>
<echo message="classes dir : ${classdir}"/>
<echo message="${executable}"/>
<echo message="${compiler}"/>
<echo message="${backward_comp}"/>
<echo message="${compilerarg}"/>
<if>
	<isset property="source_dir"/>
	<then>
		<property name="compile_srcdir" value="${source_dir}"/>
	</then>
	<else>
		<property name="compile_srcdir" value="${source_basedir}"/>
	</else>
</if>
<echo message="java_src_dir : ${compile_srcdir}"/>

<if>
  <not>
       <isset property="compiler_nowarn"/>
  </not>
  <then>
      <property name="compiler_nowarn" value="on"/>
  </then>
</if>

<echo message="compiler_nowarn : ${compiler_nowarn}"/>



<mkdir dir="${classdir}"/>

<if>
     <and>
          <isset property="executable"/>
          <isset property="backward_comp"/>
      </and>
 <then>
 <javac srcdir="${compile_srcdir}"
        includes="${src}"
        excludes="${src_excl}"
        destdir="${classdir}"
        classpath="${clp}"
        debug="${debug}"
        debuglevel="lines,vars,source"
        optimize="${optimize}"
        deprecation="${deprecation}"
        fork="yes"
        executable="${executable}"
        nowarn="${compiler_nowarn}"
        compiler="${compiler}"
        target="${backward_comp}"
 />
 </then>
 <elseif>
          <isset property="executable"/>
 <then>
 <javac srcdir="${compile_srcdir}"
        includes="${src}"
        excludes="${src_excl}"
        destdir="${classdir}"
        classpath="${clp}"
        debug="${debug}"
        debuglevel="lines,vars,source"
        optimize="${optimize}"
        deprecation="${deprecation}"
        fork="yes"
        executable="${executable}"
        nowarn="${compiler_nowarn}"
        compiler="${compiler}"
 />
 </then>
 </elseif>

 <elseif>
          <isset property="backward_compatible"/>
 <then>
 <echo message="${backward_compatible}"/>
 <javac srcdir="${compile_srcdir}"
        includes="${src}"
        excludes="${src_excl}"
        destdir="${classdir}"
        classpath="${clp}"
        debug="${debug}"
        debuglevel="lines,vars,source"
        optimize="${optimize}"
        deprecation="${deprecation}"
        target="${backward_compatible}"
        source="${backward_compatible}"
        nowarn="${compiler_nowarn}"
 />
 </then>
 </elseif>

 <elseif>
          <isset property="backward_comp"/>
 <then>

  <echo message="${backward_comp}"/>
 <javac srcdir="${compile_srcdir}"
        includes="${src}"
        excludes="${src_excl}"
        destdir="${classdir}"
        classpath="${clp}"
        debug="${debug}"
        debuglevel="lines,vars,source"
        optimize="${optimize}"
        deprecation="${deprecation}"
        target="${backward_comp}"
        nowarn="${compiler_nowarn}"
 />
 </then>
 </elseif>

 <elseif>
	 <isset property="compilerarg"/>
	 <then>
		 <javac srcdir="${compile_srcdir}"
			 includes="${src}"
			 excludes="${src_excl}"
			 destdir="${classdir}"
			 classpath="${clp}"
			 debug="${debug}"
			 debuglevel="lines,vars,source"
			 optimize="${optimize}"
			 nowarn="${compiler_nowarn}"
			 deprecation="${deprecation}">
			 <compilerarg line="${compilerarg}"/>
	 	</javac>
	 </then>
 </elseif>
 <elseif>
          <and>
                  <isset property="compilesrcsource"/>
                  <isset property="compilesrctarget"/>
          </and>
          <then>
                  <javac srcdir="${compile_srcdir}"
                         includes="${src}"
                         excludes="${src_excl}"
                         destdir="${classdir}"
                         source="${compilesrcsource}"
                         target="${compilesrctarget}"
                         classpath="${clp}"
                         debug="${debug}"
                         debuglevel="lines,vars,source"
                         optimize="${optimize}"
                         nowarn="${compiler_nowarn}"
                         deprecation="${deprecation}" />

            </then>
 </elseif>

<else>
<javac srcdir="${compile_srcdir}"
			 includes="${src}"
             excludes="${src_excl}"
			 destdir="${classdir}"
			 classpath="${clp}"
                         debug="${debug}"
                         debuglevel="lines,vars,source"
			 optimize="${optimize}"
                         nowarn="${compiler_nowarn}"
			 deprecation="${deprecation}"/>
</else>
</if>

<record name="${basedir}/buildlogs/${csrc}_${val}_${msec}_err.log" action="stop"/>
<record name="${basedir}/buildlogs/${csrc}_${val}_${msec}.log" action="stop"/>
</target>

<!-- ======================================================================
                                ASPECTJ COMPILE
====================================================================== -->

<target name="aspectweave" depends="compilesrc">
<taskdef resource="org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties" />
<propertycopy name="inpath" from="${val}_aspectweave_inpath" silent="true"/>
<propertycopy name="classpath" from="${val}_aspectweave_classpath" silent="true"/>
<propertycopy name="aspectsrc" from="${val}_aspectweave_compile_includes" silent="true"/>
<propertycopy name="outpath" from="${val}_aspectweave_outpath" silent="true"/>
<iajc destDir="${outpath}" sourceroots="${source_basedir}/${aspectsrc}" inpath="${inpath}" classpath="${classpath}" Xlintwarnings ="true"  source="1.6"/>
</target>

<!-- ======================================================================
				GEN_JAR TARGET
====================================================================== -->
<target name="genjar" depends="init">
<property name="gjar" value="genjar"/>
<record name="${basedir}/buildlogs/${gjar}_${val}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${gjar}_${val}_${msec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${gjar}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>


<propertycopy name="destfile" from="${val}_jar_file" silent="false"/>
<propertycopy name="jarincludes" from="${val}_jar_includes" silent="false"/>
<propertycopy name="jarexcludes" from="${val}_jar_excludes" silent="true"/>
<propertycopy name="jarsrcdir" from="${val}_jar_srcdir" silent="false"/>
<propertycopy name="jarupdate" from="${val}_jar_update" silent="true"/>
<propertycopy name="jarmanifest" from="${val}_jar_manifest" silent="true"/>
<if>
<not>
<isset property="jarupdate"/>
</not>
<then>
<propertycopy name="jarupdate" from="${val}_update" silent="true"/>
</then>
</if>

<dirname property="jar.dest.dir" file="${destfile}"/>
<mkdir dir="${jar.dest.dir}"/>

<echo message="${val}:jarcreation"/>
<echo message="jarfile:-${destfile}"/>
<echo message="fileincludes:-${jarincludes}"/>
<echo message="fileexcludes:-${jarexcludes}"/>

<if><isset property="jarmanifest"/>
        <then>
                                <jar destfile="${destfile}" basedir="${jarsrcdir}" includes="${jarincludes}" excludes="${jarexcludes}" update="true" manifest="${jarmanifest}"/>
        </then>
        <else>
                                <if><equals arg1="${jarupdate}" arg2="true"/>
                                        <then>
                                                        <jar destfile="${destfile}" basedir="${jarsrcdir}" includes="${jarincludes}" excludes="${jarexcludes}" update="true" />
                                        </then>
                                        <else>
                                                        <jar destfile="${destfile}" basedir="${jarsrcdir}" includes="${jarincludes}" excludes="${jarexcludes}"/>
                                        </else>
                                </if>
        </else>
</if>
<basename property="jarname" file="${destfile}"/>
<propertyregex property="jar_outputname" input="${jarname}" regexp="(.*)\.(.*)" select="\1" casesensitive="false" />
<if>
	<not>
		<equals arg1="${jarupdate}" arg2="true"/>
	</not>
	<then>
               <if>
                  <available file="${basedir}/manifest_info.txt" type="file"/>
                  <then>
		     <if>
			<available file="${basedir}/manifest_update/${jar_outputname}.txt" type="file"/>
			<then>
				<if>
				<not>
					<available file="${basedir}/manifestinfo_temp.txt" type="file"/>
				</not>
				<then>
 					<copy file="${basedir}/manifest_info.txt" tofile="${basedir}/manifestinfo_temp.txt" overwrite="true"/>
					<echo message="Implementation-Version: ${build_lbl}${line.separator}" file="${basedir}/manifestinfo_temp.txt" append="true"/>
				</then>
				</if>
				<jar destfile="${destfile}" basedir="${jarsrcdir}" includes="${jarincludes}" excludes="${jarexcludes}" update="true" manifest="${basedir}/manifestinfo_temp.txt"/>
			</then>
		     </if>
                  </then>
               </if>
		<basename property="fb_jar" file="${destfile}"/>
		<echo message="${fb_jar}${line.separator}" file="${basedir}/findbugs_jars.txt" append="true"/>
	</then>
</if>
<record name="${basedir}/buildlogs/${gjar}_${val}_${msec}_err.log" action="stop"/>
<record name="${basedir}/buildlogs/${gjar}_${val}_${msec}.log" action="stop"/>
</target>


<!--=====================================================================
             MERGE JAR TARGET 
====================================================================== -->

<target name="mergejar" depends="init">
<property name="mjar" value="mergejar"/>

<propertycopy name="dest_merge_file" from="${val}_mergejar_file" silent="false"/>
<propertycopy name="mergejarincludes" from="${val}_mergejar_includes" silent="false"/>
<propertycopy name="mergejarexcludes" from="${val}_mergejar_excludes" silent="true"/>
<propertycopy name="mergejarsrcdir" from="${val}_mergejar_srcdir" silent="false"/>
<propertycopy name="mergejarupdate" from="${val}_mergejar_update" silent="true"/>

<echo message="${val}:jarmerge"/>
<echo message="jarfile:-${dest_merge_file}"/>
<echo message="fileincludes:-${mergejarincludes}"/>
<echo message="fileexcludes:-${mergejarexcludes}"/>

<dirname property="jar.dest.dir" file="${dest_merge_file}"/>
<mkdir dir="${jar.dest.dir}"/>
<if>
        <not>
                <equals arg1="${mergejarupdate}" arg2="true"/>
        </not>
        <then>
                <if>
                        <available file="${basedir}/manifest_info.txt" type="file"/>
                        <then>
                                <if>
                                <not>
                                        <available file="${basedir}/manifestinfo_temp.txt" type="file"/>
                                </not>
                                <then>
                                        <copy file="${basedir}/manifest_info.txt" tofile="${basedir}/manifestinfo_temp.txt" overwrite="true"/>
                                        <echo message="Implementation-Version: ${build_lbl}${line.separator}" file="${basedir}/manifestinfo_temp.txt" append="true"/>
                                </then>
                                </if>
                                <jar jarfile="${dest_merge_file}" manifest="${basedir}/manifestinfo_temp.txt">
                                        <zipgroupfileset dir="${mergejarsrcdir}" includes="${mergejarincludes}" excludes="${mergejarexcludes}"/>
                                </jar>
                        </then>
                        <else>
                                 <jar jarfile="${dest_merge_file}">
                                        <zipgroupfileset dir="${mergejarsrcdir}" includes="${mergejarincludes}" excludes="${mergejarexcludes}"/>
                                </jar>
                        </else>
                </if>
                <basename property="fb_jar" file="${dest_merge_file}"/>
                <echo message="${fb_jar}${line.separator}" file="${basedir}/findbugs_jars.txt" append="true"/>
        </then>
</if>

<record name="${basedir}/buildlogs/${mjar}_${val}_${msec}_err.log" action="stop"/>
<record name="${basedir}/buildlogs/${mjar}_${val}_${msec}.log" action="stop"/>
</target>




<!-- ======================================================================
				UNZIP TARGET
====================================================================== -->

<target name="unzip" depends="init">
<property name="uzip" value="unzip"/>
<record name="${basedir}/buildlogs/${uzip}_${val}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${uzip}_${val}_${msec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${uzip}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>


<propertycopy name="unzip_srcdir" from="${val}_unzip_srcdir" silent="false"/>
<propertycopy name="unzip_todir" from="${val}_unzip_todir" silent="false"/>
<propertycopy name="unzip_include" from="${val}_files_include" silent="false"/>
<propertycopy name="unzip_exclude" from="${val}_files_exclude" silent="true"/>
<propertycopy name="pattern_includes" from="${val}_pattern_include" silent="true"/>
<propertycopy name="pattern_excludes" from="${val}_pattern_exclude" silent="true"/>

<echo message="${val}"/>
<echo message="${unzip_srcdir}"/>
<echo message="${unzip_todir}"/>
<echo message="${unzip_include}"/>
<echo message="${unzip_exclude}"/>
<echo message="${pattern_includes}"/>
<echo message="${pattern_excludes}"/>

<if>
    <not>
         <available file="${unzip_todir}" type="dir"/>
    </not>
    <then>
          <mkdir dir="${unzip_todir}"/>
    </then>
</if>
<propertyregex property="asterisk_patt" input="${unzip_include}" regexp="(\*)" select="\1" casesensitive="true"/>
<propertyregex property="comma_patt" input="${unzip_include}" regexp="(,)" select="\1" casesensitive="true"/>
<propertyregex property="space_patt" input="${unzip_include}" regexp="(\s)" select="\1" casesensitive="true"/>
<if>
	<and>
		<not><isset property="asterisk_patt"/></not>
		<not><isset property="comma_patt"/></not>
		<not><isset property="space_patt"/></not>
		<not><available file="${unzip_srcdir}/${unzip_include}" type="file"/></not>
	</and>
	<then>
		<echo message="${unzip_include} is not availble under ${unzip_srcdir} for unzip task" file="${basedir}/build_err.txt" append="true"/>

		<fail message="${unzip_include} is not availble under ${unzip_srcdir}"/>
	</then>
</if>
<if>
                <isset property="unzip_include"/>
                <then>
                                <property name="file_includes" value="${unzip_include}"/>
                                <property name="file_excludes" value="${unzip_exclude}"/>
                </then>
                <else>
                                <property name="file_includes" value="**"/>
                </else>
</if>

<if>
                <isset property="pattern_includes"/>
                <then>
                        <unzip dest="${unzip_todir}">
                                <fileset dir="${unzip_srcdir}" includes="${file_includes}" excludes="${file_excludes}"/>
                                <patternset includes="${pattern_includes}" excludes="${pattern_excludes}"/>
                        </unzip>
                </then>
                <else>
                       <unzip dest="${unzip_todir}">
                                <fileset dir="${unzip_srcdir}" includes="${file_includes}" excludes="${file_excludes}"/>
                        </unzip>
                </else>
</if>

</target>

<!-- ======================================================================
				UNTAR TARGET
====================================================================== -->

<target name="untar" depends="init">
<property name="utar" value="untar"/>
<record name="${basedir}/buildlogs/${utar}_${val}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${utar}_${val}_${msec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${utar}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>


<propertycopy name="targz_src" from="${val}_targz_file" silent="true"/>
<propertycopy name="tar_src" from="${val}_tar_file" silent="true"/>
<propertycopy name="tar_dest" from="${val}_tar_todir" silent="true"/>

<echo message="${val}"/>
<echo message="${targz_src}"/>
<echo message="${tar_src}"/>
<echo message="${tar_dest}"/>

<if>
		<isset property="targz_src"/>
		<then>
					<gunzip src="${targz_src}"/>
		</then>
</if>


<untar dest="${tar_dest}" src="${tar_src}"/>

<record name="${basedir}/buildlogs/${utar}_${val}_${msec}_err.log" action="stop"/>
<record name="${basedir}/buildlogs/${utar}_${val}_${msec}.log" action="stop"/>
</target>

<!-- ======================================================================
				COPYTASK TARGET
====================================================================== -->

<target name="copy" depends="init">
<property name="cpy" value="copy"/>
<record name="${basedir}/buildlogs/${cpy}_${val}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${cpy}_${val}_${msec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${cpy}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>

<propertycopy name="destdir" from="${val}_copy_todir" silent="false"/>
<propertycopy name="srcdir" from="${val}_fileset_dir" silent="false"/>
<propertycopy name="pkgincludes" from="${val}_copy_includes" silent="false"/>
<propertycopy name="pdtexcludes" from="${val}_copy_excludes" silent="true"/>
<propertycopy name="pkgmapper" from="${val}_mapper_type" silent="true"/>
<propertycopy name="mapperfrom" from="${val}_mapper_from" silent="true"/>
<propertycopy name="mapperto" from="${val}_mapper_to" silent="true"/>
<propertycopy name="excludeemptydir" from="${val}_exclude_emptydirs" silent="true"/>
<propertycopy name="flattenval" from="${val}_flatten" silent="true"/>
<propertycopy name="copylogfile" from="${val}_logfile_needed" silent="true"/>
<property name="pkgexcludes" value="${pdtexcludes} build/checks.xml"/>

<if>
<not>
<isset property="pkgmapper"/>
</not>
<then>
       <if><equals arg1="${flattenval}" arg2="true"/>
       <then>
              <property name="pkgmapper" value="flatten"/>
       </then>
       </if>
</then>
</if>

<if>
	<not>
		<isset property="copylogfile" />
	</not>
	<then>
		<property name="copylogfile" value="false" />
	</then>
</if>
<echo message="copy task param:-${val}"/>
<echo message="todir:-${destdir}"/>
<echo message="srcdir:-${srcdir}"/>
<echo message="includes:-${pkgincludes}"/>
<echo message="excludes:-${pkgexcludes}"/>
<echo message="mapper type:-${pkgmapper}"/>
<echo message="mapper from:-${mapperfrom}"/>
<echo message="mapper to:-${mapperto}"/>

<if>
        <isset property="pkgmapper"/>
        <then>
                <mkdir dir="${destdir}"/>
                <copy todir="${destdir}" overwrite="true" includeEmptyDirs="false" verbose="${copylogfile}">  
                                <fileset dir="${srcdir}" includes="${pkgincludes}" excludes="${pkgexcludes}"/>
                                <mapper type="${pkgmapper}" from="${mapperfrom}" to="${mapperto}"/>
                </copy>
        </then>
        <elseif>
                <equals arg1="${excludeemptydir}" arg2="yes" casesensitive="false" />
                        <then>
                                <mkdir dir="${destdir}"/>
                                <copy todir="${destdir}" overwrite="true" includeEmptyDirs="false" verbose="${copylogfile}">
                                        <fileset dir="${srcdir}" includes="${pkgincludes}" excludes="${pkgexcludes}"/>
                                </copy>
                        </then>
        </elseif>
        <else>
                <mkdir dir="${destdir}"/>
                <copy todir="${destdir}" overwrite="true" verbose="${copylogfile}">
                        <fileset dir="${srcdir}" includes="${pkgincludes}" excludes="${pkgexcludes}"/>
                </copy>
        </else>
</if>


<record name="${basedir}/buildlogs/${cpy}_${val}_${msec}_err.log" action="stop"/>
<record name="${basedir}/buildlogs/${cpy}_${val}_${msec}.log" action="stop"/>
</target>



<!-- ======================================================================
                        SECURITY_JSP  TARGET
====================================================================== -->
<target name="securityjsp" depends="init">
        <echo message="securityjsp task skipped"/>

</target>

<target name="securityjsp_OLD" depends="init">
<property name="sjc" value="securityjsp_OLD"/>
<record name="${basedir}/buildlogs/${sjc}_${val}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${sjc}_${val}_${msec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${sjc}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>


<propertycopy name="destdir" from="${val}_securityjsp_todir" silent="false"/>
<propertycopy name="srcdir" from="${val}_securityjsp_srcdir" silent="false"/>
<propertycopy name="pkgincludes" from="${val}_securityjsp_includes" silent="false"/>
<propertycopy name="pkgexcludes" from="${val}_securityjsp_excludes" silent="true"/>
<propertycopy name="webxml" from="${val}_securityjsp_xml" silent="true"/>
<propertycopy name="javaclp" from="${val}_securityjsp_classpath" silent="false"/>
<propertycopy name="zipfile" from="${val}_securityjsp_zip_name" silent="false"/>
<propertycopy name="zip_exclude" from="${val}_securityjsp_zip_exclude" silent="true"/>
<propertycopy name="blockexternal" from="${val}_securityjsp_blockexternal" silent="true"/>

<echo message="task name:- ${sjc}"/>
<echo message="task param:- ${val}"/>
<echo message="todir:- ${destdir}"/>
<echo message="srcdir:- ${srcdir}"/>
<echo message="includes:- ${pkgincludes}"/>
<echo message="excludes:- ${pkgexcludes}"/>
<echo message="jsp_classpath:- ${javaclp}"/>
<echo message="jsp_zipname:- ${zipfile}"/>
<echo message="jsp_zipname_excludes:- ${zip_exclude}"/>

<antcall target="copy">
<param name="val" value="${val}"/>
<param name="${val}_copy_todir" value="${destdir}"/>
<param name="${val}_fileset_dir" value="${srcdir}"/>
<param name="${val}_copy_includes" value="${pkgincludes}"/>
<param name="${val}_copy_excludes" value="${sec_copy_excludes}"/>
</antcall>

<echo message="${sjc} copy task is finished"/>

<antcall target="exec">
<param name="val" value="${val}"/>
<param name="${val}_exec_dir" value="${basedir}"/>
<param name="${val}_exec_command" value="sh"/>
<param name="${val}_exec_args" value="security-audit-precompilation.sh ${destdir}"/>
</antcall>

<echo message="converting ${sjc} to exec comment task is finished"/>

<if>
    <isset property="webxml"/>
       <then>
        <antcall target="copyfile">
                <param name="${val}_copy_src_file" value="${webxml}"/>
                <param name="${val}_copy_tofile" value="${destdir}/WEB-INF/web.xml"/>
        </antcall>
        </then>
</if>

<if>
	<isset property="blockexternal"/>
		<then>
		<if>
			<equals arg1="${blockexternal}" arg2="false"/>
			<then>
				<antcall target="javatask">
				<param name="val" value="${val}"/>
				<param name="${val}_java_classpath" value="${javaclp}"/>
				<param name="${val}_java_class" value="org.apache.jasper.JspC"/>
				<param name="${val}_java_args" value="-die1 -d ${destdir}_java -webinc ${destdir}/WEB-INF/sec_web.xml -uriroot ${destdir} -webapp ${destdir} -l -s -no-blockExternal"/>
				</antcall>
			</then>
		<else>
			<antcall target="javatask">
			<param name="val" value="${val}"/>
			<param name="${val}_java_classpath" value="${javaclp}"/>
			<param name="${val}_java_class" value="org.apache.jasper.JspC"/>
			<param name="${val}_java_args" value="-die1 -d ${destdir}_java -webinc ${destdir}/WEB-INF/sec_web.xml -uriroot ${destdir} -webapp ${destdir} -l -s"/>
			</antcall>
		</else>
		</if>
		</then>
<else>
	<antcall target="javatask">
	<param name="val" value="${val}"/>
	<param name="${val}_java_classpath" value="${javaclp}"/>
	<param name="${val}_java_class" value="org.apache.jasper.JspC"/>
	<param name="${val}_java_args" value="-die1 -d ${destdir}_java -webinc ${destdir}/WEB-INF/sec_web.xml -uriroot ${destdir} -webapp ${destdir} -l -s "/>
	</antcall>
</else>
</if>

<echo message="converting ${sjc} to java files task is finished"/>

<dirname property="destdir_dname" file="${destdir}_java"/>
<basename property="destdir_bname" file="${destdir}_java"/>
<antcall target="ziptask">
<param name="val" value="${val}"/>
<param name="${val}_execdir" value="${destdir_dname}"/>
<param name="${val}_zip_name" value="${zipfile}"/>
<param name="${val}_dir_tozip" value="${destdir_bname}"/>
<param name="${val}_zip_exclude" value="${zip_exclude}"/>
</antcall>

<echo message="${sjc} java ziptask task is finished"/>

<record name="${basedir}/buildlogs/${sjc}_${val}_${msec}_err.log" action="stop"/>
<record name="${basedir}/buildlogs/${sjc}_${val}_${msec}.log" action="stop"/>

</target>
<!-- ======================================================================
			COPYFILE TARGET
====================================================================== -->

<target name="copyfile" depends="init">
<property name="cpyfile" value="copyfile"/>
<record name="${basedir}/buildlogs/${cpyfile}_${val}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${cpyfile}_${val}_${msec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${cpyfile}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>


<propertycopy name="srcfile" from="${val}_copy_src_file" silent="false"/>
<propertycopy name="destfile" from="${val}_copy_tofile" silent="false"/>

<copy file="${srcfile}" tofile="${destfile}" overwrite="true"/>

<record name="${basedir}/buildlogs/${cpyfile}_${val}_${msec}_err.log" action="stop"/>
<record name="${basedir}/buildlogs/${cpyfile}_${val}_${msec}.log" action="stop"/>
</target>

<!-- ======================================================================
				MOVEFILE TARGET
====================================================================== -->

<target name="movefile" depends="init">
<property name="mfile" value="movefile"/>
<record name="${basedir}/buildlogs/${mfile}_${val}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${mfile}_${val}_${msec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${mfile}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>


<propertycopy name="srcfile" from="${val}_move_src_file" silent="false"/>
<propertycopy name="destfile" from="${val}_move_tofile" silent="false"/>

<move file="${srcfile}" tofile="${destfile}"/>

<record name="${basedir}/buildlogs/${mfile}_${val}_${msec}_err.log" action="stop"/>
<record name="${basedir}/buildlogs/${mfile}_${val}_${msec}.log" action="stop"/>
</target>

<!-- ======================================================================
		   MOVEDIR TARGET		  
====================================================================== -->

<target name="movedir" depends="init">
<property name="movd" value="movedir"/>
<record name="${basedir}/buildlogs/${movd}_${val}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${movd}_${val}_${msec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${movd}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>


<propertycopy name="movetodir" from="${val}_move_todir" silent="false"/>
<propertycopy name="movesrcdir" from="${val}_move_fileset_dir" silent="false"/>
<propertycopy name="mv_includes" from="${val}_move_includes" silent="false"/>
<propertycopy name="mv_excludes" from="${val}_move_excludes" silent="false"/>
<propertycopy name="pkgmapper" from="${val}_mapper_type" silent="true"/>
<propertycopy name="mapperfrom" from="${val}_mapper_from" silent="true"/>
<propertycopy name="mapperto" from="${val}_mapper_to" silent="true"/>

<if>
    <isset property="pkgmapper"/>
       <then>

        <move todir="${movetodir}">
			<fileset dir="${movesrcdir}" includes="${mv_includes}" excludes="${mv_excludes}"/>
                        <mapper type="${pkgmapper}" from="${mapperfrom}" to="${mapperto}"/>
                 <!--<mapper type="glob" from="*.xml.jasper" to="*.jasper"/> -->
        </move>
</then>
<else>
         <move todir="${movetodir}">
                       <fileset dir="${movesrcdir}" includes="${mv_includes}" excludes="${mv_excludes}"/>
         </move>
</else>
</if>
						

<record name="${basedir}/buildlogs/${movd}_${val}_${msec}_err.log" action="stop"/>
<record name="${basedir}/buildlogs/${movd}_${val}_${msec}.log" action="stop"/>
</target>

<!-- ======================================================================
				REPLACE DIR TARGET
====================================================================== -->

<target name="replacedir" depends="init">
<property name="repdir" value="replacedir"/>
<record name="${basedir}/buildlogs/${repdir}_${val}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${repdir}_${val}_${msec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${repdir}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>

<propertycopy name="dir" from="${val}_dir" silent="false"/>
<propertycopy name="tok" from="${val}_tok" silent="false"/>
<propertycopy name="value" from="${val}_value" silent="false"/>
<propertycopy name="pkgincludes" from="${val}_rep_includes" silent="false"/>
<propertycopy name="pkgexcludes" from="${val}_rep_excludes" silent="true"/>

<echo message="replace task param:-${val}"/>
<echo message="dir:-${dir}"/>
<echo message="token:-${tok}"/>
<echo message="value:-${value}"/>
<echo message="includes:-${pkgincludes}"/>
<echo message="excludes:-${pkgexcludes}"/>

	<replace
		 dir="${dir}"
		 token="${tok}"
		 value="${value}"
		 encoding="UTF-8"
		 includes="${pkgincludes}"
		 excludes="${pkgexcludes}"/> 

<record name="${basedir}/buildlogs/${repdir}_${val}_${msec}_err.log" action="stop"/>
<record name="${basedir}/buildlogs/${repdir}_${val}_${msec}.log" action="stop"/>
</target>


<!-- ======================================================================
				REPLACE FILE TARGET
====================================================================== -->

<target name="replacefile" depends="init">
<property name="repfile" value="replacefile"/>
<record name="${basedir}/buildlogs/${repfile}_${val}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${repfile}_${val}_${msec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${repfile}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>

<propertycopy name="file" from="${val}_file" silent="false"/>
<propertycopy name="tok" from="${val}_tok" silent="false"/>
<propertycopy name="value" from="${val}_value" silent="false"/>
<propertycopy name="pkgincludes" from="${val}_rep_includes" silent="true"/>
<propertycopy name="pkgexcludes" from="${val}_rep_excludes" silent="true"/>
<propertycopy name="regex" from="${val}_rep_regex" silent="true"/>
<propertycopy name="urlpattern" from="${val}_rep_urlpattern" silent="true"/>
<propertycopy name="bylineval" from="${val}_rep_byline" silent="true"/>

<echo message="replace task param:-${val}"/>
<echo message="dir:-${dir}"/>
<echo message="token:-${tok}"/>
<echo message="value:-${value}"/>
<echo message="includes:-${pkgincludes}"/>
<echo message="excludes:-${pkgexcludes}"/>

<if>
	<isset property="bylineval"/>
	<then>
		<property name="byline" value="${bylineval}"/>
	</then>
	<else>
		<property name="byline" value="true"/>
	</else>
</if>
<if>
	<isset property="regex"/>
	<then>
		<replaceregexp file="${file}" match="${tok}" replace="${value}" byline="${byline}"/>
	</then>
	<elseif>
       		<isset property="urlpattern"/>
                <then>
                	<loadfile property="message" srcFile="${file}"></loadfile>
			<for list="${message}" param="fileline" delimiter="${line.separator}">
	                <sequential>

				<propertyregex property="replacetoken" input="@{fileline}"  regexp="&lt;url-pattern&gt;(.*/([^\.]*)\.jsp)&lt;/url-pattern&gt;" override="true" select="\0" casesensitive="true" defaultValue=" " />
        			<propertyregex property="replacevalue" input="@{fileline}"  regexp="&lt;url-pattern&gt;(.*/([^\.]*)\.jsp)&lt;/url-pattern&gt;" override="true" replace="&lt;url-pattern&gt;${value}\1&lt;/url-pattern&gt;"
        casesensitive="true"  defaultValue="@{fileline}" />


				<replace file="${file}" token="${replacetoken}" value="${replacevalue}" encoding="UTF-8"/>

        		</sequential>
        		</for>

        	</then>
        </elseif>
	<else>
	<replace
		 file="${file}"
		 token="${tok}"
		 value="${value}"
		 encoding="UTF-8"
		 includes="${pkgincludes}"
		 excludes="${pkgexcludes}"/> 
	</else>
	 </if>

<record name="${basedir}/buildlogs/${repfile}_${val}_${msec}_err.log" action="stop"/>
<record name="${basedir}/buildlogs/${repfile}_${val}_${msec}.log" action="stop"/>
</target>


<!-- ======================================================================
		CHMOD TARGET
====================================================================== -->

<target name="chmod" depends="init">
<property name="cmod" value="chmod"/>
<record name="${basedir}/buildlogs/${cmod}_${val}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${cmod}_${val}_${msec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${cmod}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>


<propertycopy name="dirname" from="${val}_chmod_dir" silent="false"/>
<propertycopy name="uperm" from="${val}_chmod_perm" silent="false"/>
<propertycopy name="files_includes" from="${val}_chmod_includes" silent="false"/>
<propertycopy name="type" from="${val}_chmod_type" silent="true"/>
<propertycopy name="files_excludes" from="${val}_chmod_excludes" silent="true"/>

<if>
    <isset property="type" />
        <then>
            <chmod dir="${dirname}" perm="${uperm}" includes="${files_includes}" excludes="${files_excludes}" type="${type}"/>
        </then>
        <else>
            <chmod dir="${dirname}" perm="${uperm}" includes="${files_includes}" excludes="${files_excludes}" type="file"/>
        </else>
</if>

<record name="${basedir}/buildlogs/${cmod}_${val}_${msec}_err.log" action="stop"/>
<record name="${basedir}/buildlogs/${cmod}_${val}_${msec}.log" action="stop"/>
</target>


<!-- ======================================================================
		   MKDIR TARGET		  
====================================================================== -->
<target name="mkdir" depends="init">
<property name="cdir" value="mkdir"/>
<record name="${basedir}/buildlogs/${cdir}_${val}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${cdir}_${val}_${msec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${cdir}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>


<propertycopy name="dirname" from="${val}_dirname" silent="false"/>

<mkdir dir="${dirname}"/>

<record name="${basedir}/buildlogs/${cdir}_${val}_${msec}_err.log" action="stop"/>
<record name="${basedir}/buildlogs/${cdir}_${val}_${msec}.log" action="stop"/>
</target>

<!-- ======================================================================
		  	EXEC	 TARGET 
====================================================================== -->
<target name="exec" depends="init">
<property name="exc" value="exec"/>
<record name="${basedir}/buildlogs/${exc}_${val}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${exc}_${val}_${msec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${exc}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>


<propertycopy name="execdir" from="${val}_exec_dir" silent="false"/>
<propertycopy name="cmd" from="${val}_exec_command" silent="false"/>
<propertycopy name="arguments" from="${val}_exec_args" silent="false"/>
<propertycopy name="appendopt" from="${val}_exec_append" silent="true"/>
<propertycopy name="outfile" from="${val}_exec_output" silent="true"/>
<propertycopy name="failonerror" from="${val}_exec_failonerror" silent="true"/>

<if>
	<not>
		<isset property="failonerror" />
	</not>
	<then>
		<property name="failonerror" value="false"/>
	</then>
</if>

<if>
        <isset property="appendopt"/>
    <then>
            <exec dir="${execdir}" executable="${cmd}" failonerror="${failonerror}" resultproperty="exitValue" append="${appendopt}" output="${outfile}">
                <arg line="${arguments}"/>
            </exec>
    </then>
    <else>
            <exec dir="${execdir}" executable="${cmd}" failonerror="${failonerror}" resultproperty="exitValue">
                <arg line="${arguments}"/>
            </exec>
    </else>
</if>

   <echo message="ExitValue from the task is : ${exitValue}"/>
   <if>
      <not>
         <equals arg1="${exitValue}" arg2="0"/>
      </not>
      <then>
            <echo message="${task}:${val}" file="${basedir}/paralleltaskerr.txt" append="true"/>
            <echo message="${line.separator}" file="${basedir}/paralleltaskerr.txt" append="true"/>
            <concat destfile="${basedir}/paralleltaskerr_cnt.txt" append="true">
               <filelist dir="${basedir}/buildlogs" files="${task}_${val}_${msec}.log"/>
            </concat>
            <echo message="${line.separator}" file="${basedir}/paralleltaskerr_cnt.txt" append="true"/>
            <fail message="${task}:${val} task failed"/>
      </then>
   </if>

<record name="${basedir}/buildlogs/${exc}_${val}_${msec}_err.log" action="stop"/>
<record name="${basedir}/buildlogs/${exc}_${val}_${msec}.log" action="stop"/>
</target>

<!-- ======================================================================
		  	ZIPTASK		 TARGET 
====================================================================== -->

<target name="ziptask" depends="init">
<property name="azip" value="ziptask"/>
<record name="${basedir}/buildlogs/${azip}_${val}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${azip}_${val}_${msec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${azip}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>


<propertycopy name="exec_dir" from="${val}_execdir" silent="false"/>
<propertycopy name="zipfile" from="${val}_zip_name" silent="false"/>
<propertycopy name="zipdir" from="${val}_dir_tozip" silent="false"/>
<propertycopy name="zip_exclude" from="${val}_zip_exclude" silent="false"/>

<dirname property="zip_dir_path" file="${zipfile}"/>

<if>
                        <not>
                                <available file="${zip_dir_path}" type="dir"/>
                        </not>
                        <then>
                             <mkdir dir="${zip_dir_path}"/>
                        </then>
</if>

<if>
	<and>
		<isset property="zip_exclude"/>
		<not><equals arg1="${zip_exclude}" arg2=""/></not>
	</and>
	<then>
		<exec dir="${exec_dir}" executable="zip" failonerror="true">
			<arg line="-r"/>
			<arg line="${zipfile}"/>
			<arg line="${zipdir}"/>
			<arg line="-x"/>
			<arg line="${zip_exclude}"/>
		</exec>
	</then>
	<else>
		<exec dir="${exec_dir}" executable="zip" failonerror="true">
			<arg line="-r"/>
			<arg line="${zipfile}"/>
			<arg line="${zipdir}"/>
		</exec>
	</else>
</if>

<record name="${basedir}/buildlogs/${azip}_${val}_${msec}_err.log" action="stop"/>
<record name="${basedir}/buildlogs/${azip}_${val}_${msec}.log" action="stop"/>
</target>

<!-- ======================================================================
		  	   I18NPROPERTIES TARGET		  
====================================================================== -->

<target name="i18nprop" depends="init">
<property name="i18n" value="i18nprop"/>
<record name="${basedir}/buildlogs/${i18n}_${val}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${i18n}_${val}_${msec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${i18n}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>


<propertycopy name="destfiles" from="${val}_i18nprop_tofiles" silent="false"/>
<propertycopy name="srcfile" from="${val}_i18nprop_src_file" silent="false"/>
<propertycopy name="execdir" from="${val}_exec_dir" silent="false"/>
<propertycopy name="cmd" from="${val}_i18nprop_command" silent="false"/>
<propertycopy name="argfile" from="${val}_i18nprop_argfile" silent="false"/>

	<foreach param="prop" target="i18exec" inheritall="true">
                <path>
                        <fileset dir="${execdir}" casesensitive="yes" includes="${destfiles}"/>
                </path>
        </foreach>


<record name="${basedir}/buildlogs/${i18n}_${val}_${msec}_err.log" action="stop"/>
<record name="${basedir}/buildlogs/${i18n}_${val}_${msec}.log" action="stop"/>
</target>

<target name="i18exec" depends="init">
<echo message="${line.separator}" file="${prop}" append="true"/>
<exec dir="${execdir}" executable="${cmd}" failonerror="true" append="true" output="${prop}">
                <arg line="${argfile} ${srcfile} ${prop}"/>
            </exec>
<echo message="${prop}"/>
<echo message="${line.separator}" file="${prop}" append="true"/>
</target>

<!-- ======================================================================
                            JASPERJSP TARGET
====================================================================== -->

<target name="jasperjsp" depends="init"> <property name="jastask" value="jaspertask"/>
<record name="${basedir}/buildlogs/${jastask}_${val}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${jastask}_${val}_${msec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${jastask}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>

<propertycopy name="jspclasspath"    from="${val}_jasper_classpath" silent="false"/>
<propertycopy name="jspclass"    from="${val}_jasper_class" silent="false"/>
<propertycopy name="webpath"    from="${val}_jasper_jspdir" silent="false"/>
<propertycopy name="webxmlfile"    from="${val}_jasper_webxml" silent="false"/>
<propertycopy name="jspjava"    from="${val}_jasper_javadir" silent="false"/>
<propertycopy name="blockexternal"    from="${val}_jasper_blockexternal" silent="true"/>

<echo message="jsp webapp path : ${webpath}"/>
<echo message="jsp classpath path : ${jspclasspath}"/>

<taskdef classname="${jspclass}" name="jasper" >
      <classpath>
          <pathelement path="${jspclasspath}"/>
       </classpath>
</taskdef>


<if>
	<isset property="blockexternal"/>
	<then>
		<if>
		<equals arg1="${blockexternal}" arg2="false"/>
		<then>
			<jasper
				verbose="1"
				validateXml="false"
				uriroot="${webpath}"
				webXmlFragment="${webxmlfile}"
				blockExternal="false"
				outputDir="${jspjava}" />

		</then>
		<else>
                	<jasper
			verbose="1"
			validateXml="false"
			uriroot="${webpath}"
			webXmlFragment="${webxmlfile}"
			outputDir="${jspjava}" />
		</else>
		</if>
		</then>
		<else>
		<retry retrycount="2">
		<jasper
			verbose="1"
			validateXml="false"
			uriroot="${webpath}"
			webXmlFragment="${webxmlfile}"
			outputDir="${jspjava}" />
	</retry>
</else>
</if>

<record name="${basedir}/buildlogs/${jastask}_${val}_${msec}_err.log" action="stop"/>
<record name="${basedir}/buildlogs/${jastask}_${val}_${msec}.log" action="stop"/>
</target>

<!-- ======================================================================== 
		JASPERJSPCOMPILATION TARGET CALLING
===========================================================================-->

<target name="jasperjspcompile" depends="init">
	<property name="jasperjspc" value="jasperjspcompile"/>
	<record name="${basedir}/buildlogs/${jasperjspc}_${val}_${msec}.log" action="start" loglevel="info"/>
	<record name="${basedir}/buildlogs/${jasperjspc}_${val}_${msec}_err.log" action="start" loglevel="error"/>
	<record name="${basedir}/buildlogs/${jasperjspc}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>
	<propertycopy name="srcdir" from="${val}_jaspercompilation_jspsrcdir" silent="false"/>
	<propertycopy name="pkgincludes" from="${val}_jaspercompilation_jspincludes" silent="true"/>
	<propertycopy name="pkgexcludes" from="${val}_jaspercompilation_jspexcludes" silent="true"/>
	<propertycopy name="securityxmlname" from="${val}_jaspercompilation_xml_name" silent="true"/>
	<propertycopy name="jspjar" from="${val}_jaspercompilation_jarname" silent="false"/>
	<propertycopy name="javaclp" from="${val}_jaspercompilation_jspclasspath" silent="false"/>
	<propertycopy name="jspincludes" from="${val}_jaspercompilation_jarincludes" silent="true"/>
	<propertycopy name="jspexcludes" from="${val}_jaspercompilation_jarexcludes" silent="true"/>
	<propertycopy name="jspcompile_srcdir" from="${val}_jaspercompilation_srcdir" silent="true"/>
	<propertycopy name="jspcompile_includes" from="${val}_jaspercompilation_compileincludes" silent="true"/>
	<propertycopy name="jspcompile_excludes" from="${val}_jaspercompilation_compileexcludes" silent="true"/>
	<propertycopy name="jsp_need_spaceremoval" from="${val}_jaspercompilation_needspaceremoval" silent="true"/>
	<propertycopy name="prdwebxml" from="${val}_jaspercompilation_webxml" silent="true"/>
	<propertycopy name="blockexternal" from="${val}_jaspercompilation_blockexternal" silent="true"/>

	<property name="jsp_todir" value="${build_dir}/jasperjspcompilation"/>
	<basename property="jsptodirname" file="${srcdir}"/>
	<echo message="task name:- ${sjc}"/>
	<echo message="task param:- ${val}"/>
	<echo message="todir:- ${destdir}"/>
	<echo message="srcdir:- ${srcdir}"/>
	<echo message="includes:- ${pkgincludes}"/>
	<echo message="excludes:- ${pkgexcludes}"/>
	<echo message="jsp_classpath:- ${javaclp}"/>
	<antcall target="copy">
		<param name="val" value="${val}"/>
		<param name="${val}_copy_todir" value="${jsp_todir}/${jsptodirname}"/>
		<param name="${val}_fileset_dir" value="${srcdir}"/>
		<param name="${val}_copy_includes" value="**"/>
		<param name="${val}_copy_excludes" value="${pkgexcludes}"/>
	</antcall>
	<echo message="${sjc} copy task is finished"/>

	<if>
		<and>
			<isset property="jsp_need_spaceremoval"/>
 			<equals arg1="${jsp_need_spaceremoval}" arg2="false"/>
		</and>
		<then>
			<echo message="Jsp Space remover not used in ${val} jspcompilation task"/>
		</then>
		<else>
			<antcall target="javatask">
				<param name="${val}_java_classpath" value="${javaclp}"/>
				<param name="${val}_java_class" value="com.adventnet.transformers.JSPSpaceRemover"/>
				<param name="${val}_java_args" value="${jsp_todir}/${jsptodirname}"/>
			</antcall>
		</else>
	</if>

	<echo message="${sjc} remspacejsp task is finished"/>
	<if>
		<isset property="securityxmlname"/>
		<then>
			<antcall target="copyfile">
				<param name="${val}_copy_src_file" value="${securityxmlname}"/>
				<param name="${val}_copy_tofile" value="${jsp_todir}/${jsptodirname}/WEB-INF/web.xml"/>
			</antcall>
		</then>
	</if>

	<taskdef classname="org.apache.jasper.JspC" name="jasper">
      		<classpath>
	          <pathelement path="${javaclp}"/>
       		</classpath>
	</taskdef>


	<if>
		<isset property="blockexternal"/>
			<then>
			<if>
				<equals arg1="${blockexternal}" arg2="false"/>
				<then>
					<jasper
					verbose="1"
					validateXml="false"
					uriroot="${jsp_todir}/${jsptodirname}"
					webXmlFragment="${jsp_todir}/${jsptodirname}/WEB-INF/jsp_web.xml"
					blockExternal="false"
					outputDir="${jsp_todir}/${jsptodirname}_java" />
				</then>
			<else>
				<jasper
				verbose="1"
				validateXml="false"
				uriroot="${jsp_todir}/${jsptodirname}"
				webXmlFragment="${jsp_todir}/${jsptodirname}/WEB-INF/jsp_web.xml"
				outputDir="${jsp_todir}/${jsptodirname}_java" />
			</else>
			</if>

		</then>
	<else>
		<jasper
		verbose="1"
		validateXml="false"
		uriroot="${jsp_todir}/${jsptodirname}"
		webXmlFragment="${jsp_todir}/${jsptodirname}/WEB-INF/jsp_web.xml"
		outputDir="${jsp_todir}/${jsptodirname}_java" />
	</else>
	</if>

	<echo message="converting  to java files task is finished"/>
	<dirname property="destdir_dname" file="${jsp_todir}/${jsptodirname}_java"/>
	<basename property="destdir_bname" file="${jsp_todir}/${jsptodirname}_java"/>
	<echo message="source dir:- ${jsp_todir}/${jsptodirname}_java"/>
	<if>
		<isset property="jspcompile_includes"/>
		<then>
			<property name="jsp_cmpl_inc" value="${jspcompile_includes}"/>
		</then>
		<else>
			<property name="jsp_cmpl_inc" value="**"/>
		</else>
	</if>
	<if>
		<isset property="jspcompile_srcdir"/>
		<then>
			<property name="jsp_cmpl_srcdir" value="${jspcompile_srcdir}"/>
		</then>
		<else>
			<property name="jsp_cmpl_srcdir" value="${jsp_todir}/${jsptodirname}_java"/>
		</else>
	</if>
	<antcall target="compilesrc">
		<param name="val" value="${val}"/>
		<param name="${val}_classpath" value="${javaclp}"/>
		<param name="${val}_classes_dir" value="${jsp_todir}/${jsptodirname}_classes"/>
		<param name="${val}_compile_srcdir" value="${jsp_cmpl_srcdir}"/>
		<param name="${val}_compile_includes" value="${jsp_cmpl_inc}"/>
		<param name="${val}_compile_excludes" value="${jspcompile_excludes}"/>
	</antcall>
	<dirname property="destdir_classname" file="${jsp_todir}/${jsptodirname}_classes"/>
	<basename property="destdir_classname" file="${jsp_todir}/${jsptodirname}_classes"/>
	<echo message="converting ${sjc} to jspcompilesrc task is finished"/>
	<if>
		<available file="${jspjar}" type="file"/>
		<then>
			<property name="jspjarupdate" value="true"/>
		</then>
		<else>
			<property name="jspjarupdate" value="false"/>
		</else>
	</if>
	<antcall target="genjar">
		<param name="val" value="${val}"/>
		<param name="${val}_jar_file" value="${jspjar}"/>
		<param name="${val}_jar_srcdir" value="${jsp_todir}/${jsptodirname}_classes"/>
		<param name="${val}_jar_includes" value="**"/>
		<param name="${val}_jar_update" value="${jspjarupdate}"/>
	</antcall>
	<echo message="converting ${sjc} to jspgenjar task is finished"/>

	<if>
	<isset property="blockexternal"/>
		<then>
		<if>
		<equals arg1="${blockexternal}" arg2="false"/>
		<then>

			<antcall target="javatask">
			<param name="val" value="${val}"/>
			<param name="${val}_java_classpath" value="${javaclp}"/>
			<param name="${val}_java_class" value="MergeWebXmlFiles"/>
			<param name="${val}_java_args" value="${jsp_todir}/${jsptodirname}/WEB-INF/jsp_web.xml ${jsp_todir}/${jsptodirname}/WEB-INF/web.xml -no-blockExternal"/>
		</antcall>
		</then>
		<else>
			<antcall target="javatask">
			<param name="val" value="${val}"/>
			<param name="${val}_java_classpath" value="${javaclp}"/>
			<param name="${val}_java_class" value="MergeWebXmlFiles"/>
			<param name="${val}_java_args" value="${jsp_todir}/${jsptodirname}/WEB-INF/jsp_web.xml ${jsp_todir}/${jsptodirname}/WEB-INF/web.xml"/>
			</antcall>
		</else>
		</if>
		</then>
	<else>
		<antcall target="javatask">
		<param name="val" value="${val}"/>
		<param name="${val}_java_classpath" value="${javaclp}"/>
		<param name="${val}_java_class" value="MergeWebXmlFiles"/>
		<param name="${val}_java_args" value="${jsp_todir}/${jsptodirname}/WEB-INF/jsp_web.xml ${jsp_todir}/${jsptodirname}/WEB-INF/web.xml"/>
		</antcall>
	</else>
	</if>

	<echo message="converting ${sjc} to jspxmlmerge task is finished"/>
	<antcall target="del">
		<param name="val" value="${val}"/>
		<param name="${val}_del_fileset_dir" value="${jsp_todir}/${jsptodirname}/WEB-INF"/>
		<param name="${val}_delete_includes" value="jsp_web.xml"/>
	</antcall>
	<if>
        <isset property="prdwebxml"/>
        <then>
        <antcall target="copyfile">
                <param name="${val}_copy_src_file" value="${jsp_todir}/${jsptodirname}/WEB-INF/web.xml"/>
                <param name="${val}_copy_tofile" value="${prdwebxml}"/>
        </antcall>
        </then>
        </if>


	<echo message="converting ${sjc} to jspdeletexml task is finished"/>
	<record name="${basedir}/buildlogs/${sjc}_${val}_${msec}_err.log" action="stop"/>
	<record name="${basedir}/buildlogs/${sjc}_${val}_${msec}.log" action="stop"/>

</target>

<!-- ======================================================================
                            JAVATASK TARGET               
====================================================================== -->


<target name="javatask" depends="init">
<property name="jtask" value="javatask"/>
<record name="${basedir}/buildlogs/${jtask}_${val}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${jtask}_${val}_${msec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${jtask}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>


<propertycopy name="javaclp" from="${val}_java_classpath" silent="false"/>
<propertycopy name="javacls" from="${val}_java_class" silent="false"/>
<propertycopy name="args"    from="${val}_java_args" silent="false"/>
<propertycopy name="sysprop"    from="${val}_java_sysprop" silent="true"/>
<propertycopy name="syspropexclude"    from="${val}_java_syspropexclude" silent="true"/>
<propertycopy name="javahome"    from="${val}_java_home" silent="true"/>

<if>
        <isset property="javaclp"/>
        <then>
        <if>
    <contains string="${javaclp}" substring=":" />
    <then>
        <for param="classpathval" list="${javaclp}" delimiter=":">
            <sequential>
                <if>
                <available file="@{classpathval}" type="file"/>
                <then>
                    <var name="javaclp" value="${javaclp}:@{classpathval}"/>
                </then>
                <else>
        <if><not>
        <available file="@{classpathval}" type="dir" />
        </not>
        <then>
        <var name="javaclp" value="${javaclp}" />
        </then>
        <else>
             <for param="dirjarfiles">
                     <path>
                             <fileset dir="@{classpathval}">
                                     <include name="**/*.jar"/>
                     <exclude name="${classpath_excludes}"/>
                             </fileset>
                     </path>
                     <sequential>
                             <var name="javaclp" value="${javaclp}:@{dirjarfiles}" />
                     </sequential>
                     </for>
        </else></if>
                </else>
                </if>
                </sequential>
                </for>
    </then>
    <else>
        <if>
                <available file="${javaclp}" type="file"/>
                        <then>
                                <var name="javaclp" value="${javaclp}:${javaclp}"/>
                        </then>
                        <else>
                <if><not>
                    <available file="${javaclp}" type="dir" />
                </not>
                <then>
                <var name="javaclp" value="${javaclp}"/>
                </then>
                <else>
                <for param="jarfiles">
                                <path>
                                        <fileset dir="${javaclp}">
                                                <include name="**/*.jar"/>
                                <exclude name="${classpath_excludes}"/>
                                        </fileset>
                                </path>
                <sequential>
                    <var name="javaclp" value="${javaclp}:@{jarfiles}" />
                </sequential>
                </for>
                </else>
                </if>
                        </else>
                </if>
    </else>
    </if>
    </then>
</if>

<echo message="java classpath : ${javaclp}"/>
<echo message="java classname : ${javacls}"/>
<echo message="args : ${args}"/>
<echo message="system prop [optional] : ${sysprop}"/>
<echo message="system prop exclude [optional] : ${syspropexclude}"/>
<echo message="javahome [optional] : ${javahome}"/>

<if>
       <and>
        <isset property="sysprop"/>
        <isset property="javahome"/>
       </and>
        <then>
                <java jvm="${javahome}" classpath="${javaclp}" 
                        fork="yes"
                        classname="${javacls}"
                        resultproperty="exitValue"
                        failonerror="false">
			<sysproperty key="org.apache.jasper.compiler.Parser.STRICT_QUOTE_ESCAPING" value="false"/>	
			<sysproperty key="org.apache.jasper.compiler.Parser.STRICT_WHITESPACE" value="false"/>
                	<sysproperty key="${sysprop}" value="${syspropexclude}"/>
                	<arg line="${args}"/>
                </java>
        </then>
        <elseif>
                 <isset property="javahome"/>
                 <then>
                          <java jvm="${javahome}" classpath="${javaclp}"
                                   fork="yes"
                                   classname="${javacls}"
                                   resultproperty="exitValue"
                                   failonerror="false">
                                   <sysproperty key="org.apache.jasper.compiler.Parser.STRICT_QUOTE_ESCAPING" value="false"/>
                                   <sysproperty key="org.apache.jasper.compiler.Parser.STRICT_WHITESPACE" value="false"/>
                                   <arg line="${args}"/>
                          </java>
                 </then> 
        </elseif>
         <elseif>
                 <isset property="sysprop"/>
                 <then>
                          <java classpath="${javaclp}"
                                   fork="yes"
                                   classname="${javacls}"
                                   resultproperty="exitValue"
                                   failonerror="false">
                                   <sysproperty key="org.apache.jasper.compiler.Parser.STRICT_QUOTE_ESCAPING" value="false"/>
                                   <sysproperty key="org.apache.jasper.compiler.Parser.STRICT_WHITESPACE" value="false"/>
                                   <sysproperty key="${sysprop}" value="${syspropexclude}"/>
                                   <arg line="${args}"/>
                           </java>
                 </then>
        </elseif>
        <else>
                <java classpath="${javaclp}"
                fork="yes"
                classname="${javacls}"
                resultproperty="exitValue"
                failonerror="false">
		<sysproperty key="org.apache.jasper.compiler.Parser.STRICT_QUOTE_ESCAPING" value="false"/>
                <sysproperty key="org.apache.jasper.compiler.Parser.STRICT_WHITESPACE" value="false"/>
                <arg line="${args}"/>

                </java>
        </else>
</if>

   <echo message="ExitValue for the task is : ${exitValue}"/>
   <if>
      <not>
         <equals arg1="${exitValue}" arg2="0"/>
      </not>
      <then>
            <echo message="${task}:${val}" file="${basedir}/paralleltaskerr.txt" append="true"/>
            <echo message="${line.separator}" file="${basedir}/paralleltaskerr.txt" append="true"/>
            <concat destfile="${basedir}/paralleltaskerr_cnt.txt" append="true">
               <filelist dir="${basedir}/buildlogs" files="${task}_${val}_${msec}.log"/>
            </concat>
            <echo message="${line.separator}" file="${basedir}/paralleltaskerr_cnt.txt" append="true"/>
            <fail message="${task}:${val} task failed"/>
      </then>
   </if>


<if>
	<isset property="javahome"/>
	<then>
		<echo message="${product_name}@${branch_name}@${build_id}@java_home:${javahome}${line.separator}" file="${basedir}/cvscheckout_java_home.txt" append="true"/>
	</then>
</if>

<record name="${basedir}/buildlogs/${jtask}_${val}_${msec}_err.log" action="stop"/>
<record name="${basedir}/buildlogs/${jtask}_${val}_${msec}.log" action="stop"/>
</target>
<!-- ======================================================================
                            CONCAT TARGET
====================================================================== -->
<target name="concat" depends="init">
<property name="ctask" value="concat"/>
<record name="${basedir}/buildlogs/${ctask}_${sec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${ctask}_${sec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${ctask}_${sec}_err.log" action="start" loglevel="warn" append="yes"/>

<propertycopy name="destfile" from="${val}_dest_file" silent="false"/>
<propertycopy name="destdir" from="${val}_fileset_dir" silent="false"/>
<propertycopy name="srcfile"    from="${val}_src_file" silent="false"/>
<echo message="${line.separator}" file="${destfile}" append="true"/>
<concat destfile="${destfile}" fixlastline="yes" append="true">
<filelist dir="${destdir}" files="${srcfile}"/>
</concat>
<record name="${basedir}/buildlogs/${ctask}_${sec}_err.log" action="stop"/>
<record name="${basedir}/buildlogs/${ctask}_${sec}.log" action="stop"/>
</target>
<!-- ======================================================================
		  	    JDOC TARGET		  
====================================================================== -->

<target name="jdoc" depends="init">
<property name="docj" value="jdoc"/>
<record name="${basedir}/buildlogs/${docj}_${val}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${docj}_${val}_${msec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${docj}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>


<propertycopy name="srcpath"  from="${val}_sourcepath"     silent="false"/>
<propertycopy name="clpath"   from="${val}_jdoc_classpath" silent="false"/>
<propertycopy name="dest_dir" from="${val}_destdir"        silent="false"/>
<propertycopy name="wtitle"   from="${val}_windowtitle"    silent="false"/>
<propertycopy name="dtitle"   from="${val}_doctitle" 		   silent="false"/>
<propertycopy name="auth" 	  from="${val}_author" 				 silent="false"/>
<propertycopy name="header"   from="${val}_header" 				 silent="false"/>
<propertycopy name="footer"   from="${val}_footer" 				 silent="false"/>
<propertycopy name="pblic"    from="${val}_public" 				 silent="false"/>
<propertycopy name="pkg"      from="${val}_package" 			 silent="false"/>
<propertycopy name="prtd"     from="${val}_protected"			 silent="false"/>
<propertycopy name="prvt"     from="${val}_private"				 silent="false"/>
<propertycopy name="jv_use"   from="${val}_use"						 silent="false"/>
<propertycopy name="year"   from="${val}_year"						 silent="true"/>
<propertycopy name="jdk_exec"   from="${val}_jdk_exec" silent="true"/>
<propertycopy name="link_source"   from="${val}_linksource" silent="true"/>
<propertycopy name="doclint"   from="${val}_doclint" silent="true"/>
<propertycopy name="failonerr" from="${val}_failonerror" silent="true"/>

<if>
	<isset property="failonerr"/>
	<then>
		<propertycopy name="failonerrprop" from="${val}_failonerror" silent="false"/>
	</then>
	<else>
		<property name="failonerrprop" value="true"/>
	</else>
</if>

<if>
        <isset property="jdk_exec"/>
        <then>
        <javadoc
		classpath="${clpath}"
		destdir="${dest_dir}"
		windowtitle="${wtitle}"
		splitindex="no"
		doctitle="${dtitle}"
		author="${auth}"
		Header="${header}"
		Footer="${footer}"
		public="${pblic}"
		package="${pkg}"
		maxmemory="2048m"
		protected="${prtd}"
		private="${prvt}"
		use="${jv_use}"
		failonerror="${failonerrprop}"
                executable="${jdk_exec}"
		verbose="true">
		<packageset dir="${srcpath}" defaultexcludes="yes"
				includes="**" excludes=""/>
		<bottom><![CDATA[<i>Copyright &#169; ${year} AdventNet Inc. All Rights Reserved.</i>]]></bottom>
          </javadoc>
          </then>
	  <elseif>
		<isset property="link_source"/>
		<then>
			<javadoc
				classpath="${clpath}"
				destdir="${dest_dir}"
				windowtitle="${wtitle}"
				splitindex="no"
				doctitle="${dtitle}"
				author="${auth}"
				Header="${header}"
				Footer="${footer}"
				public="${pblic}"
				package="${pkg}"
				maxmemory="2048m"
				protected="${prtd}"
				private="${prvt}"
				use="${jv_use}"
				failonerror="${failonerrprop}"
				linksource="true"
				verbose="true">
				<packageset dir="${srcpath}" defaultexcludes="yes"
					includes="**" excludes=""/>
				<bottom><![CDATA[<i>Copyright &#169; ${year} AdventNet Inc. All Rights Reserved.</i>]]></bottom>
			</javadoc>
	  	</then>
	  </elseif>
	  <elseif>
		  <isset property="doclint"/>
		  <then>
			  <javadoc
				  classpath="${clpath}"
				  destdir="${dest_dir}"
				  windowtitle="${wtitle}"
				  splitindex="no"
				  doctitle="${dtitle}"
				  author="${auth}"
				  Header="${header}"
				  Footer="${footer}"
				  public="${pblic}"
				  package="${pkg}"
				  maxmemory="2048m"
				  protected="${prtd}"
				  private="${prvt}"
				  use="${jv_use}"
				  failonerror="${failonerrprop}"
				  additionalparam="${doclint}"
				  verbose="true">
				  <packageset dir="${srcpath}" defaultexcludes="yes"
					  includes="**" excludes=""/>
				  <bottom><![CDATA[<i>Copyright &#169; ${year} AdventNet Inc. All Rights Reserved.</i>]]></bottom>
			  </javadoc>
		  </then>
	  </elseif>
          <else>
          <javadoc
                classpath="${clpath}"
                destdir="${dest_dir}"
                windowtitle="${wtitle}"
                splitindex="no"
                doctitle="${dtitle}"
                author="${auth}"
                Header="${header}"
                Footer="${footer}"
                public="${pblic}"
                package="${pkg}"
                maxmemory="2048m"
                protected="${prtd}"
                private="${prvt}"
                use="${jv_use}"
		failonerror="${failonerrprop}"
                verbose="true">
                <packageset dir="${srcpath}" defaultexcludes="yes"
                                includes="**" excludes=""/>
                <bottom><![CDATA[<i>Copyright &#169; ${year} AdventNet Inc. All Rights Reserved.</i>]]></bottom>
          </javadoc>
          </else>
</if>

<record name="${basedir}/buildlogs/${docj}_${val}_${msec}_err.log" action="stop"/>
<record name="${basedir}/buildlogs/${docj}_${val}_${msec}.log" action="stop"/>
</target>

<!-- ======================================================================
				DEL TARGET {to delete file or directory}
====================================================================== -->

<target name="del" depends="init">
<property name="remov" value="del"/>
<record name="${basedir}/buildlogs/${remov}_${val}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${remov}_${val}_${msec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${remov}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>


<propertycopy name="deldir"   from="${val}_del_fileset_dir" silent="false"/>
<propertycopy name="delfiles" from="${val}_delete_includes" silent="false"/>
<propertycopy name="delexcludes" from="${val}_delete_excludes" silent="true"/>

<echo message="${deldir}"/>

<if>
<equals arg1="${deldir}" arg2="${user.home}"/>
<then>
	<echo message="${deldir} is m/c home dir, Please provide other dir "/>
	<echo message="Cannot delete ${user.home} directory.It is machine home directory" file="${basedir}/build_err.txt" append="true"/>
<fail message="Cannot delete ${user.home} directory.It is machine home directory"/>
</then>
</if>

<echo message="${ant.version}"/>

<condition property="ant_1_8">
    <contains substring="1.8" string="${ant.version}"/>
</condition>

<if>
  <isset property="ant_1_8"/>
<then>
    <delete verbose="true" includeEmptyDirs="true" removenotfollowedsymlinks="true">
	   <fileset dir="${deldir}" includes="${delfiles}" excludes="${user.home}/** ${delexcludes} " followsymlinks="false"/>
   </delete>
</then>
<else>
    <delete verbose="true" includeEmptyDirs="true">
	   <fileset dir="${deldir}" includes="${delfiles}" excludes="${user.home}/** ${delexcludes} "/>
   </delete>
</else>
</if>

<record name="${basedir}/buildlogs/${remov}_${val}_${msec}_err.log" action="stop"/>
<record name="${basedir}/buildlogs/${remov}_${val}_${msec}.log" action="stop"/>
</target>

<!-- ======================================================================
                        ECHO TARGET
====================================================================== -->

<target name="eco" depends="init">
	<property name="eko" value="eco"/>
	<record name="${basedir}/buildlogs/${eko}_${val}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${eko}_${val}_${msec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${eko}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>


	<propertycopy name="msg"   from="${val}_eco_msg" silent="true"/>
	<propertycopy name="wfile" from="${val}_eco_file" silent="true"/>
	<propertycopy name="opt" from="${val}_eco_opt" silent="true"/>

	<echo message="${wfile}"/>

	<echo message="${msg}${line.separator}" file="${wfile}" append="${opt}"/>

<record name="${basedir}/buildlogs/${eko}_${val}_${msec}_err.log" action="stop"/>
	<record name="${basedir}/buildlogs/${eko}_${val}_${msec}.log" action="stop"/>
</target>

<!-- ======================================================================
        FFDOS TARGET
====================================================================== -->

<target name="ffdos" depends="init">
	<property name="crlf" value="ffdos"/>
	<record name="${basedir}/buildlogs/${crlf}_${val}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${crlf}_${val}_${msec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${crlf}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>


	<propertycopy name="ffdir" from="${val}_ffdos_dir" silent="false"/>
	<propertycopy name="ff_includes" from="${val}_ffdos_includes" silent="false"/>

	<fixcrlf srcDir="${ffdir}" eol="crlf" includes="${ff_includes}"/>
<record name="${basedir}/buildlogs/${crlf}_${val}_${msec}_err.log" action="stop"/>
	<record name="${basedir}/buildlogs/${crlf}_${val}_${msec}.log" action="stop"/>
</target>

<!-- ======================================================================
                        FIXCRLF TARGET
====================================================================== -->

<target name="fixcrlf" depends="init">
<property name="fix" value="fixcrlf"/>
<record name="${basedir}/buildlogs/${fix}_${val}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${fix}_${val}_${msec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${fix}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>


<propertycopy name="fixsrcdir" from="${val}_fix_srcdir" silent="false"/>
<propertycopy name="fixdestdir" from="${val}_fix_destdir" silent="true"/>
<propertycopy name="fix_eol" from="${val}_fix_eol" silent="false"/>
<propertycopy name="fix_includes" from="${val}_fix_includes" silent="false"/>
<propertycopy name="fix_excludes" from="${val}_fix_excludes" silent="true"/>

<echo message="srcdir:-${fixsrcdir}"/>
<echo message="destdir:-${fixdestdir}"/>
<echo message="eol:-${fix_eol}"/>
<echo message="includes:-${fix_includes}"/>
<echo message="excludes:-${fix_excludes}"/>

<fixcrlf srcdir="${fixsrcdir}"
       destDir="${fixdestdir}"
              eol="${fix_eol}"
                     includes="${fix_includes}"
                            excludes="${fix_excludes}"
                              />


<record name="${basedir}/buildlogs/${fix}_${val}_${msec}_err.log" action="stop"/>
<record name="${basedir}/buildlogs/${fix}_${val}_${msec}.log" action="stop"/>
</target>

<!-- ======================================================================
        ANTCALL TARGET
====================================================================== -->

<target name="antfile" depends="init">

	<property name="logant" value="antfile"/>
<record name="${basedir}/buildlogs/${logant}_${val}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${logant}_${val}_${msec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${logant}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>


	<propertycopy name="ant_file" from="${val}_antfile" silent="false"/>
	<propertycopy name="ant_dir" from="${val}_antdir" silent="false"/>
	<propertycopy name="ant_target" from="${val}_anttarget" silent="true"/>
	
	
	<if>
     <isset property="ant_target"/>
     <then>
					<ant antfile="${ant_file}" dir="${ant_dir}" target="${ant_target}"/>
		 </then>
     <else>
					<ant antfile="${ant_file}" dir="${ant_dir}"/>
     </else>
</if>



	
	<record name="${basedir}/buildlogs/${logant}_${val}_${msec}_err.log" action="stop"/>
	<record name="${basedir}/buildlogs/${logant}_${val}_${msec}.log" action="stop"/>

</target>

<!-- ======================================================================
          XSLT TASK
====================================================================== -->

<target name="xslttask" depends="init">

	<property name="xsltlog" value="xslttask"/>
<record name="${basedir}/buildlogs/${xsltlog}_${val}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${xsltlog}_${val}_${msec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${xsltlog}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>


	<propertycopy name="xslt_style" from="${val}_xsltfile" silent="true"/>
	<propertycopy name="xslt_inp" from="${val}_xslt_input" silent="true"/>
	<propertycopy name="xslt_op" from="${val}_xslt_output" silent="true"/>
	<propertycopy name="dtd_pbid" from="${val}_dtd_public_id" silent="true"/>
	<propertycopy name="dtd_loc" from="${val}_dtd_location" silent="true"/>

<xslt style="${xslt_style}" in="${xslt_inp}" out="${xslt_op}" force="true">
        <xmlcatalog>
                <dtd publicId="${dtd_pbid}" location="${dtd_loc}"/>
        </xmlcatalog>
</xslt>

	<record name="${basedir}/buildlogs/${xsltlog}_${val}_${msec}_err.log" action="stop"/>
	<record name="${basedir}/buildlogs/${xsltlog}_${val}_${msec}.log" action="stop"/>
</target>

<!-- ======================================================================
          XSLT DIR TASK
====================================================================== -->

<target name="xsltdirtask" depends="init">

	<property name="xsltlog" value="xslttask"/>
<record name="${basedir}/buildlogs/${xsltlog}_${val}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${xsltlog}_${val}_${msec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${xsltlog}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>


	<propertycopy name="xslt_style" from="${val}_xsltfile" silent="true"/>
	<propertycopy name="xslt_inp" from="${val}_xslt_input" silent="true"/>
	<propertycopy name="xslt_op" from="${val}_xslt_output" silent="true"/>
	<propertycopy name="dtd_pbid" from="${val}_dtd_public_id" silent="true"/>
	<propertycopy name="dtd_loc" from="${val}_dtd_location" silent="true"/>

<xslt style="${xslt_style}" basedir="${xslt_inp}" destdir="${xslt_op}" force="true">
        <xmlcatalog>
                <dtd publicId="${dtd_pbid}" location="${dtd_loc}"/>
        </xmlcatalog>
</xslt>

	<record name="${basedir}/buildlogs/${xsltlog}_${val}_${msec}_err.log" action="stop"/>
	<record name="${basedir}/buildlogs/${xsltlog}_${val}_${msec}.log" action="stop"/>
</target>

<!-- ======================================================================
                               SIGNJAR  TARGET
====================================================================== -->

<target name="signjar" depends="init">
<property name="sjar" value="signjar"/>
<record name="${basedir}/buildlogs/${sjar}_${val}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${sjar}_${val}_${msec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${sjar}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>

<propertycopy name="jarfile" from="${val}_jar_file" silent="false"/>
<propertycopy name="keyalias" from="${val}_jar_alias" silent="false"/>
<propertycopy name="keystorepass" from="${val}_jar_storepass" silent="false"/>
<propertycopy name="keyfile" from="${val}_keyfile" silent="true"/>
<propertycopy name="storetype" from="${val}_storetype" silent="true"/>
<propertycopy name="domain" from="${val}_sitename" silent="true"/>
<propertycopy name="product" from="${val}_product" silent="true"/>
<propertycopy name="timestamp" from="${val}_timestamp_needed" silent="true"/>
<propertycopy name="sigfle" from="${val}_sigfile_name" silent="true"/>
<propertycopy name="decryptmode" from="${val}_decrypt_mode" silent="true"/>


<echo message="${val}"/>
<echo message="${jarfile}"/>
<echo message="${keyalias}"/>
<echo message="${keystorepass}"/>
<echo message="${keyfile}"/>
<echo message="${storetype}"/>
<echo message="${domain}"/>
<echo message="${product}"/>

<property name="aespath" value="${user.home}/integ/aes.jar"/>

<condition property="aestarget">
<or>
<equals arg1="${target}" arg2="targetfull"/>
<equals arg1="${target}" arg2="targetwindows"/>
<equals arg1="${target}" arg2="targetlinux"/>
<equals arg1="${target}" arg2="targetppm"/>
</or>
</condition>

<condition property="aescheck">
<not>
       <available file="${aespath}" type="file"/>
</not>
</condition>

<if>
<not>
	<isset property="aestarget"/>
</not>
<then>
	<if>
		<and>
		<isset property="aescheck"/>
		<isset property="decryptmode"/>
		</and>
		<then>
		<property name="lbuild" value="lcbuild"/>
		</then>
	</if>
</then>
</if>

<if>
<equals arg1="${decryptmode}" arg2="true"/>
<then>
	<if>
	<bool>
	<isgreaterthan arg1="${java.version}" arg2="1.8.0"/>
	</bool>
	<then>
		<if>
		<available file="${aespath}" type="file"/>
		<then>
			<exec dir="${basedir}" executable="java" resultproperty="exitValue" outputproperty="outputvalue">
				<arg line="-jar ${aespath} ${keystorepass} decrypt"/>
			</exec>
			<if>
			<equals arg1="${exitValue}" arg2="0"/>
			<then>
				<var name="keystorepass" unset="true"/>
				<property name="keystorepass" value="${outputvalue}"/>
				<echo message="Decrypted successfully ..."/>
			</then>
			<else>
				<fail message="Signjar task error: Keystore password decryption failed, kindly check the provided storepass value.."/>
			</else>
			</if>
		</then>
		<else>
			<echo message="Warning: Decryption jar is not available, kindly contact integration-team .."/>
			<property name="aescheck" value="lbuild"/>
		</else>
		</if>
	</then>
	<else>
		<echo message="${line.separator} Important: Java version should be 1.8.0 or greater, kindly contact integration-team .. ${line.separator} "/>
	</else>
	</if>
</then>
</if>


<if>
       <isset property="lbuild"/>
       <then>
               <echo message="Info: Decryption class is not available, hence signing jar task skipped ..."/>
       </then>
<else>

<if>
	<and>
		<isset property="keyfile"/>
		<isset property="storetype"/>
	</and>
	<then>
               <if>
                 <isset property="timestamp"/>
                   <then>
                      <if>
                      <isset property="sigfle"/>
                      <then>
		          <signjar jar="${jarfile}" storetype="${storetype}" alias="${keyalias}" keystore="${keyfile}"  storepass="${keystorepass}" tsaurl="http://timestamp.comodoca.com/rfc3161" sigfile="${sigfle}"/>
		      </then>
		      <else>
		          <signjar jar="${jarfile}" storetype="${storetype}" alias="${keyalias}" keystore="${keyfile}"  storepass="${keystorepass}" tsaurl="http://timestamp.comodoca.com/rfc3161"/>
		      </else>
		      </if>
                   </then>
               <else>
               	    <if>
               	    <isset property="sigfle"/>
               	    <then>
		        <signjar jar="${jarfile}" storetype="${storetype}" alias="${keyalias}" keystore="${keyfile}"  storepass="${keystorepass}" sigfile="${sigfle}"/>
		    </then>
		    <else>
		    	<signjar jar="${jarfile}" storetype="${storetype}" alias="${keyalias}" keystore="${keyfile}"  storepass="${keystorepass}"/>
		    </else>
		    </if>
               </else>
              </if>
	</then>
	<else>
        	<delete file="${user.home}/.keystore"/>

		<genkey alias="${keyalias}" storepass="${keystorepass}"
                        dname="CN=${domain}, OU=${product}, O=AdventNetInc C=India"/>
		<if>
		<isset property="sigfle"/>
		<then>
		    <signjar jar="${jarfile}" alias="${keyalias}" storepass="${keystorepass}" sigfile="${sigfle}"/>
		</then>
		<else>
		    <signjar jar="${jarfile}" alias="${keyalias}" storepass="${keystorepass}"/>
		</else>
		</if>
	</else>
</if>

</else>
</if>

<record name="${basedir}/buildlogs/${sjar}_${val}_${msec}_err.log" action="stop"/>
<record name="${basedir}/buildlogs/${sjar}_${val}_${msec}.log" action="stop"/>

</target>


<!-- ==================================================================

                  TOUCH TARGET
============================================================================= -->

<target name="touch" depends="init">
<property name="touc" value="touch"/>
<record name="${basedir}/buildlogs/${touc}_${val}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${touc}_${val}_${msec}_err.log" action="start" loglevel="error"/>

<propertycopy name="filename" from="${val}_new_file" silent="false"/>

  <touch file="${filename}"/>

  <record name="${basedir}/buildlogs/${touc}_${val}_${msec}_err.log" action="stop"/>
  <record name="${basedir}/buildlogs/${touc}_${val}_${msec}.log" action="stop"/>
</target>

<!-- ======================================================================
			CONCATPROPERTY TARGET
====================================================================== -->
<target name="concatproperty" depends="init">
	<property name="ctask" value="concatproperty"/>
	<record name="${basedir}/buildlogs/${ctask}_${sec}.log" action="start" loglevel="info"/>
	<record name="${basedir}/buildlogs/${ctask}_${sec}_err.log" action="start" loglevel="error"/>
	<record name="${basedir}/buildlogs/${ctask}_${sec}_err.log" action="start" loglevel="warn" append="yes"/>
	<echo message="FILE--->${file_path}"/>

	<propertycopy name="destfile" from="${val}_dest_file" silent="false"/>
	<propertycopy name="destdir" from="${val}_fileset_dir" silent="false"/>
	<propertycopy name="includes" from="${val}_prop_includes" silent="false"/>
	<propertycopy name="excludes" from="${val}_prop_excludes" silent="false"/>

	<record name="${basedir}/buildlogs/${ctask}_${sec}_err.log" action="stop"/>
	<record name="${basedir}/buildlogs/${ctask}_${sec}.log" action="stop"/>

	<foreach param="file_path" target="concatall" inheritall="true">
		<path>
			<fileset dir="${destdir}" includes="${includes}" excludes="${excludes}"/>
		</path>

	</foreach>
</target>

<target name="concatall" depends="init">
	<property name="ctask" value="concatall"/>
	<basename property="file_name" file="${file_path}"/>
	<echo message="${file_path}"/>
	<echo message="${file_name}"/>
	<concat destfile="${destfile}" append="true">
		<filelist dir="${destdir}" files="${file_name}"/>
	</concat>
	<echo message="${line.separator}" file="${destfile}" append="yes"/>
</target>

<!-- ==================================================================

SECURITY SCHEMA VALIDATION TARGET
============================================================================= -->

<target name="securityschemavalidation" depends="init">
	<property name="schema" value="securityschemavalidation"/>
	<record name="${basedir}/buildlogs/${schema}_${val}_${msec}.log" action="start" loglevel="info"/>
	<propertycopy name="filelist" from="${val}_fileset_dir" silent="false"/>                  
	<propertycopy name="exclude_val" from="${val}_exclude_dir" silent="true"/>          
	<if>
		<isset property="exclude_val"/>
		<then>
			<foreach param="webxml" target="schemavalidation">                                        
				<path>                                                                            
					<fileset dir="${filelist}" casesensitive="yes" includes="**/WEB-INF/web.xml" excludes="**/grid/** **/ROOT/** **/memcacheadmin/** ${exclude_val}"/>
				</path>                                                                           
			</foreach>                                                                                
		</then>
		<else>
			<foreach param="webxml" target="schemavalidation">
				<path>
					<fileset dir="${filelist}" casesensitive="yes" includes="**/WEB-INF/web.xml" excludes="**/grid/** **/ROOT/** **/memcacheadmin/**"/>
				</path>
			</foreach>
		</else>
	</if>
	<record name="${basedir}/buildlogs/${schema}_${val}_${msec}.log" action="stop"/>                 
</target>                                                                                         
<target name="schemavalidation" depends="init">                                                   
	<dirname property="webxml_src_dir" file="${webxml}"/>                                     
	<copy file="${webxml}" tofile="${webxml_src_dir}/web_new.xml"/>                           
	<replaceregexp file="${webxml_src_dir}/web_new.xml" match="(.*DOCTYPE.*)(\n)?(.*PUBLIC.*)(\n)?(.*dtd.*)" replace=""/>
	<xmlproperty file="${webxml_src_dir}/web_new.xml" collapseAttributes="true" delimiter="@"/>                    
	<for list="${web-app.filter.init-param.param-value}" param="paramvalue" delimiter="@">                         
		<sequential>                                                                                           
			<propertyregex property="@{paramvalue}_getSecurityFiles" input="@{paramvalue}" regexp=".*security[^.]*\.xml.*" replace="\0" casesensitive="true"/>                                                                                                                              
			<if>                                                                                                                        
				<isset property="@{paramvalue}_getSecurityFiles"/>                                                                  
				<then>                                                                                                              
					<for list="${@{paramvalue}_getSecurityFiles}" param="securityfile" delimiter=",">                           
						<sequential>                                                                                        
							<propertyregex property="@{securityfile}_getCommonXml" input="@{securityfile}" regexp=".*security-common.xml" replace="\0" casesensitive="true"/>                                                                                               
							<if>
								<isset property="@{securityfile}_getCommonXml"/>
								<then>
									<loadfile property="@{securityfile}_securitycommonprop" srcfile="${webxml_src_dir}/@{securityfile}"/>
									<propertyregex property="@{securityfile}_matched" input="${@{securityfile}_securitycommonprop}" regexp=".*noNamespaceSchemaLocation" replace="\0" casesensitive="true"/>
									<if>
										<isset property="@{securityfile}_matched"/>
										<then>
											<schemavalidate file="${webxml_src_dir}/@{securityfile}"/>
											<echo message="Validating ${webxml_src_dir}/@{securityfile}!!!"/>
										</then>
										<else>
											<echo message="${webxml_src_dir}/@{securityfile} could not be validated !!!"/>
										</else>
									</if>
								</then>
                                                                <else>
                                                                       <if>
                                                                            <available file="${webxml_src_dir}/@{securityfile}" type="file"/>
                                                                             <then>
                                                                                   <schemavalidate file="${webxml_src_dir}/@{securityfile}"/>
                                                                                   <echo message="Validating ${webxml_src_dir}/@{securityfile} !!!"/>
                                                                             </then>
                                                                            <else>
                                                                               <foreach target="schema_validate_files_under_folder" param="securityfile" >
                                                                                <path>
                                                                                        <fileset dir="${webxml_src_dir}/@{securityfile}" casesensitive="yes" includes="*.xml"/>
                                                                                </path>
                                                                               </foreach>
                                                                            </else>
                                                                       </if>
                                                                </else>
							</if>
						</sequential>
					</for>
				</then>
			</if>
		</sequential>
	</for>
	<delete file="${webxml_src_dir}/web_new.xml"/>
</target>

<target name="schema_validate_files_under_folder">
        <basename property="security_filename" file="${securityfile}"/>
        <propertyregex property="IsSecurityFile" input="${security_filename}" regexp="^security.*.xml$" replace="\0" casesensitive="true"/>
        <if>
                <isset property="IsSecurityFile"/>
                <then>
                        <echo message="Validating ${securityfile} !!!"/>
                        <schemavalidate file="${securityfile}"/>
                </then>
        <else>
                <echo message="${securityfile} is not a security file format, so we ignored it."/>
        </else>
        </if>
</target>

<!--==================================================================================================
				REPLACE TASKS FOR REPLACING THE FILES
================================================================================================-->  

<target name="replacepropvals" depends="init">
	<property name="rv" value="repvals"/>

	<record name="${basedir}/buildlogs/${rv}_${val}_${msec}.log" action="start" loglevel="info"/>
	<record name="${basedir}/buildlogs/${rv}_${val}_${msec}_err.log" action="start" loglevel="error"/>
	<record name="${basedir}/buildlogs/${rv}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>

	<propertycopy name="propfile" from="${val}_replacevals_file" silent="false"/>

	<mkdir dir="${build_tempdir}"/>
	<loadfile property="message"
		srcFile="${propfile}"
		failonerror="true">
		<filterchain>
			<striplinecomments>
				<comment value="#"/>
			</striplinecomments>
			<expandproperties/>
		</filterchain>
	</loadfile>

	<echo message="The property value for replacepropvals task is : ${message}"/>

	<for list="${message}" param="fileline" delimiter="${line.separator}">
		<sequential>
			<echo message="VAL IS : @{fileline}"/>
			<propertyregex property="filename"
				input="@{fileline}"
				regexp="(.*?);(.*?);(.*)"
				select="\1"/>
			<propertyregex property="oldvalue"
				input="@{fileline}"
				regexp="(.*?);(.*?);(.*)"
				select="\2"/>
			<propertyregex property="newvalue"
				input="@{fileline}"
				regexp="(.*?);(.*?);(.*)"
				select="\3"/>

			<echo message="The file to be modified is : ${filename}"/>
			<echo message="The old value is : ${oldvalue}"/>
			<echo message="The new value is : ${newvalue}"/>

			<available file="${filename}" property="fileexists"/>
			<propertyregex property="basename"
				input="${filename}"
				regexp="(.*)/(.*)"
				select="\2"/>

			<if><isset property="fileexists"/>
				<then>
					<echo message="File exists"/>
					<available file="${build_tempdir}/${basename}" property="filealreadyexists"/>
					<if><isset property="filealreadyexists"/>
						<then>
						</then>
						<else>
							<copy file="${filename}" todir="${build_tempdir}"/>
							<echo message="${filename}${line.separator}" file="${modified_files}" append="true"/>
						</else>
					</if>
					<replaceregexp file="${filename}"
						match="${oldvalue}"
						replace="${newvalue}"
						byline="true"/>

				</then>
				<else>					
					<echo message="File ${filename} mentioned for modification does not exists"/>
					<echo message="Hence quitting the build........"/>
					<fail/>					
				</else>
			</if>
			<var name="filename" unset="true"/>
			<var name="oldvalue" unset="true"/>
			<var name="newvalue" unset="true"/>
			<var name="fileexists" unset="true"/>
			<var name="basename" unset="true"/>
			<var name="filealreadyexists" unset="true"/>
		</sequential>
	</for>

		<record name="${basedir}/buildlogs/${rv}_${val}_${msec}.log" action="stop"/>
	<record name="${basedir}/buildlogs/${rv}_${val}_${msec}_err.log" action="stop"/>
</target>

<!-- ==================================================================
<                  JAVACC TARGET
============================================================================= -->

<target name="javacc" depends="init">
	<property name="jcc" value="javacc"/>

	<record name="${basedir}/buildlogs/${jcc}_${sec}.log" action="start" loglevel="info"/>
	<record name="${basedir}/buildlogs/${jcc}_${sec}_err.log" action="start" loglevel="error"/>
	<record name="${basedir}/buildlogs/${jcc}_${sec}_err.log" action="start" loglevel="warn" append="yes"/>

	<propertycopy name="targetfile" from="${val}_target_file" silent="false"/>
	<propertycopy name="outdir" from="${val}_output_dir" silent="false"/>
	<propertycopy name="jcchome" from="${val}_javacc_home" silent="false"/>

	<echo message="${val}"/>
	<echo message="${targetfile}"/>
	<echo message="${outdir}"/>
	<echo message="${jcchome}"/>

	<javacc target="${targetfile}"
		javacchome="${jcchome}"/>

	<record name="${basedir}/buildlogs/${jcc}_${sec}.log" action="stop"/>
	<record name="${basedir}/buildlogs/${jcc}_${sec}_err.log" action="stop"/>
	<record name="${basedir}/buildlogs/${jcc}_${sec}_err.log" action="stop"/>

</target>

<!-- ==================================================================
                  JJTREE TARGET
============================================================================= -->

<target name="jjtree" depends="init">
	<property name="jjt" value="jjtree"/>

	<record name="${basedir}/buildlogs/${jjt}_${sec}.log" action="start" loglevel="info"/>
	<record name="${basedir}/buildlogs/${jjt}_${sec}_err.log" action="start" loglevel="error"/>
	<record name="${basedir}/buildlogs/${jjt}_${sec}_err.log" action="start" loglevel="warn" append="yes"/>

	<propertycopy name="jjtfile" from="${val}_jjtree_file" silent="false"/>
	<propertycopy name="jjthome" from="${val}_jjtree_home" silent="false"/>
	<propertycopy name="opdir" from="${val}_jj_output_dir" silent="true"/>

	<echo message="${val}"/>
	<echo message="${jjtfile}"/>
	<echo message="${opdir}"/>
	<echo message="${jjthome}"/>

	<jjtree target="${jjtfile}"
		outputdirectory="${opdir}"
		javacchome="${jjthome}"/>

	<record name="${basedir}/buildlogs/${jjt}_${sec}.log" action="stop"/>
	<record name="${basedir}/buildlogs/${jjt}_${sec}_err.log" action="stop"/>
	<record name="${basedir}/buildlogs/${jjt}_${sec}_err.log" action="stop"/>

</target>

<!-- ======================================================================
                FILE CHANGE  TARGET
====================================================================== -->

<target name="copyfiles" depends="init">
        <propertyregex property="sqlsearch" input="${listvalue}" regexp="(.*)(_.*)" select="\1" casesensitive="true"/>
        <dirname property="srcdir" file="${listvalue}"/>
        <basename property="srcfile" file="${listvalue}"/>
        <concat destfile="${sqlsearch}" append="true">
                <filelist dir="${srcdir}" files="${srcfile}"/>
        </concat>
</target>
<target name="filechange" depends="init">
        <property name="fchange" value="filechange"/>
        <record name="${basedir}/buildlogs/${fchange}_${val}_${msec}.log" action="start" loglevel="info"/>
        <record name="${basedir}/buildlogs/${fchange}_${val}_${msec}_err.log" action="start" loglevel="error"/>
        <record name="${basedir}/buildlogs/${fchange}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>
        <propertycopy name="flist" from="${val}_filechange_list" silent="false"/>
        <propertycopy name="includes" from="${val}_includes" silent="false"/>
        <foreach param="listvalue" target="copyfiles">
                <path>
                        <fileset dir="${flist}" includes="${includes}"/>
                </path>
        </foreach>
</target>
<!-- =========================================================================
                                        SCPFROM TARGET
                        TARGET FOR COPYING FILES FROM REMOTE MACHINE
==========================================================================-->

<target name="scpfrom" depends="init">

        <property name="scpfrom" value="scpfrom"/>

        <record name="${basedir}/buildlogs/${scpfrom}_${val}_${msec}.log" action="start" loglevel="info"/>
        <record name="${basedir}/buildlogs/${scpfrom}_${val}_${msec}_err.log" action="start" loglevel="error"/>
        <record name="${basedir}/buildlogs/${scpfrom}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>

        <propertycopy name="sourcedir" from="${val}_scpfrom_srcdir" silent="false"/>
        <propertycopy name="sourcefile" from="${val}_scpfrom_srcfile" silent="false"/>
        <propertycopy name="scpmachine" from="${val}_scpfrom_machine" silent="false"/>
        <propertycopy name="scpusername" from="${val}_scpfrom_username" silent="false"/>
        <propertycopy name="scppassword" from="${val}_scpfrom_password" silent="false"/>
        <propertycopy name="scpdestdir" from="${val}_scpfrom_destdir" silent="false"/>
        <propertycopy name="scpdestfile" from="${val}_scpfrom_destfile" silent="false"/>
        <propertycopy name="trustval" from="${val}_scpfrom_trust" silent="true"/>
        <propertycopy name="appendfilename" from="${val}_scpfrom_rename_needed" silent="true"/>
        <propertycopy name="destdir_creation" from="${val}_scpfrom_destdir_creation_needed" silent="true"/>
	
        <!--property appendfilename used to append machine name with the file name-->
        <if>
          <isset property="appendfilename"/>
                <then>
                    <if>
                        <equals arg1="${appendfilename}" arg2="front"/>
                        <then>
                                <property name="scpdestfilename" value="${scpmachine}_${scpdestfile}"/>
                        </then>
                        <else>
                                <property name="scpdestfilename" value="${scpdestfile}_${scpmachine}"/>
                        </else>
                    </if>
                </then>
                <else>
                        <property name="scpdestfilename" value="${scpdestfile}"/>
                </else>
        </if>
        <echo message="${scpdestfilename}"/>

        <if>
        	<and>
                	<isset property="destdir_creation"/>
                	<equals arg1="${destdir_creation}" arg2="yes"/>
        	</and>

                <then>
        		<dirname property="dest.dir" file="${scpdestdir}/${scpdestfile}"/>
		        <mkdir dir="${dest.dir}"/>
                </then>
        </if>


        <if>
           <not><isset property="port_value"/></not>
                <then>
                        <property name="port_value" value="22"/>
                </then>
        </if>

        <!--echo message="The source file for scpfrom task is : ${scpusername}:${scppassword}@${scpmachine}:${sourcedir}/${sourcefile}"/-->
        <echo message="The source file for scpfrom task is : ${scpmachine}:${sourcedir}/${sourcefile} Port : ${port_value}"/>
        <echo message="The destination directory for scpfrom task is : ${scpdestdir}/${scpdestfilename}"/>

        <available file="${rsa_keyfile}" property="fileexists"/>
        <if><isset property="fileexists"/>
          <then>
               <scp file="${scpusername}:${scppassword}@${scpmachine}:${sourcedir}/${sourcefile}" todir="${scpdestdir}/${scpdestfilename}" trust="${trustval}" port="${port_value}" passphrase="${scppassword}" keyfile="${rsa_keyfile}"/>
          </then>
         <else>
               <scp file="${scpusername}:${scppassword}@${scpmachine}:${sourcedir}/${sourcefile}" todir="${scpdestdir}/${scpdestfilename}" trust="${trustval}" port="${port_value}" passphrase="${scppassword}"/>
         </else>
        </if>
<if><isset property="fileexists"/>
          <then>
               <sshexec host="${scpmachine}" username="${scpusername}" password="${scppassword}" command="cd ${sourcedir} ; md5sum ${sourcefile}" outputproperty="destmd5" trust="true" port="${port_value}" passphrase="${scppassword}" keyfile="${rsa_keyfile}"/>
          </then>
         <else>
               <sshexec host="${scpmachine}" username="${scpusername}" password="${scppassword}" command="cd ${sourcedir} ; md5sum ${sourcefile}" outputproperty="destmd5" trust="true" port="${port_value}" passphrase="${scppassword}" />
         </else>
        </if>

        <propertyregex property="destmd5sum"
                input="${destmd5}"
                regexp="(.*?)\s+.*"
                select="\1"/>

        <echo message="ANT VERSION :: ${env.ANT_HOME}"/>

        <if>
            <equals arg1="${env.ANT_HOME}" arg2="/usr/ant/apache-ant-1.6.5"/>
            <then>
        <if>
            <equals arg1="${os.name}" arg2="Mac OS X"/>
            <then>
                  <exec dir="${scpdestdir}" executable="md5" outputproperty="srcmd5" errorproperty="srcmd5_error">
                    <arg line="${scpdestfilename}"/>
                  </exec>

                  <propertyregex property="srcmd5sum"
                                input="${srcmd5}"
                                regexp="(.*?)\s+=\s+(.*)"
                                select="\2"/>
                
            </then>
            <else>
                <exec dir="${scpdestdir}" executable="md5sum" outputproperty="srcmd5" errorproperty="srcmd5_error">
                    <arg line="${scpdestfilename}"/>
                </exec>

                <propertyregex property="srcmd5sum"
                                input="${srcmd5}"
                                regexp="(.*?)\s+.*"
                                select="\1"/>
            </else>
         </if>
         <echo message="The md5sum exec command output : ${srcmd5}"/>
         <echo message="The md5sum for source file is : ${srcmd5sum}"/>
        </then>
        <else>
            <checksum file="${scpdestdir}/${scpdestfilename}" property="srcmd5sum" format="MD5SUM"/>
            <echo message="The ant checksum task output for source file is: ${srcmd5sum}"/>
        </else>
       </if>
        <echo message="The md5sum for destination file is : ${destmd5sum}"/>
        <if>
                <equals arg1="${srcmd5sum}" arg2="${destmd5sum}"/>
                <then>
                        <echo message="Continuing the build as md5sum is same"/>
                </then>
                <else>
                        <echo message=" Error output for executing md5sum command : ${srcmd5_error}"/>
                        <echo message="The md5sum for the source file and destination file differ. Hence quitting the build..."/>
                </else>
        </if>

        <record name="${basedir}/buildlogs/${scptask}_${val}_${msec}.log" action="stop"/>
        <record name="${basedir}/buildlogs/${scptask}_${val}_${msec}_err.log" action="stop"/>
</target>
<!-- =========================================================================
                                                        SCP TARGET
                                        TARGET FOR COPYING FILES TO REMOTE MACHINE
===========================================================================-->

<target name="scpfile" depends="init">

        <property name="scptask" value="scptask"/>

        <record name="${basedir}/buildlogs/${scptask}_${val}_${msec}.log" action="start" loglevel="info"/>
        <record name="${basedir}/buildlogs/${scptask}_${val}_${msec}_err.log" action="start" loglevel="error"/>
        <record name="${basedir}/buildlogs/${scptask}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>

        <propertycopy name="sourcedir" from="${val}_scp_srcdir" silent="false"/>
        <propertycopy name="sourcefile" from="${val}_scp_srcfile" silent="false"/>
        <propertycopy name="scpmachine" from="${val}_scp_machine" silent="false"/>
        <propertycopy name="scpusername" from="${val}_scp_username" silent="false"/>
        <propertycopy name="scppassword" from="${val}_scp_password" silent="false"/>
        <propertycopy name="scpdestdir" from="${val}_scp_destdir" silent="false"/>
        <propertycopy name="scpdestfile" from="${val}_scp_destfile" silent="false"/>
        <propertycopy name="trustval" from="${val}_scp_trust" silent="true"/>
        <propertycopy name="port_value" from="${val}_scp_port" silent="true"/>

 <if>
           <not><isset property="port_value"/></not>
                <then>
                        <property name="port_value" value="22"/>
                </then>
        </if>

        <echo message="The source file for scpfile task is : ${sourcedir}/${sourcefile} Port :${port_value}"/>
        <!--echo message="The destination directory for scpfile task is : ${scpusername}:${scppassword}@${scpmachine}:${scpdestdir}"/-->
        <echo message="The destination directory for scpfile task is : ${scpmachine}:${scpdestdir}"/>

        <available file="${rsa_keyfile}" property="fileexists"/>
        <if><isset property="fileexists"/>
          <then>
               <scp file="${sourcedir}/${sourcefile}" todir="${scpusername}@${scpmachine}:${scpdestdir}/${scpdestfile}" trust="${trustval}" port="${port_value}" keyfile="${rsa_keyfile}"/>
          </then>
         <else>
               <scp file="${sourcedir}/${sourcefile}" todir="${scpusername}:${scppassword}@${scpmachine}:${scpdestdir}/${scpdestfile}" trust="${trustval}" port="${port_value}" passphrase="${scppassword}"/>
         </else>
        </if>
        <if>
            <equals arg1="${os.name}" arg2="Mac OS X"/>
            <then>
                  <exec dir="${sourcedir}" executable="md5" outputproperty="srcmd5">
                    <arg line="${sourcefile}"/>
                  </exec>

                  <propertyregex property="srcmd5sum"
                                input="${srcmd5}"
                                regexp="(.*?)\s+=\s+(.*)"
                                select="\2"/>
                
            </then>
            <else>
                <exec dir="${sourcedir}" executable="md5sum" outputproperty="srcmd5">
                    <arg line="${sourcefile}"/>
                </exec>

                <propertyregex property="srcmd5sum"
                                input="${srcmd5}"
                                regexp="(.*?)\s+.*"
                                select="\1"/>
            </else>
         </if>

  <if><isset property="fileexists"/>
          <then>
               <sshexec host="${scpmachine}" username="${scpusername}" command="cd ${scpdestdir} ; md5sum ${scpdestfile}" outputproperty="destmd5" trust="true" port="${port_value}" keyfile="${rsa_keyfile}" />
          </then>
         <else>
               <sshexec host="${scpmachine}" username="${scpusername}" password="${scppassword}" command="cd ${scpdestdir} ; md5sum ${scpdestfile}" outputproperty="destmd5" trust="true" port="${port_value}" passphrase="${scppassword}"/>
         </else>
        </if>

        <propertyregex property="destmd5sum"
                input="${destmd5}"
                regexp="(.*?)\s+.*"
                select="\1"/>

        <echo message="The md5sum for source file is : ${srcmd5sum}"/>
        <echo message="The md5sum for destination file is : ${destmd5sum}"/>
        <if>
                <equals arg1="${srcmd5sum}" arg2="${destmd5sum}"/>
                <then>
                        <echo message="Continuing the build as md5sum is same"/>
                </then>
                <else>
                        <echo message="The md5sum for the source file and destination file differ. Hence quitting the build..."/>
                </else>
        </if>

        <record name="${basedir}/buildlogs/${scptask}_${val}_${msec}.log" action="stop"/>
        <record name="${basedir}/buildlogs/${scptask}_${val}_${msec}_err.log" action="stop"/>
</target>

<!-- ===================================================================================================
                               FOR ALL TASK
=====================================================================================================-->                                                                 
<target name="forall" depends="init">

        <property name="for" value="fortask"/>

        <record name="${basedir}/buildlogs/${for}_${val}_${msec}.log" action="start" loglevel="info"/>
        <record name="${basedir}/buildlogs/${for}_${val}_${msec}_err.log" action="start" loglevel="error"/>
        <record name="${basedir}/buildlogs/${for}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>

        <propertycopy name="forlist" from="${val}_forall_list" silent="false"/>
        <propertycopy name="fortarget" from="${val}_forall_target" silent="false"/>
        <propertycopy name="changedprops" from="${val}_forall_changedprops" silent="false"/>
        <propertycopy name="changedvals" from="${val}_forall_changedvalues" silent="false"/>
        <propertycopy name="acceptforval" from="${val}_accept_forval" silent="true"/>
        <propertycopy name="propsep" from="${val}_forall_propseparator" silent="true"/>
        <propertycopy name="valsep" from="${val}_forall_valseparator" silent="true"/>

        <property name="tmpvals" value="${changedvals}"/>
        <for list="${forlist}" param="listvalue">
                <sequential>
                        <echo message="${line.separator}"/>
                        <echo message="For listvalue : @{listvalue}"/>

  <!-- The below mentioned callback target gets the values for the first list list value and stores the remaining values in remval-->
                        <antcallback target="setregexproperty" return="ctval,remval">
                                <param name="property_group1" value="ctval"/>
                                <param name="property_group2" value="remval"/>
                                <param name="inputstring" value="${tmpvals}"/>
                                <param name="regexp" value="(.*?),(.*)"/>
                                <param name="defaultvalue" value="${tmpvals}"/>
                        </antcallback>

                        <echo message="Properties Modified for the target called in For task : ${changedprops}"/>
                        <echo message="Values for the Properties are : ${ctval}"/>

                        <var name="currentval" value="0"/>
                        <for list="${changedprops}" param="props">
                                <sequential>
                                        <math result="currentval" operand1="${currentval}" operand2="1" operation="+" datatype="int"/>
                                        <echo message="${line.separator}"/>
                                        <echo message="During iteration ${currentval}"/>
                                        <var name="tmpvalues" unset="true"/>
                                        <property name="tmpvalues" value="${ctval}"/>
                                        <echo message="VALUES ARE : ${tmpvalues}"/>
                                        <var name="within" value="0"/>
                                        <for list="${changedprops}" param="nowval">
 <sequential>
                                                        <math result="within" operand1="${within}" operand2="1" operation="+" datatype="int"/>
                                                        <antcallback target="setregexproperty" return="propval,rempropval">
                                                                <param name="property_group1" value="propval"/>
                                                                <param name="property_group2" value="rempropval"/>
                                                                <param name="inputstring" value="${tmpvalues}"/>
                                                                <param name="regexp" value="(.*?):(.*)"/>
                                                                <param name="defaultvalue" value="${tmpvalues}"/>
                                                        </antcallback>
                                                        <if><equals arg1="${currentval}" arg2="${within}"/>
                                                        <then>
                                                                <if><equals arg1="${propval}" arg2="forval"/>
                                                                <then>
                                                                        <echo message="Setting @{props} with @{listvalue} as the value specified in the properties file is forval"/>
                                                                        <var name="@{props}" value="@{listvalue}"/>
                                                                </then>
                                                                <else>
                                                                        <var name="@{props}" value="${propval}"/>
                                                                </else>
                                                                </if>
                                                                <echo message="@{props}:${@{props}}"/>
                                                        </then>
                                                        </if>
                                                        <var name="tmpvalues" unset="true"/>
                                                        <property name="tmpvalues" value="${rempropval}"/>
                                                        <var name="propval" unset="true"/>
                                                        <var name="rempropval" unset="true"/>
                                                </sequential>
                                        </for>
                                </sequential>
                        </for>
                        <!-- The target gets called here as all the properties get set-->
<foreach list="${fortarget}"
                target="calltargettask"
                inheritall="true"
                param="prop">
</foreach>



                </sequential>
        </for>
</target>





<!-- ======================================================================
                                                CALLTASK  TARGET
====================================================================== -->

<target name="calltargettask">

<propertyregex property="taskname"
               input="${prop}"
                     regexp="(.*):"
                                                         select="\1"
                                       casesensitive="false" />

<propertyregex property="paramval"
               input="${prop}"
                     regexp=":(.*)"
                                                         select="\1"
                                       casesensitive="false" />


<echo message="${prop}"/>
<echo message="task:${taskname}"/>
<echo message="param:${paramval}"/>
<echo message="os.name:          ${os.name}"          />

<!-- operation targets called here with parameter -->

<antcall target="${taskname}">
<param name="val" value="${paramval}"/>
</antcall>

</target>

<target name="setregexproperty">

<!-- This target will be called from for task. Hence any change made to this task must be checked completely as it should not affect for task-->
        <propertyregex property="${property_group1}"
                input="${inputstring}"
                regexp="${regexp}"
                select="\1"/>
        <propertyregex property="${property_group2}"
                input="${inputstring}"
                regexp="${regexp}"
                select="\2"/>

        <if><isset property="${property_group1}"/>
                <then>
                        <!-- Do nothing as the property gets set due to regular expression match"-->
                </then>
                <else>
                        <!-- Regular expression does not match . Hence set property with default value -->
                        <echo message="setting default value for property ${property_group1} as regexp does not match"/>
                        <property name="${property_group1}" value="${defaultvalue}"/>
                </else>
        </if>

        <if><isset property="${property_group2}"/>
        <then>
                <!-- Do nothing as the property gets set due to regular expression match"-->
        </then>
        <else>
                <!-- Regular expression does not match . Hence set property with default value -->
 <echo message="setting default value for property ${property_group1} as regexp does not match"/>
                        <property name="${property_group1}" value="${defaultvalue}"/>
                </else>
        </if>

        <if><isset property="${property_group2}"/>
        <then>
                <!-- Do nothing as the property gets set due to regular expression match"-->
        </then>
        <else>
                <!-- Regular expression does not match . Hence set property with default value -->
                <echo message="setting default value for property ${property_group2} as regexp does not match"/>
                <property name="${property_group2}" value="${defaultvalue}"/>
        </else>
        </if>


</target>

<!-- ==========================================================================
              SSH TARGET
============================================================================-->

<target name="sshtask" depends="init">

<property name="ssh" value="sshtask"/>

<record name="${basedir}/buildlogs/${ssh}_${val}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${ssh}_${val}_${msec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${ssh}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>

<propertycopy name="hostname" from="${val}_ssh_host" silent="false"/>
<propertycopy name="username" from="${val}_ssh_user" silent="false"/>
<propertycopy name="password" from="${val}_ssh_password" silent="false"/>
<propertycopy name="command" from="${val}_ssh_command" silent="false"/>
<propertycopy name="trustval" from="${val}_ssh_trust" silent="true"/>
<propertycopy name="outputfile" from="${val}_ssh_outputfile" silent="true"/>
<propertycopy name="port_value" from="${val}_ssh_port" silent="true"/>
<propertycopy name="failonerror" from="${val}_ssh_failonerror" silent="true"/>
<propertycopy name="status_check_needed" from="${val}_ssh_status_check_needed" silent="true"/>
<propertycopy name="timeout" from="${val}_ssh_timeout" silent="true"/>
<propertycopy name="appendhostname" from="${val}_ssh_appendhostname" silent="true"/>

<if>
   <not><isset property="port_value"/></not>
        <then>
                <property name="port_value" value="22"/>
        </then>
</if>
<if>
    <and>
             <isset property="status_check_needed"/>
             <equals arg1="${status_check_needed}" arg2="yes"/>
    </and>
        <then>
                <property name="failonerror" value="false"/>
                <property name="modified_command" value="${command};echo RETURN_STATUS=$?"/>
        </then>
    <else>
                <property name="failonerror" value="true"/>
                <property name="modified_command" value="${command}"/>
    </else>
</if>

<echo message="The host machine for ssh is ${hostname} : ${port_value}"/>
<!--echo message="The user name for ssh is ${username}"/-->
<!--echo message="The password for ssh is ${password}"/-->
<echo message="The command to be executed in ssh is ${modified_command}"/>
<echo message="failonerror value  is ${failonerror}"/>

<available file="${rsa_keyfile}" property="fileexists"/>

<if><isset property="timeout"/>
    <then>

       <echo message="Time out Variable is set  ${timeout}"/>
        <if><isset property="fileexists"/>
            <then>
                 <sshexec host="${hostname}"
                          port="${port_value}"
                          username="${username}"
                          command="${modified_command}"
                          failonerror="false"
                         timeout="${timeout}"
                          outputproperty="output_value"
                          keyfile="${rsa_keyfile}"
                          trust="${trustval}"/>
            </then>
          <else>
                 <sshexec host="${hostname}"
                          port="${port_value}"
                          username="${username}"
                          password="${password}"
                          command="${modified_command}"
                          failonerror="false"
                          timeout="${timeout}"
                          outputproperty="output_value"
                          passphrase="${password}"
                          trust="${trustval}"/>
          </else>
        </if>
    </then>
    <else>
          <if><isset property="fileexists"/>
            <then>
                 <sshexec host="${hostname}"
                          port="${port_value}"
                          username="${username}"
                          command="${modified_command}"
                          failonerror="${failonerror}"
                          outputproperty="output_value"
                          keyfile="${rsa_keyfile}"
                          trust="${trustval}"/>
            </then>
 <else>
                 <sshexec host="${hostname}"
                          port="${port_value}"
                          username="${username}"
                          password="${password}"
                          command="${modified_command}"
                          failonerror="${failonerror}"
                          outputproperty="output_value"
                          passphrase="${password}"
                          trust="${trustval}"/>
          </else>
        </if>
    </else>
  </if>
   <if><isset property="outputfile"/>
        <then>
            <!--property appendfilename used to append machine name with the file name-->
        <if>
          <isset property="appendhostname"/>
                <then>
                      <dirname property="destdir" file="${outputfile}"/>
                      <basename property="outfilename" file="${outputfile}"/>
                    <if>
                        <equals arg1="${appendhostname}" arg2="front"/>
                        <then>
                                <property name="outputfilename" value="${destdir}/${hostname}_${outfilename}"/>
                        </then>
                        <else>
                                <property name="outputfilename" value="${destdir}/${outfilename}_${hostname}"/>
                        </else>
                    </if>
                </then>
                <else>
                        <property name="outputfilename" value="${outputfile}"/>
                </else>
        </if>
                <echo message="Output File name: ${outputfilename}"/>
                <echo message="${output_value}" file="${outputfilename}" append="yes"/>
       </then>
  </if>

  <if>
       <and>
         <isset property="status_check_needed"/>
         <equals arg1="${status_check_needed}" arg2="yes"/>
       </and>
       <then>

             <for list="${output_value}" param="line" delimiter="${line.separator} ">
               <sequential>
                       <propertyregex property="status"
                                      input="@{line}"
                                      regexp="^RETURN_STATUS=(.*)"
                                      select="\1"/>
               </sequential>
             </for>
  <echo message="RETURN_STATUS=${status}"/>

             <if>
                    <not>
                          <equals arg1="${status}" arg2="0"/>
                    </not>
		    <then>
			    <echo message="SSHTask for ${val} is Failed" file="${basedir}/build_err.txt" append="true"/>
                           <fail message="SSHTask for ${val} is Failed... Hence quitting the build..."/>
                     </then>
               </if>
       </then>
   </if>

<record name="${basedir}/buildlogs/${ssh}_${val}_${msec}.log" action="stop"/>
<record name="${basedir}/buildlogs/${ssh}_${val}_${msec}_err.log" action="stop"/>

</target>
<!--  ======================================================

        FIND N RENAME TARGET

======================================================  -->
<target name="findNrename" depends="init">
                                <property name="list" value="rename_properties"/>
                                <record name="${basedir}/buildlogs/${list}_${val}_${msec}.log" action="start" loglevel="info"/>
                                <record name="${basedir}/buildlogs/${list}_${val}_${msec}_err.log" action="start" loglevel="error"/>
                                <record name="${basedir}/buildlogs/${list}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>
                                <propertycopy name="src_dir" from="${val}_srcdir" silent="false"/>
                                <propertycopy name="dest_dir" from="${val}_dest_dir" silent="false"/>
                                <propertycopy name="starts_val1" from="${val}_starts_val1" silent="true"/>
                                <propertycopy name="starts_val2" from="${val}_starts_val2" silent="true"/>

                                <echo message=" File name : ${src_dir} :: ${starts_val} "/>
                                <foreach param="file_path" target="rename" inheritall="true">
                                                                <path>
                                                                                                <fileset dir="${src_dir}" includes="${starts_val1}*.properties" excludes=""/>
                                                                </path>
                                </foreach>
                                <record name="${basedir}/buildlogs/${list}_${val}_${msec}.log" action="stop" loglevel="info"/>
                                <record name="${basedir}/buildlogs/${list}_${val}_${msec}_err.log" action="stop" loglevel="error"/>
</target>
<target name="rename" depends="init">
                                <basename property="file_name" file="${file_path}"/>
                                <property name="rename_file" value="rename_${file_name}"/>
                                <record name="${basedir}/buildlogs/${rename_file}_${val}_${msec}.log" action="start" loglevel="info"/>
                                <record name="${basedir}/buildlogs/${rename_file}_${val}_${msec}_err.log" action="start" loglevel="error"/>
                                <record name="${basedir}/buildlogs/${rename_file}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>
                                <echo message=" File path : ${file_path} "/>
                                <echo message=" File name : ${file_name} "/>
                                <propertyregex property="change_file_name"
                                                                input="${file_name}"
                                                                regexp="${starts_val1}(.*)"
                                                                select="\1"/>
                                <echo message=" Change File name : ${change_file_name} "/>
                                <if>
                                                                <not>
                                                                                                <equals arg1="${starts_val1}" arg2=""/>
                                                                </not>
                                                                <then>
                                                                                                <move file="${src_dir}/${file_name}" tofile="${dest_dir}/${change_file_name}"/>
                                                                </then>
                                                                <else>
                                                                                                <echo message=" No need to move "/>
                                                                </else>
                                </if>
                                <concat destfile="${dest_dir}/${change_file_name}" append="true">
                                                                <path>
                                                                                                <fileset dir="${src_dir}" includes="${starts_val2}${change_file_name}" />
                                                                </path>
                                                                <filterchain>
                                                                                                <headfilter lines="-1" skip="1"/>
                                                                </filterchain>
                                </concat>
  <record name="${basedir}/buildlogs/${rename_file}_${val}_${msec}.log" action="stop" loglevel="info"/>
                                <record name="${basedir}/buildlogs/${rename_file}_${val}_${msec}_err.log" action="stop" loglevel="error"/>
</target>

<!-- ==================================================================

                  I18N JS CREATION TARGET
============================================================================= -->

<target name="getKeyValue" depends="init">
	<if>
		<not>
			<isset property="combinedi18njs"/>
		</not>
		<then>
			<basename property="propfilename" file="${prop}" suffix=".properties"/>
			<if>
				<isset property="getjsname"/>
				<then>
					<for param="customjs" list="${getjsname}">
						<sequential>
							<echo message="@{customjs}"/>
							<propertyregex property="get_custom_prop" input="@{customjs}" regexp="(.*):(.*)" select="\1" casesensitive="true" override="true"/>
							<propertyregex property="get_custom_js" input="@{customjs}" regexp="(.*):(.*)" select="\2" casesensitive="true" override="true"/>
							<if>
								<equals arg1="${get_custom_prop}" arg2="${propfilename}.properties"/>
								<then>
									<property name="getjsfile" value="${get_custom_js}"/>
								</then>
							</if>
						</sequential>
					</for>
				</then>
			</if>
			<if>
				<not>
					<isset property="getjsfile"/>
				</not>
				<then>
					<propertyregex property="getjsfile" input="${propfilename}" regexp="([^_]*)_(.*)" select="\2" casesensitive="true" override="true"/>
				</then>
			</if>
			<if>
				<not>
					<isset property="getjsfile"/>
				</not>
				<then>
					<property name="getjsfile" value="resource"/>
				</then>
			</if>
		</then>
	</if>
	<copy file="${prop}" tofile="${prop}_NEW"/>
	<mkdir dir="${i18n_destdir}"/>
	<replaceregexp file="${prop}_NEW" match="'" replace="\\\\'" flags="g"/>
	<loadfile property="propcontent" srcFile="${prop}_NEW">
		<filterchain>
			<striplinecomments>
				<comment value="#"/>
			</striplinecomments>
		</filterchain>
	</loadfile>
	<if>
		<not>
			<isset property="combinedi18njs"/>
		</not>
		<then>
			<echo message="${propfile_key}={" file="${i18n_destdir}/${getjsfile}.js" append="false"/>
		</then>
	</if>
	<for param="line" list="${propcontent}" delimiter="${line.separator}">
		<sequential>
			<propertyregex property="keys" input="@{line}" regexp="([^=]*)=(.*)" select="\1" casesensitive="true" override="true" global="false"/>
			<propertyregex property="values" input="@{line}" regexp="([^=]*)=(.*)" select="\2" casesensitive="true" override="true" global="false"/>
			<propertyregex property="keyreplacestart" input="${keys}" regexp="^\s*" replace="" override="true"/>
			<propertyregex property="keyreplaceend" input="${keyreplacestart}" regexp="\s*$" replace="" override="true"/>
			<echo message="'${keyreplaceend}':'${values}'," file="${i18n_destdir}/${getjsfile}.js" append="true"/>
		</sequential>
	</for>
	<if>
		<not>
			<isset property="combinedi18njs"/>
		</not>
		<then>
			<echo message="}" file="${i18n_destdir}/${getjsfile}.js" append="true"/>
			<replaceregexp file="${i18n_destdir}/${getjsfile}.js" match=",}" replace="};"/>
		</then>
	</if>
	<delete file="${prop}_NEW"/>
</target>
<target name="createi18njs" depends="init">
	<property name="createjs" value="createi18njs"/>
	<record name="${basedir}/buildlogs/${createjs}_${val}_${msec}.log" action="start" loglevel="info"/>
	<record name="${basedir}/buildlogs/${createjs}_${val}_${msec}_err.log" action="start" loglevel="error"/>
	<record name="${basedir}/buildlogs/${createjs}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>
	<propertycopy name="i18n_destdir" from="${val}_i18n_destdir" silent="false"/>
	<propertycopy name="prop_srcdir" from="${val}_prop_srcdir" silent="false"/>
	<propertycopy name="propfile" from="${val}_propfile" silent="false"/>
	<propertycopy name="propfile_exclude" from="${val}_propfile_exclude" silent="true"/>
	<propertycopy name="propfile_key" from="${val}_propfile_key" silent="false"/>
	<propertycopy name="getjsname" from="${val}_prop_jsname" silent="true"/>
	<propertycopy name="combinedi18njs" from="${val}_combined_i18njs" silent="true"/>
	<if>
		<isset property="combinedi18njs"/>
		<then>
			<property name="getjsfile" value="${combinedi18njs}"/>
			<echo message="${propfile_key}={" file="${i18n_destdir}/${getjsfile}.js" append="false"/>
		</then>
	</if>
	<foreach param="prop" target="getKeyValue" inheritall="true">
		<path>
			<fileset dir="${prop_srcdir}" casesensitive="yes" includes="${propfile}" excludes="${propfile_exclude}"/>
		</path>
	</foreach>
	<if>
		<isset property="combinedi18njs"/>
		<then>
			<echo message="}" file="${i18n_destdir}/${getjsfile}.js" append="true"/>
			<replaceregexp file="${i18n_destdir}/${getjsfile}.js" match=",}" replace="};"/>
		</then>
	</if>
</target>

<!-- ==============================================================================
                        Create  the Build Info File
=================================================================================== -->

<target name="buildinfo" depends="init">
        <property name="binf" value="buildinfo"/>

        <tstamp>
          <format property="today" pattern="dd-MMM-yyyy"/>
          <format property="timenow" pattern="hh:mm aa"/>
        </tstamp>
        <propertycopy name="binfofile" from="${val}_binfo_file" silent="false"/>
        <propertycopy name="prodname" from="product_name" silent="false"/>
        <propertycopy name="prodver" from="product_version" silent="false"/>
        <propertycopy name="bnum" from="buildnumber" silent="false"/>
        <propertycopy name="bdate" from="today" silent="false"/>
        <propertycopy name="btime" from="timenow" silent="false"/>

        <echo file="${binfofile}" append="no">builddate=${bdate}
        buildtime=${btime}
        buildnumber=${bnum}
        buildversion=${prodver}
        productname=${prodname}
        buildtype=32bit
        </echo>


</target>

<!-- ======================================================================
                            JAVAHTASK TARGET              
====================================================================== -->

<target name="javah" depends="init">
<property name="jhtask" value="javah"/>
<record name="${basedir}/buildlogs/${jhtask}_${val}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${jhtask}_${val}_${msec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${jhtask}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>


<propertycopy name="javahclp" from="${val}_javah_classpath" silent="false"/>
<propertycopy name="javahcls" from="${val}_javah_class" silent="false"/>
<propertycopy name="outputFile" from="${val}_javah_outfile" silent="false"/>

<javah class="${javahcls}"
                outputFile="${outputFile}"
           classpath="${javahclp}"/>


<record name="${basedir}/buildlogs/${jhtask}_${val}_${msec}_err.log" action="stop"/>
<record name="${basedir}/buildlogs/${jhtask}_${val}_${msec}.log" action="stop"/>
</target>

<!-- ======================================================================
                            EXETASK TARGET               
====================================================================== -->

<target name="exetask" depends="init">
<property name="etask" value="exetask"/>
<record name="${basedir}/buildlogs/${etask}_${val}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${etask}_${val}_${msec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${etask}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>

<propertycopy name="exeargs"    from="${val}_exe_args" silent="false"/>
<propertycopy name="winhome"    from="${val}_prod_home" silent="true"/>
<propertycopy name="zipexclude"    from="${val}_zip_exclude" silent="true"/>
<propertycopy name="javaclp" from="${val}_java_classpath" silent="true"/>
<propertycopy name="javacls" from="${val}_java_class" silent="true"/>
<propertycopy name="exeunzip_include" from="${val}_unzip_include" silent="true"/>
<propertycopy name="exeunzip_exclude" from="${val}_files_exclude" silent="true"/>
<propertycopy name="exedel_exclude" from="${val}_del_exclude" silent="true"/>
<propertycopy name="commonfiles" from="${val}_commonfiles" silent="true"/>
<propertycopy name="isdir_alternative" from="${val}_isdir_name" silent="true"/>

<if>
        <not><isset property="build_id" /></not>
	<then>
		<echo message="Build id is not passed in exetask" file="${basedir}/build_err.txt" append="true"/>
                <fail message="Build id is not passed" />
        </then>
</if>

<if>
        <not><isset property="branch_name" /></not>
	<then>
		<echo message="Branch name is not passed in exetask" file="${basedir}/build_err.txt" append="true"/>
                <fail message="Branch name is not passed" />
        </then>
</if>

<condition property="isdir" value="${isdir_alternative}">
<isset property="isdir_alternative"/>
</condition>

<condition property="isdir" value="is_18">
<and>
<available file="${basedir}/is_12" type="dir"/>
<available file="${basedir}/is_16" type="dir"/>
<available file="${basedir}/is_18" type="dir"/>
</and>
</condition>

<condition property="isdir" value="is_16">
<and>
<available file="${basedir}/is_12" type="dir"/>
<available file="${basedir}/is_16" type="dir"/>
</and>
</condition>

<condition property="isdir" value="is_18">
<and>
<available file="${basedir}/is_12" type="dir"/>
<available file="${basedir}/is_18" type="dir"/>
</and>
</condition>

<condition property="isdir" value="is_18">
<and>
<available file="${basedir}/is_16" type="dir"/>
<available file="${basedir}/is_18" type="dir"/>
</and>
</condition>

<condition property="isdir" value="is_12">
<available file="${basedir}/is_12" type="dir"/>
</condition>

<condition property="isdir" value="is_16">
<available file="${basedir}/is_16" type="dir"/>
</condition>

<condition property="isdir" value="is_18">
<available file="${basedir}/is_18" type="dir"/>
</condition>

<if>
        <not><isset property="exeargs" /></not>
        <then>
                <property name="exeargs_mod" value="integ-exe2,integ-exe3"/>
        </then>
<else>
        <propertyregex property="exe_argument" input="${exeargs}" regexp="(.*)\s[0-9].*" select="\1" casesensitive="true" override="true"/>
	<if>
		<equals arg1="${exe_argument}" arg2="integ-exe4" />
		<then>
			<propertyregex property="exeargs_mod" input="${exeargs}" regexp="${exe_argument}" replace="integ-exe5" casesensitive="true"/>
		</then>
	</if>
	<if>
		<equals arg1="${exe_argument}" arg2="integ-exe5" />
		<then>
			<propertyregex property="exeargs_mod" input="${exeargs}" regexp="${exe_argument}" replace="integ-exe5" casesensitive="true"/>
		</then>
	</if>
        <if>
                <equals arg1="${exe_argument}" arg2="integ-exe6" />
                <then>
                        <propertyregex property="exeargs_mod" input="${exeargs}" regexp="${exe_argument}" replace="integ-exe6,integ-exe7,integ-exe8" casesensitive="true"/>
                </then>
        </if>
        <if>
                <equals arg1="${exe_argument}" arg2="integ-exe7" />
                <then>
                        <propertyregex property="exeargs_mod" input="${exeargs}" regexp="${exe_argument}" replace="integ-exe7,integ-exe8,integ-exe6" casesensitive="true"/>
                </then>
        </if>
        <if>
                <equals arg1="${exe_argument}" arg2="integ-exe8" />
                <then>
                        <propertyregex property="exeargs_mod" input="${exeargs}" regexp="${exe_argument}" replace="integ-exe8,integ-exe7,integ-exe6" casesensitive="true"/>
                </then>
        </if>
	<if>
                <equals arg1="${exe_argument}" arg2="integ-exe2" />
                <then>
                        <propertyregex property="exeargs_mod" input="${exeargs}" regexp="${exe_argument}" replace="integ-exe2,integ-exe3" casesensitive="true"/>
		</then>
	</if>
	<if>
		<equals arg1="${exe_argument}" arg2="integ-exe3" />
		<then>
			<propertyregex property="exeargs_mod" input="${exeargs}" regexp="${exe_argument}" replace="integ-exe3,integ-exe2" casesensitive="true"/>
		</then>
	</if>
</else>
</if>


<propertyregex property="product_zip"
input="${exeargs_mod}"
regexp="([^\s]+)([\s]+)([^\s]+)([^\s]+)([\s]+)([^\s]+)"
select="\6"
casesensitive="false" />

<propertyregex property="project_dir"
input="${exeargs_mod}"
regexp="([^\s]+)[\s]([^\s]+)[\s]([^\s]+)[\s]([^\s]+)[\s]([^\s]+)[\s]([^\s]+)"
select="\6"
casesensitive="false" />
<echo message="Projdir ${project_dir}"/>

<property name="did_dir" value="${build_dir}/dependencies/did_injection_utils"/>
<if>
        <not>
        <available file="${did_dir}" type="dir"/>
        </not>
        <then>
                <antcall target="geturl">
                        <param name="${val}_url" value="http://build/me/did_injection_utils/milestones/stable/DIDInjectionUtils.zip"/>
                        <param name="${val}_dest_zip" value="${build_dir}/zips/did_injection_utils/DIDInjectionUtils.zip"/>
                </antcall>
                <antcall target="unzip">
                        <param name="${val}_unzip_srcdir" value="${build_dir}/zips/did_injection_utils"/>
                        <param name="${val}_unzip_todir" value="${build_dir}/dependencies/did_injection_utils"/>
                        <param name="${val}_files_include" value="DIDInjectionUtils.zip"/>
                </antcall>
                <antcall target="replacefile">
                         <param name="${val}_file" value="${build_dir}/dependencies/did_injection_utils/DIDInjectionUtils/Script_Files/ReadDID.rul"/>
                         <param name="${val}_tok" value="build_id=&quot;NA&quot;"/>
                         <param name="${val}_value" value="build_id=&quot;${build_id}&quot;"/>
		 </antcall>
		 <antcall target="replacefile">
			 <param name="val" value="${val}_build_id"/>
                         <param name="${val}_build_id_file" value="${build_dir}/dependencies/did_injection_utils/DIDInjectionUtils/Script_Files/IntegUtils.rul"/>
                         <param name="${val}_build_id_tok" value="build_id=&quot;NA&quot;"/>
                         <param name="${val}_build_id_value" value="build_id=&quot;${build_id}&quot;"/>
                 </antcall>
        </then>
</if>

<antcallback target="copy">
	<param name="${val}_copy_todir" value="${basedir}/${isdir}/projects/${project_dir}"/>
	<param name="${val}_fileset_dir" value="${build_dir}/dependencies/did_injection_utils/DIDInjectionUtils"/>
	<param name="${val}_copy_includes" value="Script_Files/** Setup_Files/**"/>
	<param name="${val}_copy_excludes" value=""/>
</antcallback>

<!--antcall target="replacefile">
<param name="${val}_file" value="${basedir}/${isdir}/projects/${project_dir}/Script_Files/ReadDID.rul"/>
<param name="${val}_tok" value="build_id=&quot;NA&quot;"/>
<param name="${val}_value" value="build_id=&quot;${build_id}&quot;"/>
</antcall-->

        <if>
                <isset property="winhome"/>
                <then>
                                <antcallback target="copy">
                                <param name="${val}_copy_todir" value="${winhome}"/>
                                <param name="${val}_fileset_dir" value="${basedir}"/>
				<param name="${val}_copy_includes" value="${isdir}/**"/>
                                <param name="${val}_copy_excludes" value="${zipexclude}"/>
                                </antcallback>
                              <antcallback target="ziptask">
                                <param name="${val}_execdir" value="${winhome}"/>
                                <param name="${val}_zip_name" value="${product_zip}"/>
                                <param name="${val}_dir_tozip" value="."/>
                                <param name="${val}_zip_exclude" value="${zipexclude}"/>
                                </antcallback>

                </then>
        <elseif>
               <and>
               <isset property="commonfiles"/>
               <equals arg1="${commonfiles}" arg2="true"/>
               </and>
        <then>
                                <antcallback target="copy">
					<param name="${val}_copy_todir" value="${build_dir}/is_projects/${isdir}/projects/${project_dir}"/>
					<param name="${val}_fileset_dir" value="${basedir}/${isdir}/projects/common"/>
                                <param name="${val}_copy_includes" value="**"/>
                                <param name="${val}_copy_excludes" value="${zipexclude}"/>
                                </antcallback>
                                <antcallback target="copy">
					<param name="${val}_copy_todir" value="${build_dir}/is_projects/${isdir}/projects/${project_dir}"/>
					<param name="${val}_fileset_dir" value="${basedir}/${isdir}/projects/${project_dir}"/>
                                <param name="${val}_copy_includes" value="**"/>
                                <param name="${val}_copy_excludes" value="${zipexclude}"/>
                                </antcallback>
                                <antcallback target="ziptask">
                                <param name="${val}_execdir" value="${build_dir}/is_projects"/>
                                <param name="${val}_zip_name" value="${product_zip}"/>
				<param name="${val}_dir_tozip" value="${isdir}"/>
                                <param name="${val}_zip_exclude" value="${zipexclude}"/>
                                </antcallback>
        </then>
        </elseif>
        <else>

                                <antcallback target="ziptask">
                                <param name="${val}_execdir" value="${basedir}"/>
                                <param name="${val}_zip_name" value="${product_zip}"/>
				<param name="${val}_dir_tozip" value="${isdir}/projects/${project_dir}"/>
                                <param name="${val}_zip_exclude" value="${zipexclude}"/>
                                </antcallback>
        </else>
        </if>

        <antcallback target="javatask">
            <param name="val" value="duplicate"/>
            <param name="${val}_java_classpath" value="${build_dir}/utility_packages/exe/Regression.jar"/>
            <param name="${val}_java_class" value="com.adventnet.testtools.regression.DuplicateFileFinder"/>
            <param name="${val}_java_args" value="${product_zip}"/>
        </antcallback>

        <if>
             <not>
                   <isset property="javaclp"/>
             </not>
             <then>  

                <property name="javaclp" value="${build_dir}/utility_packages/exe/Regression.jar"/>

             </then>
       </if>

        <if>
                <not>
                        <isset property="javacls"/>
                </not>
                <then>
                <property name="javacls" value="com.adventnet.testtools.regression.ExeCreationClient"/>
                </then>
       </if>

<propertyregex property="output_zip"
               input="${exeargs_mod}"
                     regexp="([^\s]+)([\s]+)([^\s]+)([^\s]+)([\s]+)([^\s]+)([\s]+)([^\s]+)"
                                                         select="\8"
                                       casesensitive="false" />

<dirname property="unzip_todir" file="${output_zip}"/>
<basename property="unzip_include" file="${output_zip}"/>
<property name="unzip_srcdir" value="${basedir}/localworkdir"/>
<basename property="unzip_exclude" file="${exeunzip_exclude}"/>

<propertyregex property="arguments"
               input="${exeargs_mod}"
               regexp="${output_zip}"
               replace="${unzip_include}"
               global="true" />

<propertyregex property="exe_file"
           input="${unzip_include}"
           regexp="(.*)\.(.*)"
           select="\1"/>

        <antcallback target="javatask">
                                <param name="${val}_java_classpath" value="${javaclp}"/>
                                <param name="${val}_java_class" value="${javacls}"/>
                              	<param name="${val}_java_args" value="${arguments} exetask ${product_id} ${product_name} ${branch_name} ${build_id} cm-notify@zohocorp.com 20 10500,10600,10700"/>
        </antcallback>



<echo message="${output_dir}"/>
<echo message="${output_zip}"/>
<echo message="${unzip_todir}"/>
<echo message="${unzip_include}"/>

<property name="output_exe" value="${unzip_todir}/${exe_file}.exe"/>

<!-- outputzip available check started-->
<condition property="fileIsEmpty">
      <length file="${unzip_srcdir}/${unzip_include}" when="equal" length="0" />
</condition>
<property name="exe_outputzip" value="${unzip_srcdir}/${unzip_include}"/>
<condition property="outputzip_na"><not>
        <available file="${exe_outputzip}" type="file"/>
</not></condition>
<!-- outputzip available check ended-->

<if>
    <not>
    <or>
    <isset property="outputzip_na"/>
    <isset property="fileIsEmpty"/>
    </or>
    </not>
    <then> 
    <antcallback target="unzip">
	<param name="${val}_unzip_srcdir" value="${unzip_srcdir}"/>
        <param name="${val}_unzip_todir" value="${unzip_todir}"/>
        <param name="${val}_files_include" value="${unzip_include}"/>
        <param name="${val}_files_exclude" value="${unzip_exclude}"/>
    </antcallback>
    </then>
<else>
	<echo message="Output zip not transfered from exe machine so retrying the ${exe_file}.exe creation." />
	<antcallback target="javatask">
		<param name="${val}_java_classpath" value="${javaclp}"/>
		<param name="${val}_java_class" value="${javacls}"/>
		<param name="${val}_java_args" value="${arguments} exetask ${product_id} ${product_name} ${branch_name} ${build_id} cm-notify@zohocorp.com 20 10500,10600,10700"/>
	</antcallback>

	<echo message="${output_dir}"/>
	<echo message="${output_zip}"/>
	<echo message="${unzip_todir}"/>
	<echo message="${unzip_include}"/>
	<antcallback target="unzip">
		<param name="${val}_unzip_srcdir" value="${unzip_srcdir}"/>
		<param name="${val}_unzip_todir" value="${unzip_todir}"/>
		<param name="${val}_files_include" value="${unzip_include}"/>
		<param name="${val}_files_exclude" value="${unzip_exclude}"/>
	</antcallback>
</else>
</if>

<!-- buildout.txt file available check started-->
<property name="exe_log" value="${unzip_todir}/exe_logs/${exe_file}/buildout.txt"/>
<condition property="exe_buildout_txt_na"><not>
	<available file="${exe_log}" type="file"/>
</not></condition>
<!-- buildout.txt file available check ended-->

<!-- System Error process string check started-->
<loadfile property="log_check" srcFile="${exe_log}"/>
<propertyregex property="grep_output_txt" input="${log_check}" regexp="(The process cannot access the file because it is being used by another process*)(.*)" select="\1" casesensitive="true" override="true"/>
<propertyregex property="setup_exe_na" input="${log_check}" regexp="(error 136: Could not copy file 'C\:\\Users\\integ\\AppData\\Local\\Temp\\2\\setup.exe'*)(.*)" select="\1" casesensitive="true" override="true"/>
<!-- System Error process string check started-->

<if>
	<or>
	<isset property="exe_buildout_txt_na"/>
	<isset property="grep_output_txt"/>
        <isset property="setup_exe_na"/>
	</or>
	<then>
	<echo message="Either buildout.txt file not available or any windows process locked the exe creation task. So retrying the ${exe_file}.exe creation." />
	<antcallback target="javatask">
		<param name="${val}_java_classpath" value="${javaclp}"/>
		<param name="${val}_java_class" value="${javacls}"/>
		<param name="${val}_java_args" value="${arguments} exetask ${product_id} ${product_name} ${branch_name} ${build_id} cm-notify@zohocorp.com 20 10500,10600,10700"/>
	</antcallback>

	<echo message="${output_dir}"/>
	<echo message="${output_zip}"/>
	<echo message="${unzip_todir}"/>
	<echo message="${unzip_include}"/>
	<antcallback target="unzip">
		<param name="${val}_unzip_srcdir" value="${unzip_srcdir}"/>
		<param name="${val}_unzip_todir" value="${unzip_todir}"/>
		<param name="${val}_files_include" value="${unzip_include}"/>
		<param name="${val}_files_exclude" value="${unzip_exclude}"/>
	</antcallback>
	</then>
</if>

        <exec dir="${basedir}" executable="md5sum" failonerror="true" append="true" output="${unzip_todir}/exe_logs/${exe_file}/mdsum_inputzip.txt">
                <arg line="${product_zip}"/>
        </exec>

	    <echo message="MD5SUM check started..."/>
        	<antcall target="md5sum">
                	<param name="${val}_md5sum_windowsfile" value="${unzip_todir}/exe_logs/${exe_file}/md5sumcheck.txt"/>
                	<param name="${val}_md5sum_linuxfile" value="${unzip_todir}/${exe_file}.exe"/>
        	</antcall>
        <echo message= "MD5SUM check completed..."/>

        <echo message="Signing check started.."/>
        	<loadfile property="signing_file" srcFile="${unzip_todir}/exe_logs/${exe_file}/signing_out.txt">
        	</loadfile>
        	<!--propertyregex property="signing_status" input="${signing_file}" regexp="(Successfully signed and timestamped:*)(.*)" select="\1" casesensitive="true" override="true"/-->
        	<propertyregex property="signing_status" input="${signing_file}" regexp="(Successfully signed:*)(.*)" select="\1" casesensitive="true" override="true"/>
		<propertyregex property="signing_not_required" input="${signing_file}" regexp="(Signing is not required)(.*)" select="\1" casesensitive="true" override="true"/>
                	<if>
                		<isset property="signing_status"/>
                		<then>
                                	<echo message="Exe successfully signed and Not timestamped."/>
                		</then>
                        <elseif>
				<isset property="signing_not_required"/>
                                <then>
					<echo message="Signing is not required in exetask."/>
				</then>
			</elseif>
			<else>
                                <!--antcall target="exec">
                                <param name="${val}_exec_dir" value="${unzip_todir}/exe_logs/${exe_file}"/>
                                <param name="${val}_exec_command" value="cat"/>
                                <param name="${val}_exec_args" value="signing_out.txt"/>
                                </antcall>
                                <fail message="Problem in signing exe ${unzip_todir}/${exe_file}.exe. Please check the error logs in : ${unzip_todir}/exe_logs/${exe_file}/signing_out.txt or ${unzip_todir}/exe_logs/${exe_file}/pkg_sign.out" /-->
				<fail message="${signing_file}"/>
        		</else>
        		</if>
        <echo message="Signing check completed..."/>
	
	<fail message="Error occurred in ${exe_file}.exe creation. Please check the logs : exe_logs/${exe_file}/">
    		<condition>
			<not>
        			<available file="${output_exe}" />
	    		</not>
		</condition>
	</fail>

        <antcallback target="del">
                                <param name="${val}_del_fileset_dir" value="${unzip_srcdir}"/>
                                <param name="${val}_delete_includes" value="${unzip_include}"/>
                                <param name="${val}_delete_excludes" value="${exedel_exclude}"/>
       </antcallback>

	<antcall target="eco">
        	<param name="val" value="${val}_exemachinename"/>
	        <param name="${val}_exemachinename_eco_msg" value="${exe_argument}"/>
        	<param name="${val}_exemachinename_eco_file" value="${basedir}/dependency_server_name.txt"/>
	        <param name="${val}_exemachinename_eco_opt" value="true"/>
	</antcall>


</target>

<!-- ===================================================================================================
                               FORTASK 
(forall task has some issue.)
=====================================================================================================-->														

<target name="fortask" depends="init">
	
	<property name="for" value="fortask"/>

	<record name="${basedir}/buildlogs/${for}_${val}_${msec}.log" action="start" loglevel="info"/>
	<record name="${basedir}/buildlogs/${for}_${val}_${msec}_err.log" action="start" loglevel="error"/>
	<record name="${basedir}/buildlogs/${for}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>

	<propertycopy name="forlist" from="${val}_fortask_list" silent="false"/>
	<propertycopy name="fortarget" from="${val}_fortask_target" silent="false"/>
	<propertycopy name="changedprops" from="${val}_fortask_changedprops" silent="false"/>
	<propertycopy name="changedvals" from="${val}_fortask_changedvalues" silent="false"/>
	<propertycopy name="acceptforval" from="${val}_accept_forval" silent="true"/>
	<propertycopy name="propsep" from="${val}_fortask_propseparator" silent="true"/>
	<propertycopy name="valsep" from="${val}_fortask_valseparator" silent="true"/>

	<property name="tmpvals" value="${changedvals}"/>
	<for list="${forlist}" param="listvalue">
		<sequential>
			<echo message="${line.separator}"/>
			<echo message="For listvalue : @{listvalue}"/>

	<!-- The below mentioned callback target gets the values for the first list list value and stores the remaining values in remval-->
			<antcallback target="setregexproperty" return="ctval,remval">
				<param name="property_group1" value="ctval"/>
				<param name="property_group2" value="remval"/>
				<param name="inputstring" value="${tmpvals}"/>
				<param name="regexp" value="(.*?),(.*)"/>
				<param name="defaultvalue" value="${tmpvals}"/>
			</antcallback>

			<echo message="Properties Modified for the target called in For task : ${changedprops}"/>
			<echo message="Values for the Properties are : ${ctval}"/>

			<var name="currentval" value="0"/>
			<for list="${changedprops}" param="props">
				<sequential>
					<math result="currentval" operand1="${currentval}" operand2="1" operation="+" datatype="int"/>
					<echo message="${line.separator}"/>
					<echo message="During iteration ${currentval}"/>
					<var name="tmpvalues" unset="true"/>
					<property name="tmpvalues" value="${ctval}"/>
					<echo message="VALUES ARE : ${tmpvalues}"/>
					<var name="within" value="0"/>
					<for list="${changedprops}" param="nowval">
						<sequential>
							<math result="within" operand1="${within}" operand2="1" operation="+" datatype="int"/>
							<antcallback target="setregexproperty" return="propval,rempropval">
								<param name="property_group1" value="propval"/>
								<param name="property_group2" value="rempropval"/>
								<param name="inputstring" value="${tmpvalues}"/>
								<param name="regexp" value="(.*?):(.*)"/>
								<param name="defaultvalue" value="${tmpvalues}"/>
							</antcallback>
							<if><equals arg1="${currentval}" arg2="${within}"/>
							<then>								
								<if><equals arg1="${propval}" arg2="forval"/>
								<then>
									<echo message="Setting @{props} with @{listvalue} as the value specified in the properties file is forval"/>				
									<var name="@{props}" value="@{listvalue}"/>	
								</then>
								<else>
									<var name="@{props}" value="${propval}"/>
								</else>
								</if>
								<echo message="@{props}:${@{props}}"/>
							</then>
							</if>
							<var name="tmpvalues" unset="true"/>
							<property name="tmpvalues" value="${rempropval}"/>
							<var name="propval" unset="true"/>
							<var name="rempropval" unset="true"/>
						</sequential>
					</for>
				</sequential>
			</for>

			<!-- The target gets called here as all the properties get set-->
			<antcall target="${fortarget}"/>

			<var name="tmpvals" unset="true"/>
			<property name="tmpvals" value="${remval}"/>
			<var name="ctval" unset="true"/>
			<var name="remval" unset="true"/>

		</sequential>
	</for>
</target>

<!-- ======================================================================
                                PARALLEL ORDERS TARGET              
    ====================================================================== -->
    <target name="concurrentorders" depends="init">
    <property name="concurrentorders" value="concurrentorders" />
    <record name="${basedir}/buildlogs/${concurrentorders}_${val}_${msec}.log" action="start" loglevel="info"/>
    <record name="${basedir}/buildlogs/${concurrentorders}_${val}_${msec}_err.log" action="start" loglevel="error"/>
    <record name="${basedir}/buildlogs/${concurrentorders}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>
    <propertycopy name="callorders" from="${val}_concurrentorders" silent="false"/>

        <parallel failonany="true">
            <for list="${callorders}" parallel="true" param="ordername">
                <sequential>
                    <antcall target="parallelexecution" inheritall="true">
                        <param name="ordername" value="@{ordername}"/>
                    </antcall>
                </sequential>
            </for>
        </parallel>
    </target>

    <target name="parallelexecution" depends="init">
    <propertycopy name="callorder" from="${ordername}_order" />
    <propertycopy name="order_ondemand" from="${ordername}_needed" silent="true"/>
    <!-- <echo message="TEST" file="${basedir}/buildlogs/buildtime.html" append="yes"/> -->
    <if>
	<equals arg1="${order_ondemand}" arg2="no"/>
	<then>
		<echo message="Quitting ${ordername}_order as it is not needed"/>
	</then>
	<else>
    <foreach list="${callorder}"
                   target="calltask"
                   inheritall="false"
                   param="prop">
    </foreach>
    </else>
    </if>
    </target>
<!--=============================================================================
		       PYTHON COMPILATION...	
==============================================================================-->
<target name="py-compile">
	<property environment="env" />
	<propertycopy name="executable_command" from ="${val}_exec_command" silent="false" />
	<propertycopy name="arguments" from="${val}_args" silent="false" />
	<propertycopy name="compilation_directory" from="${val}_compiled_directory" silent="false" />

	<exec executable="${executable_command}" failonerror="true">
		<arg line="${arguments}" />
		<arg line="-d ${compilation_directory}" />
	</exec>
</target>
<!--==========================================================================>
                       ZIP REMOVAL PROCESS    
==============================================================================-->

  <target name="copy_tppackages">
  
	<propertycopy name="codir" from="co_dir" silent="true"/>
 
 	<if>
		<isset property="codir"/>
		<then>
				<echo message="codir is set. codir value is taken."/>
				<property name="tp_co_dir" value="${codir}"/>
		</then>
		<else>
               <echo message="co_dir is not set. build_dir value is taken."/>
               <property name="tp_co_dir" value="${build_dir}"/>
        </else>
	</if>

	<if>
		<not>
	     	<available file="${tp_co_dir}/utility_packages" type="dir"/>
	     </not>
	     <then>

    	<copy todir="${tp_co_dir}" overwrite="true" includeEmptyDirs="false">
       		<fileset dir="${basedir}/hg_utils" includes="utility_packages/**" excludes=""/>
    	</copy>

    	<copy todir="${basedir}" overwrite="true" includeEmptyDirs="false">
       		<fileset dir="${basedir}/hg_utils/build_files" includes="**" excludes="copy_tppackges.properties"/>
    	</copy>

		<if>
     		<available property="avail" file="${basedir}/hg_utils/build_files/copy_tppackges.properties" type="file"/>
     		<then>
     			<property file="${basedir}/hg_utils/build_files/copy_tppackges.properties"/>

     			<if>
					<isset property="${pdt_name}"/>
					<then>
						<propertycopy name="packages" from="${pdt_name}" silent="false"/>

						<echo message="pack.name : ${pdt_name} ${packages}"/>

     					<for list="${packages}" param="file">
        				<sequential>
                			<echo message="File : @{file}"/>

	        				<antcallback target="geturl">

							<param name="${val}_url" value="http://cm-rep/thirdparty_backup/@{file}"/>
							<param name="${val}_dest_zip" value="${tp_co_dir}/@{file}"/>

       						</antcallback>

       					</sequential>
     					</for>
					</then>
					<else>
							<echo message="No need to copy any Zip or Tar for this ${pdt_name}"/>
					</else>
				</if>
     		</then>
	 		<else>
					<echo message="Property file is not available for copying thirdparty zips"/>
	 		</else>
    	</if>
   </then>
   </if>
  </target>

<!-- ==================================================================

SECURITY VALIDATIONS TARGET

============================================================================= -->

<target name="sec_validations" depends="init">
	<property name="sec_val" value="sec_validations"/>
	<record name="${basedir}/buildlogs/${sec_val}_${val}_${msec}.log" action="start" loglevel="info"/>
	<propertycopy name="filelist" from="${val}_secval_dir" silent="false"/>
	<propertycopy name="exclude_val" from="${val}_secval_exclude" silent="true"/>
	<antcall target="securityschemavalidation">
		<param name="${val}_fileset_dir" value="${filelist}"/>
		<param name="${val}_exclude_dir" value="${exclude_val}"/>
	</antcall>
	<antcall target="security_check"/>
</target>
<target name="security_check" depends="init">
	<antcall target="exec">
		<param name="${val}_exec_dir" value="${basedir}"/>
		<param name="${val}_exec_command" value="bash"/>
		<param name="${val}_exec_args" value="-x ${basedir}/security_build_check.sh 2 ${basedir}/XMLReader.jar ${filelist}"/>
	</antcall>
	<record name="${basedir}/buildlogs/${sec_val}_${val}_${msec}.log" action="stop"/>
</target>

<!-- ======================================================================

DOWNLOAD DEPENDENCY BUILDS TARGET

====================================================================== -->

<target name="getdep" depends="init">
	<property name="gdep" value="getdep"/>
	<record name="${basedir}/buildlogs/${gdep}_${val}_${msec}.log" action="start" loglevel="info"/>
	<record name="${basedir}/buildlogs/${gdep}_${val}_${msec}_err.log" action="start" loglevel="error"/>
	<record name="${basedir}/buildlogs/${gdep}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>
	<propertycopy name="dep_src"  from="${val}_urls" silent="false"/>
	<propertycopy name="appserver_container"  from="appserver_container" silent="true"/>
	<property name="prop_zip_destdir" value="${build_dir}/zips"/>
	<property name="prop_dep_destdir" value="${build_dir}/dependencies"/>
	<foreach param="dep_param" target="extract_depfiles" inheritall="true" list="${dep_src}"></foreach>
	<!--if>
		<isset property="appserver_container"/>
		<then>
			<antcall target="geturl">
				<param name="${val}_url" value="${appserver_container}"/>
				<param name="${val}_dest_zip" value="${prop_zip_destdir}/appserver_container/appserver_container.zip"/>
			</antcall>
			<antcall target="unzip">
				<param name="${val}_unzip_srcdir" value="${prop_zip_destdir}/appserver_container"/>
				<param name="${val}_unzip_todir" value="${prop_dep_destdir}/appserver_container"/>
				<param name="${val}_files_include" value="appserver_container.zip"/>
			</antcall>
		</then>
	</if-->
	<record name="${basedir}/buildlogs/${gdep}_${val}_${msec}_err.log" action="stop"/>
	<record name="${basedir}/buildlogs/${gdep}_${val}_${msec}.log" action="stop"/>
</target>
<target name="extract_depfiles" depends="init">
	<propertycopy name="dep_zip" from="${dep_param}" silent="false"/>
	<propertyregex property="sas_match" input="${dep_zip}" regexp="(.*)/(.*sas.zip.*)" select="\2" casesensitive="true" override="true"/>
	<propertyregex property="zipnames" input="${dep_zip}" regexp="(.*)/(.*)" select="\2" casesensitive="true" override="true"/>
        <if>
            <and>
                    <isset property="${dep_param}_username"/>
                    <isset property="${dep_param}_password"/>
            </and>
            <then>
                    <propertycopy name="url_username" from="${dep_param}_username" silent="true"/>
                    <propertycopy name="url_password" from="${dep_param}_password" silent="true"/>
            </then>
            <else>
                    <property name="url_username" value="test" />
                    <property name="url_password" value="test" />
            </else>
        </if>

	<if>
		<isset property="sas_match"/>
		<then>
			<propertyregex property="s_url" input="${dep_zip}" regexp="(.*)/(.*)" select="\1" casesensitive="true" override="true"/>
                        <propertyregex property="sas_dependency_dir" input="${s_url}" regexp="http://build/" replace="" casesensitive="true"/>
                        <property name="sas_dependency_path" value="/zoho/build/downloads/dload/${sas_dependency_dir}/grid/grid_server.zip"/>
                        <if>
                            <available file="${sas_dependency_path}" type="file"/>
                        <then>
			    <antcall target="geturl">
				<param name="${val}_url" value="${s_url}/grid/grid_server.zip"/>
				<param name="${val}_dest_zip" value="${prop_zip_destdir}/grid_server/grid_server.zip"/>
				<param name="${val}_url_username" value="${url_username}" />
                                <param name="${val}_url_password" value="${url_password}" />
			    </antcall>
			    <antcall target="unzip">
				<param name="${val}_unzip_srcdir" value="${prop_zip_destdir}/grid_server"/>
				<param name="${val}_unzip_todir" value="${prop_dep_destdir}/grid_server"/>
				<param name="${val}_files_include" value="grid_server.zip"/>
			    </antcall>
                            <if>
                                <isset property="appserver_container"/>
                            <then>
                                <antcall target="geturl">
                                   <param name="${val}_url" value="${appserver_container}"/>
                                   <param name="${val}_dest_zip" value="${prop_zip_destdir}/appserver_container/appserver_container.zip"/>
                                </antcall>
                                <antcall target="unzip">
                                   <param name="${val}_unzip_srcdir" value="${prop_zip_destdir}/appserver_container"/>
                                   <param name="${val}_unzip_todir" value="${prop_dep_destdir}/appserver_container"/>
                                   <param name="${val}_files_include" value="appserver_container.zip"/>
                                </antcall>
                            </then>
                            </if>
                        </then>
                        <else>
			<if>
				<and>
                                <isset property="appserver_container"/>
                                <available file="/zoho/build/downloads/dload/${sas_dependency_dir}/production" type="dir"/>
                                </and>
                                
                            <then>
                                <antcall target="geturl">
                                    <param name="${val}_url" value="${s_url}/production/${appserver_container}/appserver_container.zip"/>
                                    <param name="${val}_dest_zip" value="${prop_zip_destdir}/appserver_container/appserver_container.zip"/>
                                </antcall>
                                <antcall target="unzip">
                                    <param name="${val}_unzip_srcdir" value="${prop_zip_destdir}/appserver_container"/>
                                    <param name="${val}_unzip_todir" value="${prop_dep_destdir}/appserver_container"/>
                                    <param name="${val}_files_include" value="appserver_container.zip"/>
			    </antcall>
			    <if>
		             <available file="${prop_dep_destdir}/appserver_container/AdventNet/Sas/tomcat/webapps/app" type="dir"/>
             			<then>
                                <antcall target="del">
                                    <param name="${val}_del_fileset_dir" value="${prop_dep_destdir}/appserver_container/AdventNet/Sas/tomcat/webapps/"/>
                                    <param name="${val}_delete_includes" value="app/**"/>
                                    <param name="${val}_delete_excludes" value=""/>
			    </antcall>
			    	</then>
				</if>
                                <antcallback target="copy">
                                    <param name="${val}_copy_todir" value="${prop_dep_destdir}/grid_server/"/>
                                    <param name="${val}_fileset_dir" value="${prop_dep_destdir}/appserver_container"/>
                                    <param name="${val}_copy_includes" value="AdventNet/**"/>
                                    <param name="${val}_copy_excludes" value=""/>
                                </antcallback>
                                <antcall target="geturl">
                                    <param name="${val}_url" value="${s_url}/grid/grid.war"/>
                                    <param name="${val}_dest_zip" value="${prop_dep_destdir}/grid_server/AdventNet/Sas/tomcat/webapps/grid.war"/>
                                    <param name="${val}_url_username" value="${url_username}" />
                                    <param name="${val}_url_password" value="${url_password}" />
                                </antcall>
                            </then>
		    	

			    <else>
				    <if>
	                                <available file="/zoho/build/downloads/dload/${sas_dependency_dir}/appserver_container.zip" type="file"/>

                            	<then>
				<antcall target="geturl">
                                        <param name="${val}_url" value="${s_url}/appserver_container.zip"/>
                                             <param name="${val}_dest_zip" value="${prop_zip_destdir}/appserver_container/appserver_container.zip"/>
				</antcall>

                                 <antcall target="unzip">
                                       <param name="${val}_unzip_srcdir" value="${prop_zip_destdir}/appserver_container"/>
                                       <param name="${val}_unzip_todir" value="${prop_dep_destdir}/appserver_container"/>
                                       <param name="${val}_files_include" value="appserver_container.zip"/>
			       </antcall>

                                <antcallback target="copy">
                                    <param name="${val}_copy_todir" value="${prop_dep_destdir}/grid_server/"/>
                                    <param name="${val}_fileset_dir" value="${prop_dep_destdir}/appserver_container"/>
                                    <param name="${val}_copy_includes" value="AdventNet/**"/>
                                    <param name="${val}_copy_excludes" value=""/>
			    </antcallback>

                                <antcall target="geturl">
                                    <param name="${val}_url" value="${s_url}/grid/grid.war"/>
                                    <param name="${val}_dest_zip" value="${prop_dep_destdir}/grid_server/AdventNet/Sas/tomcat/webapps/grid.war"/>
                                    <param name="${val}_url_username" value="${url_username}" />
                                    <param name="${val}_url_password" value="${url_password}" />
			    </antcall>

			    </then>
			    </if>
	
			</else>	
			</if>
                        </else>
                        </if>
		</then>
	</if>
	<antcall target="geturl">
		<param name="${val}_url" value="${dep_zip}"/>
		<param name="${val}_dest_zip" value="${prop_zip_destdir}/${dep_param}/${zipnames}"/>
		<param name="${val}_url_username" value="${url_username}" />
		<param name="${val}_url_password" value="${url_password}" />
	</antcall>
	<antcall target="unzip">
		<param name="${val}_unzip_srcdir" value="${prop_zip_destdir}/${dep_param}"/>
		<param name="${val}_unzip_todir" value="${prop_dep_destdir}/${dep_param}"/>
		<param name="${val}_files_include" value="${zipnames}"/>
	</antcall>
</target>

<!-- ======================================================================

GRID.WAR UPDATION

====================================================================== -->

<target name="gridwarupd" depends="init">
	<property name="gridupd" value="gridwarupd"/>
	<record name="${basedir}/buildlogs/${gridupd}_${val}_${msec}.log" action="start" loglevel="info"/>
	<record name="${basedir}/buildlogs/${gridupd}_${val}_${msec}_err.log" action="start" loglevel="error"/>
	<record name="${basedir}/buildlogs/${gridupd}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>
	<propertycopy name="gridwar_srcdir"  from="${val}_gridwar_srcdir" silent="false"/>
	<propertycopy name="gridwar_prdsrcdir"  from="${val}_gridwar_prdsrcdir" silent="false"/>
	<propertycopy name="gridwar_sqlcreation_needed"  from="${val}_gridwar_sqlcreation_needed" silent="true"/>
	<property name="default_files" value="WEB-INF/security-properties.xml WEB-INF/conf/security-privatekey.xml"/>
	<antcall target="unzip">
		<param name="${val}_unzip_srcdir" value="${gridwar_srcdir}"/>
		<param name="${val}_unzip_todir" value="${build_dir}/GRID_WAR"/>
		<param name="${val}_files_include" value="grid.war"/>
	</antcall>
	<antcall target="copy">
		<param name="${val}_copy_todir" value="${build_dir}/GRID_WAR"/>
		<param name="${val}_fileset_dir" value="${gridwar_prdsrcdir}"/>
		<param name="${val}_copy_includes" value="${default_files}"/>
	</antcall>
	<if>
		<equals arg1="${gridwar_copy_ear_jar_files}" arg2="yes"/>

		<then>
		    <antcall target="copy">
			<param name="${val}_copy_todir" value="${build_dir}/GRID_WAR/WEB-INF/"/>
			<param name="${val}_fileset_dir" value="${gridwar_prdsrcdir}/WEB-INF/"/>
			<param name="${val}_copy_includes" value="lib/EncryptUtil.jar lib/DBEncryptAgent.jar conf/udt/ciphertext.dt"/>
		    </antcall>

		</then>
	</if>
	<antcall target="replacefile">
		<param name="${val}_file" value="${build_dir}/GRID_WAR/WEB-INF/web.xml"/>
		<param name="${val}_tok" value="&lt;!-- WILL BE UNCOMMENTED BY BUILD SCRIPT"/>
		<param name="${val}_value" value=""/>
	</antcall>
	<antcall target="replacefile">
		<param name="${val}_file" value="${build_dir}/GRID_WAR/WEB-INF/web.xml"/>
		<param name="${val}_tok" value="WILL BE UNCOMMENTED BY BUILD SCRIPT --&gt;"/>
		<param name="${val}_value" value=""/>
	</antcall>
	<antcall target="genjar">
		<param name="${val}_jar_file" value="${gridwar_srcdir}/grid.war"/>
		<param name="${val}_jar_srcdir" value="${build_dir}/GRID_WAR"/>
		<param name="${val}_jar_includes" value="**"/>
		<param name="${val}_jar_update" value="true"/>
	</antcall>
        <if>
        <or>
               <not><isset property="gridwar_sqlcreation_needed"/></not>
               <equals arg1="${gridwar_sqlcreation_needed}" arg2="yes"/>
         </or>
        <then>
	<antcall target="getaccountcreationdep"/>
	<var name="appstr" value=" "/>
        <for param="file">
        <path>
                <fileset dir="${gridwar_prdsrcdir}/WEB-INF/lib" includes="*.jar"/>
        </path>
        <sequential>
                <var name="appstr" value="${appstr}:@{file}"/>
        </sequential>
        </for>

	<antcall target="javatask">
		<param name="${val}_java_classpath" value="${build_dir}/dependencies/accountcreation/Zoho/AccountCreation/lib/accountcreation.jar:${build_dir}/dependencies/accountcreation/Zoho/AccountCreation/lib/json.jar:${build_dir}/dependencies/accountcreation/Zoho/AccountCreation/lib/SwisSQLAPI.jar:${build_dir}/dependencies/accountcreation/Zoho/AccountCreation/lib/Mail.jar:${appstr}"/>
		<param name="${val}_java_class" value="com.zoho.accounts.DataPopulator"/>
		<param name="${val}_java_args" value="${gridwar_prdsrcdir}/WEB-INF/conf ${gridwar_prdsrcdir}/WEB-INF/conf/SAS ${product_name}"/>
	</antcall>
        </then>
        </if>
</target>

<!-- ======================================================================

SOURCEJAR  TARGET

====================================================================== -->

<target name="srccompile" depends="init">
	<property name="cjar" value="srccompile"/>

	<record name="${basedir}/buildlogs/${cjar}_${val}_${msec}.log" action="start" loglevel="info"/>
	<record name="${basedir}/buildlogs/${cjar}_${val}_${msec}_err.log" action="start" loglevel="error"/>
	<record name="${basedir}/buildlogs/${cjar}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>

	<propertycopy name="compileclp" from="${val}_srccompile_classpath" silent="false"/>
	<propertycopy name="src_classesdir" from="${val}_srccompile_classes" silent="false"/>
	<propertycopy name="compilejar" from="${val}_srccompile_jar" silent="false"/>
	<propertycopy name="compilesrcdir" from="${val}_srccompile_srcdir" silent="true"/>
	<propertycopy name="compileinclude" from="${val}_srccompile_includes" silent="true"/>
	<propertycopy name="srccompile_source" from="${val}_srccompile_javac_sourcever" silent="true"/>
        <propertycopy name="srccompile_target" from="${val}_srccompile_javac_targetver" silent="true"/>
	<propertycopy name="compileexclude" from="${val}_srccompile_excludes" silent="true"/>
	<propertycopy name="jarincludes" from="${val}_srccompile_jar_includes" silent="true"/>
	<propertycopy name="jarexcludes" from="${val}_srccompile_jar_excludes" silent="true"/>
	<propertycopy name="src_compilerarg" from="${val}_srccompile_compilerarg" silent="true"/>
	<if>
		<isset property="compilesrcdir"/>
		<then>
			<property name="compile_srcdir" value="${compilesrcdir}"/>
		</then>
		<else>
			<property name="compile_srcdir" value="${source_basedir}"/>
		</else>
	</if>
	<if>
		<isset property="compileinclude"/>
		<then>
			<property name="compile_include" value="${compileinclude}"/>
		</then>
		<else>
			<property name="compile_include" value="**"/>
		</else>
	</if>
	<if>
		<isset property="jarincludes"/>
		<then>
			<property name="jar_include" value="${jarincludes}"/>
		</then>
		<else>
			<property name="jar_include" value="**"/>
		</else>
	</if>
	<if>
		<isset property="jarexcludes"/>
		<then>
			<property name="jar_exclude" value="${jarexcludes}"/>
		</then>
		<else>
			<property name="jar_exclude" value=""/>
		</else>
	</if>
	<if>
                <and>
                        <isset property="srccompile_source"/>
                        <isset property="srccompile_target"/>
                </and>
                <then>
			<if>
				<isset property="src_compilerarg" />
				<then>
					<antcall target="compilesrc">
						<param name="val" value="${val}"/>
						<param name="${val}_classpath" value="${compileclp}"/>
						<param name="${val}_classes_dir" value="${src_classesdir}"/>
						<param name="${val}_compile_srcdir" value="${compile_srcdir}"/>
						<param name="${val}_compile_includes" value="${compileinclude}"/>
						<param name="${val}_compile_excludes" value="${compileexclude}"/>
						<param name="${val}_javac_sourceversion" value="${srccompile_source}"/>
						<param name="${val}_javac_targetversion" value="${srccompile_target}"/>
						<param name="${val}_javac_compilerarg" value="${src_compilerarg}"/>
					</antcall>
					<echo message="converting ${cjar} to javac source and target compilation is finished"/>
				</then>
				<else>
					<antcall target="compilesrc">
						<param name="val" value="${val}"/>
						<param name="${val}_classpath" value="${compileclp}"/>
						<param name="${val}_classes_dir" value="${src_classesdir}"/>
						<param name="${val}_compile_srcdir" value="${compile_srcdir}"/>
						<param name="${val}_compile_includes" value="${compileinclude}"/>
						<param name="${val}_compile_excludes" value="${compileexclude}"/>
						<param name="${val}_javac_sourceversion" value="${srccompile_source}"/>
						<param name="${val}_javac_targetversion" value="${srccompile_target}"/>
					</antcall>
					<echo message="converting ${cjar} to javac source and target compilation is finished"/>
				</else>
			</if>
                </then>
                <else>
                        <antcall target="compilesrc">
                                <param name="val" value="${val}"/>
                                <param name="${val}_classpath" value="${compileclp}"/>
                                <param name="${val}_classes_dir" value="${src_classesdir}"/>
                                <param name="${val}_compile_srcdir" value="${compile_srcdir}"/>
                                <param name="${val}_compile_includes" value="${compileinclude}"/>
                                <param name="${val}_compile_excludes" value="${compileexclude}"/>
                        </antcall>
                        <echo message="converting ${cjar} to normal sorce compilation is finished"/>
                </else>
        </if>

	<echo message="converting ${cjar} to srccompile task is finished"/>
	<if>
		<available file="${compilejar}" type="file"/>
		<then>
			<property name="jarupd" value="true"/>
		</then>
		<else>
			<property name="jarupd" value="false"/>
		</else>
	</if>
	<antcall target="genjar">
		<param name="val" value="${val}"/>
		<param name="${val}_jar_file" value="${compilejar}"/>
		<param name="${val}_jar_srcdir" value="${src_classesdir}"/>
		<param name="${val}_jar_includes" value="${jar_include}"/>
		<param name="${val}_jar_excludes" value="${jar_exclude}"/>
		<param name="${val}_jar_update" value="${jarupd}"/>
	</antcall>
	<echo message="converting ${sjc} to srcgenjar task is finished"/>
<record name="${basedir}/buildlogs/${cjar}_${val}_${msec}_err.log" action="stop"/>
<record name="${basedir}/buildlogs/${cjar}_${val}_${msec}.log" action="stop"/>

</target>

<!-- ======================================================================

JSPCOMPILATION  TARGET

====================================================================== -->

<target name="jspcompilation" depends="init">
	<property name="jspc" value="jspcompilation"/>
	<record name="${basedir}/buildlogs/${jspc}_${val}_${msec}.log" action="start" loglevel="info"/>
	<record name="${basedir}/buildlogs/${jspc}_${val}_${msec}_err.log" action="start" loglevel="error"/>
	<record name="${basedir}/buildlogs/${jspc}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>
	<propertycopy name="srcdir" from="${val}_jspcompilation_jspsrcdir" silent="false"/>
	<propertycopy name="pkgincludes" from="${val}_jspcompilation_jspincludes" silent="true"/>
	<propertycopy name="pkgexcludes" from="${val}_jspcompilation_jspexcludes" silent="true"/>
	<propertycopy name="securityxmlname" from="${val}_jspcompilation_xml_name" silent="true"/>
	<propertycopy name="jspjar" from="${val}_jspcompilation_jarname" silent="false"/>
	<propertycopy name="javaclp" from="${val}_jspcompilation_jspclasspath" silent="false"/>
	<propertycopy name="jspincludes" from="${val}_jspcompilation_jarincludes" silent="true"/>
	<propertycopy name="jspexcludes" from="${val}_jspcompilation_jarexcludes" silent="true"/>
	<propertycopy name="jspcompile_srcdir" from="${val}_jspcompilation_srcdir" silent="true"/>
	<propertycopy name="jspcompile_includes" from="${val}_jspcompilation_compileincludes" silent="true"/>
	<propertycopy name="jspcompile_excludes" from="${val}_jspcompilation_compileexcludes" silent="true"/>
	<propertycopy name="jsp_need_spaceremoval" from="${val}_jspcompilation_needspaceremoval" silent="true"/>
	<propertycopy name="prdwebxml" from="${val}_jspcompilation_webxml" silent="true"/>
	<propertycopy name="blockexternal" from="${val}_jspcompilation_blockexternal" silent="true"/>
	<propertycopy name="jsp_webxml_needed" from="${val}_jspcompilation_needjspwebxml" silent="true"/>

	

	<property name="jsp_todir" value="${build_dir}/jspcompilation"/>
	<basename property="jsptodirname" file="${srcdir}"/>
	<echo message="task name:- ${sjc}"/>
	<echo message="task param:- ${val}"/>
	<echo message="todir:- ${destdir}"/>
	<echo message="srcdir:- ${srcdir}"/>
	<echo message="includes:- ${pkgincludes}"/>
	<echo message="excludes:- ${pkgexcludes}"/>
	<echo message="jsp_classpath:- ${javaclp}"/>
	<antcall target="copy">
		<param name="val" value="${val}"/>
		<param name="${val}_copy_todir" value="${jsp_todir}/${jsptodirname}"/>
		<param name="${val}_fileset_dir" value="${srcdir}"/>
		<param name="${val}_copy_includes" value="**"/>
		<param name="${val}_copy_excludes" value="${pkgexcludes}"/>
	</antcall>
	<echo message="${sjc} copy task is finished"/>

	<if>
		<and>
			<isset property="jsp_need_spaceremoval"/>
 			<equals arg1="${jsp_need_spaceremoval}" arg2="false"/>
		</and>
		<then>
			<echo message="Jsp Space remover not used in ${val} jspcompilation task"/>
		</then>
		<else>
			<antcall target="javatask">
				<param name="${val}_java_classpath" value="${javaclp}"/>
				<param name="${val}_java_class" value="com.adventnet.transformers.JSPSpaceRemover"/>
				<param name="${val}_java_args" value="${jsp_todir}/${jsptodirname}"/>
			</antcall>
		</else>
	</if>

	<echo message="${sjc} remspacejsp task is finished"/>
	<if>
		<isset property="securityxmlname"/>
		<then>
			<antcall target="copyfile">
				<param name="${val}_copy_src_file" value="${securityxmlname}"/>
				<param name="${val}_copy_tofile" value="${jsp_todir}/${jsptodirname}/WEB-INF/web.xml"/>
			</antcall>
		</then>
	</if>

	<antcall target="jsptimechange">
                <param name="${val}_jsptimeexec_directory" value="${jsp_todir}/${jsptodirname}"/>
        </antcall>

	<if>
	<isset property="blockexternal"/>
		<then>
		<if>
		<equals arg1="${blockexternal}" arg2="false"/>
		<then>

			<antcall target="javatask">
			<param name="val" value="${val}"/>
			<param name="${val}_java_classpath" value="${javaclp}"/>
			<param name="${val}_java_class" value="org.apache.jasper.JspC"/>
			<param name="${val}_java_args" value="-die1 -d ${jsp_todir}/${jsptodirname}_java -webinc ${jsp_todir}/${jsptodirname}/WEB-INF/jsp_web.xml -uriroot ${jsp_todir}/${jsptodirname} -webapp ${jsp_todir}/${jsptodirname} -l -s -no-blockExternal"/>
			</antcall>

		</then>
		<else>

			<antcall target="javatask">
			<param name="val" value="${val}"/>
			<param name="${val}_java_classpath" value="${javaclp}"/>
			<param name="${val}_java_class" value="org.apache.jasper.JspC"/>
			<param name="${val}_java_args" value="-die1 -d ${jsp_todir}/${jsptodirname}_java -webinc ${jsp_todir}/${jsptodirname}/WEB-INF/jsp_web.xml -uriroot ${jsp_todir}/${jsptodirname} -webapp ${jsp_todir}/${jsptodirname} -l -s"/>
			</antcall>
		</else>
		</if>
		</then>
	<else>

		<antcall target="javatask">
		<param name="val" value="${val}"/>
		<param name="${val}_java_classpath" value="${javaclp}"/>
		<param name="${val}_java_class" value="org.apache.jasper.JspC"/>
		<param name="${val}_java_args" value="-die1 -d ${jsp_todir}/${jsptodirname}_java -webinc ${jsp_todir}/${jsptodirname}/WEB-INF/jsp_web.xml -uriroot ${jsp_todir}/${jsptodirname} -webapp ${jsp_todir}/${jsptodirname} -l -s"/>
		</antcall>

	</else>
	</if>
	
	<echo message="converting  to java files task is finished"/>
	<dirname property="destdir_dname" file="${jsp_todir}/${jsptodirname}_java"/>
	<basename property="destdir_bname" file="${jsp_todir}/${jsptodirname}_java"/>
	<echo message="source dir:- ${jsp_todir}/${jsptodirname}_java"/>
	<if>
		<isset property="jspcompile_includes"/>
		<then>
			<property name="jsp_cmpl_inc" value="${jspcompile_includes}"/>
		</then>
		<else>
			<property name="jsp_cmpl_inc" value="**"/>
		</else>
	</if>
	<if>
		<isset property="jspcompile_srcdir"/>
		<then>
			<property name="jsp_cmpl_srcdir" value="${jspcompile_srcdir}"/>
		</then>
		<else>
			<property name="jsp_cmpl_srcdir" value="${jsp_todir}/${jsptodirname}_java"/>
		</else>
	</if>
	<antcall target="compilesrc">
		<param name="val" value="${val}"/>
                <param name="${val}_taskname" value="jspcompilation" />
		<param name="${val}_classpath" value="${javaclp}"/>
		<param name="${val}_classes_dir" value="${jsp_todir}/${jsptodirname}_classes"/>
		<param name="${val}_compile_srcdir" value="${jsp_cmpl_srcdir}"/>
		<param name="${val}_compile_includes" value="${jsp_cmpl_inc}"/>
		<param name="${val}_compile_excludes" value="${jspcompile_excludes}"/>
	</antcall>
	<dirname property="destdir_classname" file="${jsp_todir}/${jsptodirname}_classes"/>
	<basename property="destdir_classname" file="${jsp_todir}/${jsptodirname}_classes"/>
	<echo message="converting ${sjc} to jspcompilesrc task is finished"/>
	<if>
		<available file="${jspjar}" type="file"/>
		<then>
			<property name="jspjarupdate" value="true"/>
		</then>
		<else>
			<property name="jspjarupdate" value="false"/>
		</else>
	</if>
	<antcall target="genjar">
		<param name="val" value="${val}"/>
		<param name="${val}_jar_file" value="${jspjar}"/>
		<param name="${val}_jar_srcdir" value="${jsp_todir}/${jsptodirname}_classes"/>
		<param name="${val}_jar_includes" value="**"/>
		<param name="${val}_jar_update" value="${jspjarupdate}"/>
	</antcall>
	<echo message="converting ${sjc} to jspgenjar task is finished"/>

	<if>
	<isset property="blockexternal"/>
		<then>
		<if>
		<equals arg1="${blockexternal}" arg2="false"/>
		<then>

		<antcall target="javatask">
		<param name="val" value="${val}"/>
		<param name="${val}_java_classpath" value="${javaclp}"/>
		<param name="${val}_java_class" value="MergeWebXmlFiles"/>
		<param name="${val}_java_args" value="${jsp_todir}/${jsptodirname}/WEB-INF/jsp_web.xml ${jsp_todir}/${jsptodirname}/WEB-INF/web.xml -no-blockExternal"/>
		</antcall>


		</then>
		<else>

		<antcall target="javatask">
		<param name="val" value="${val}"/>
		<param name="${val}_java_classpath" value="${javaclp}"/>
		<param name="${val}_java_class" value="MergeWebXmlFiles"/>
		<param name="${val}_java_args" value="${jsp_todir}/${jsptodirname}/WEB-INF/jsp_web.xml ${jsp_todir}/${jsptodirname}/WEB-INF/web.xml"/>
		</antcall>

		</else>
		</if>
		</then>
	<else>

		<antcall target="javatask">
		<param name="val" value="${val}"/>
		<param name="${val}_java_classpath" value="${javaclp}"/>
		<param name="${val}_java_class" value="MergeWebXmlFiles"/>
		<param name="${val}_java_args" value="${jsp_todir}/${jsptodirname}/WEB-INF/jsp_web.xml ${jsp_todir}/${jsptodirname}/WEB-INF/web.xml"/>
		</antcall>
	</else>
	</if>

	<echo message="converting ${sjc} to jspxmlmerge task is finished"/>

	<if>
                <isset property="jsp_webxml_needed"/>
                <then>
                        <echo message="Jsp web.xml is not removed ${val} jspcompilation task"/>
                </then>
                <else>
                        <antcall target="del">
                        <param name="val" value="${val}"/>
                        <param name="${val}_del_fileset_dir" value="${jsp_todir}/${jsptodirname}/WEB-INF"/>
                        <param name="${val}_delete_includes" value="jsp_web.xml"/>
                        </antcall>

                </else>
        </if>

	<if>
        <isset property="prdwebxml"/>
        <then>
        <antcall target="copyfile">
                <param name="${val}_copy_src_file" value="${jsp_todir}/${jsptodirname}/WEB-INF/web.xml"/>
                <param name="${val}_copy_tofile" value="${prdwebxml}"/>
        </antcall>
        </then>
        </if>

	

	<echo message="converting ${sjc} to jspdeletexml task is finished"/>
	<record name="${basedir}/buildlogs/${sjc}_${val}_${msec}_err.log" action="stop"/>
	<record name="${basedir}/buildlogs/${sjc}_${val}_${msec}.log" action="stop"/>

</target>

<!--=============================================================================
                                 JSPTIMECHANGE....    
==============================================================================-->

<target name="jsptimechange">
<record name="${basedir}/buildlogs/${jsptimechange}_${val}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${jsptimechange}_${val}_${msec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${jsptimechange}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>

<if>
        <and>
            <isset property="chgjsptime"/>
            <not><equals arg1="${chgjsptime}" arg2=""/></not>
        </and>
        <then>
        <propertycopy name="jsptimechange_dir" from ="${val}_jsptimeexec_directory" silent="false" />
        <exec dir="${jsptimechange_dir}" executable="bash" failonerror="true">
                <arg value="-c"/>
                <arg value="find . -type f -iname &quot;*.jsp*&quot; -exec touch {} -t ${chgjsptime} {} \;"/>
        </exec>
        </then>
</if>

<echo message="converting ${jsptimechange} to jsptimechange task is finished"/>

<record name="${basedir}/buildlogs/${jsptimechange}_${val}_${msec}_err.log" action="stop"/>
<record name="${basedir}/buildlogs/${jsptimechange}_${val}_${msec}.log" action="stop"/>

</target>



<!-- ======================================================================
		COPYTASK TARGET
====================================================================== -->

<target name="copytask" depends="init">
	<property name="cpytsk" value="copytask"/>
	<record name="${basedir}/buildlogs/${cpytsk}_${val}_${msec}.log" action="start" loglevel="info"/>
	<record name="${basedir}/buildlogs/${cpytsk}_${val}_${msec}_err.log" action="start" loglevel="error"/>
	<record name="${basedir}/buildlogs/${cpytsk}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>
	<propertycopy name="cpytsk_params" from="${val}_copytask" silent="false"/>
	<echo message="${cpytsk_params}"/>
	<propertyregex property="copy_src_match" input="${cpytsk_params}" regexp="([^,]+)[,]{1}([^,]+)[,]{1}([^,]+)" select="\1" casesensitive="true"/>
	<propertyregex property="copy_dest_match" input="${cpytsk_params}" regexp="([^,]+)[,]{1}([^,]+)[,]{1}([^,]+)" select="\2" casesensitive="true"/>
	<propertyregex property="copy_includes_match" input="${cpytsk_params}" regexp="([^,]+)[,]{1}([^,]+)[,]{1}([^,]+)" select="\3" casesensitive="true"/>
        <propertyregex property="copy_excludes_match" input="${cpytsk_params}" regexp="([^,]+)[,]([^,]+)[,]([^,]+)[,]([^,]+)" select="\4" casesensitive="true"/>
        <propertyregex property="mapper_match" input="${cpytsk_params}" regexp="([^,]+)[,]([^,]+)[,]([^,]+)[,]([^,]*)[,]\s*([^,]+)" select="\5" casesensitive="true"/>
        <propertyregex property="copy_logfile_needed" input="${cpytsk_params}" regexp="([^,]+)[,]([^,]+)[,]([^,]+)[,]([^,]*)[,]([^,]*)[,]([^,]+)" select="\6" casesensitive="true"/>

        <if>
	       <and>
	           <isset property="copy_excludes_match"/>
                   <equals arg1="${copy_excludes_match}" arg2="flatten"/>
	       </and>
	       <then>
                       <property name="cpy_mapper_type" value="flatten"/>
	               <property name="cpy_excludes" value=""/>
	       </then>
	       <else>
	               <property name="cpy_excludes" value="${copy_excludes_match}"/>
	       </else>
	</if>

	<if>
                <and>
		     <isset property="mapper_match"/>
                     <equals arg1="${mapper_match}" arg2="flatten"/>
                </and>
		<then>
			<property name="cpy_mapper_type" value="flatten"/>
		</then>
		<else>
			<property name="cpy_mapper_type" value="identity"/>
		</else>
	</if>
	<antcall target="copy">
		<param name="${val}_fileset_dir" value="${copy_src_match}"/>
		<param name="${val}_copy_todir" value="${copy_dest_match}"/>
		<param name="${val}_copy_includes" value="${copy_includes_match}"/>
		<param name="${val}_copy_excludes" value="${cpy_excludes}"/>
		<param name="${val}_mapper_type" value="${cpy_mapper_type}"/>
		<param name="${val}_logfile_needed" value="${copy_logfile_needed}"/>
	</antcall>
</target>

<!-- ======================================================================
                JARTASK TARGET
====================================================================== -->

<target name="jartask" depends="init">
	<property name="jartsk" value="jartask"/>
	<record name="${basedir}/buildlogs/${jartsk}_${val}_${msec}.log" action="start" loglevel="info"/>
	<record name="${basedir}/buildlogs/${jartsk}_${val}_${msec}_err.log" action="start" loglevel="error"/>
	<record name="${basedir}/buildlogs/${jartsk}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>
	<propertycopy name="jartsk_params" from="${val}_jartask" silent="false"/>
	<echo message="${jartsk_params}"/>
	<propertyregex property="jar_name" input="${jartsk_params}" regexp="([^,]+)[,]{1}([^,]+)[,]{1}([^,]+)" select="\1" casesensitive="true"/>
	<propertyregex property="jar_srcdir" input="${jartsk_params}" regexp="([^,]+)[,]{1}([^,]+)[,]{1}([^,]+)" select="\2" casesensitive="true"/>
	<propertyregex property="jar_includes_match" input="${jartsk_params}" regexp="([^,]+)[,]{1}([^,]+)[,]{1}([^,]+)" select="\3" casesensitive="true"/>
	<propertyregex property="jar_excludes_match" input="${jartsk_params}" regexp="([^,]+)[,]{1}([^,]+)[,]{1}([^,]+)[,]{1}([^,]+)" select="\4" casesensitive="true"/>
	<propertyregex property="jar_upd_match" input="${jartsk_params}" regexp="(.*)(.*true.*)(.*)" select="\2" casesensitive="true"/>
	<propertyregex property="file_extn" input="${jar_name}" regexp="(.*)\.(.*)" select="\2" casesensitive="true" override="true"/>
	<propertyregex property="sas_match_patt" input="${trim_val}" regexp="(.*http://build/framework/saslite.*)" select="\1" casesensitive="true" override="true"/>
	<if>
		<and>
			<isset property="jar_excludes_match"/>
			<not>
				<isset property="jar_upd_match"/>
			</not>
		</and>
		<then>
			<property name="jar_excludes" value="${jar_excludes_match}"/>
		</then>
		<else>
			<property name="jar_excludes" value=""/>
		</else>
	</if>
	<if>
		<isset property="jar_upd_match"/>
		<then>
			<property name="jar_upd" value="true"/>
		</then>
		<else>
			<property name="jar_upd" value="false"/>
		</else>
	</if>
	<if>
	<and>
	<equals arg1="${file_extn}" arg2="war"/>
	<isset property="sas_match_patt"/>
	</and>
	<then>
	<antcall target="genjar">
		<param name="${val}_jar_file" value="${jar_name}"/>
		<param name="${val}_jar_srcdir" value="${jar_srcdir}"/>
		<param name="${val}_jar_includes" value="${jar_includes_match}"/>
		<param name="${val}_jar_excludes" value="${jar_excludes} **/zohoinstrumentation.jar **/iotrace.jar"/>
		<param name="${val}_jar_update" value="${jar_upd}"/>
	</antcall>
	</then>
	<else>
	<antcall target="genjar">
		<param name="${val}_jar_file" value="${jar_name}"/>
		<param name="${val}_jar_srcdir" value="${jar_srcdir}"/>
		<param name="${val}_jar_includes" value="${jar_includes_match}"/>
		<param name="${val}_jar_excludes" value="${jar_excludes}"/>
		<param name="${val}_jar_update" value="${jar_upd}"/>
	</antcall>
	</else>
	</if>
</target>

<!-- ======================================================================
		GENZIP TARGET
====================================================================== -->

<target name="genzip" depends="init">
	<property name="gen_zip" value="genzip"/>
	<record name="${basedir}/buildlogs/${gen_zip}_${val}_${msec}.log" action="start" loglevel="info"/>
	<record name="${basedir}/buildlogs/${gen_zip}_${val}_${msec}_err.log" action="start" loglevel="error"/>
	<record name="${basedir}/buildlogs/${gen_zip}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>
	<propertycopy name="ziptsk_params" from="${val}_genzip" silent="false"/>
	<echo message="${ziptsk_params}"/>
	<propertyregex property="zip_name" input="${ziptsk_params}" regexp="([^,]+)[,]{1}([^,]+)[,]{1}([^,]+)" select="\1" casesensitive="true"/>
	<propertyregex property="zip_srcdir" input="${ziptsk_params}" regexp="([^,]+)[,]{1}([^,]+)[,]{1}([^,]+)" select="\2" casesensitive="true"/>
	<propertyregex property="zip_includes_match" input="${ziptsk_params}" regexp="([^,]+)[,]{1}([^,]+)[,]{1}([^,]+)" select="\3" casesensitive="true"/>
	<propertyregex property="zip_excludes_match" input="${ziptsk_params}" regexp="([^,]+)[,]{1}([^,]+)[,]{1}([^,]+)[,]{1}([^,]+)" select="\4" casesensitive="true"/>
	<propertyregex property="file_extn" input="${zip_name}" regexp="(.*)\.(.*)" select="\2" casesensitive="true" override="true"/>
	<propertyregex property="sas_match_patt" input="${trim_val}" regexp="(.*http://build/framework/saslite.*)" select="\1" casesensitive="true" override="true"/>
	<if>
		<isset property="zip_excludes_match"/>
		<then>
			<property name="zip_excludes" value="${zip_excludes_match}"/>
		</then>
		<else>
			<property name="zip_excludes" value=""/>
		</else>
	</if>
	<if>
	<and>
	<equals arg1="${file_extn}" arg2="war"/>
	<isset property="sas_match_patt"/>
	</and>
	<then>
	<antcall target="ziptask">
		<param name="${val}_zip_name" value="${zip_name}"/>
		<param name="${val}_execdir" value="${zip_srcdir}"/>
		<param name="${val}_dir_tozip" value="${zip_includes_match}"/>
		<param name="${val}_zip_exclude" value="${zip_excludes} **/zohoinstrumentation.jar **/iotrace.jar"/>
	</antcall>
	</then>
	<else>
	<antcall target="ziptask">
		<param name="${val}_zip_name" value="${zip_name}"/>
		<param name="${val}_execdir" value="${zip_srcdir}"/>
		<param name="${val}_dir_tozip" value="${zip_includes_match}"/>
		<param name="${val}_zip_exclude" value="${zip_excludes}"/>
	</antcall>
	</else>
	</if>
</target>

<!-- ======================================================================
		GENURLDOC TARGET
====================================================================== -->

<target name="genurldoc" depends="init">
	<property name="gen_urldoc" value="genurldoc"/>
	<record name="${basedir}/buildlogs/${gen_urldoc}_${val}_${msec}.log" action="start" loglevel="info"/>
	<record name="${basedir}/buildlogs/${gen_urldoc}_${val}_${msec}_err.log" action="start" loglevel="error"/>
	<record name="${basedir}/buildlogs/${gen_urldoc}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>
	<propertycopy name="urldoc_srcfile" from="${val}_urldoc_srcfile" silent="false"/>
	<propertycopy name="urldoc_args" from="${val}_urldoc_args" silent="false"/>
        <propertycopy name="urldoc_xslfile" from="${val}_urldoc_xslfile" silent="false"/>
        <propertycopy name="urldoc_outputdir" from="${val}_urldoc_outputdir" silent="true"/>
        <if>
            <not><isset property="urldoc_outputdir"/></not>
            <then>
                <property name="urldoc_outputdir" value="${build_dir}/output/UrlDoc/"/>
            </then>
        </if>

	<antcall target="copyfile">
		<param name="${val}_copy_src_file" value="${urldoc_srcfile}"/>
		<param name="${val}_copy_tofile" value="${build_dir}/sec_temp.xml"/>
	</antcall>
	<antcall target="javatask">
		<param name="${val}_java_classpath" value="${build_dir}/utility_packages/xmlmerge/MergeWebXmlFiles.jar"/>
		<param name="${val}_java_class" value="MergeWebXmlFiles"/>
		<param name="${val}_java_args" value="${urldoc_args} ${build_dir}/sec_temp.xml security"/>
	</antcall>
	<antcall target="xslttask">
		<param name="${val}_xsltfile" value="${urldoc_xslfile}"/>
		<param name="${val}_xslt_input" value="${build_dir}/sec_temp.xml"/>
                <param name="${val}_xslt_output" value="${urldoc_outputdir}/security.html"/>
	</antcall>
	<antcall target="del">
		<param name="${val}_del_fileset_dir" value="${build_dir}"/>
		<param name="${val}_delete_includes" value="sec_temp.xml"/>
	</antcall>
</target>

<!-- ======================================================================
		COPYFILETASK TARGET
====================================================================== -->

<target name="copyfiletask" depends="init">
	<property name="cpyfl" value="copyfiletask"/>
	<record name="${basedir}/buildlogs/${cpyfl}_${val}_${msec}.log" action="start" loglevel="info"/>
	<record name="${basedir}/buildlogs/${cpyfl}_${val}_${msec}_err.log" action="start" loglevel="error"/>
	<record name="${basedir}/buildlogs/${cpyfl}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>
	<propertycopy name="cpyfltsk_params" from="${val}_copyfiletask" silent="false"/>
	<echo message="${cpyfltsk_params}"/>
	<propertyregex property="cpyfl_src" input="${cpyfltsk_params}" regexp="([^,]+)[,]{1}([^,]+)" select="\1" casesensitive="true"/>
	<propertyregex property="cpyfl_dest" input="${cpyfltsk_params}" regexp="([^,]+)[,]{1}([^,]+)" select="\2" casesensitive="true"/>
	<antcall target="copyfile">
		<param name="${val}_copy_src_file" value="${cpyfl_src}"/>
		<param name="${val}_copy_tofile" value="${cpyfl_dest}"/>
	</antcall>
</target>

<!-- ======================================================================
		MOVEFILETASK TARGET
====================================================================== -->

<target name="movefiletask" depends="init">
	<property name="mvfl" value="movefiletask"/>
	<record name="${basedir}/buildlogs/${mvfl}_${val}_${msec}.log" action="start" loglevel="info"/>
	<record name="${basedir}/buildlogs/${mvfl}_${val}_${msec}_err.log" action="start" loglevel="error"/>
	<record name="${basedir}/buildlogs/${mvfl}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>
	<propertycopy name="mvfltsk_params" from="${val}_movefiletask" silent="false"/>
	<echo message="${mvfltsk_params}"/>
	<propertyregex property="mvfl_src" input="${mvfltsk_params}" regexp="([^,]+)[,]{1}([^,]+)" select="\1" casesensitive="true"/>
	<propertyregex property="mvfl_dest" input="${mvfltsk_params}" regexp="([^,]+)[,]{1}([^,]+)" select="\2" casesensitive="true"/>
	<antcall target="movefile">
		<param name="${val}_move_src_file" value="${mvfl_src}"/>
		<param name="${val}_move_tofile" value="${mvfl_dest}"/>
	</antcall>
</target>

<!-- ======================================================================
		MOVEDIRTASK TARGET
====================================================================== -->

<target name="movedirtask" depends="init">
	<property name="mvdir" value="movedirtask"/>
	<record name="${basedir}/buildlogs/${mvdir}_${val}_${msec}.log" action="start" loglevel="info"/>
	<record name="${basedir}/buildlogs/${mvdir}_${val}_${msec}_err.log" action="start" loglevel="error"/>
	<record name="${basedir}/buildlogs/${mvdir}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>
	<propertycopy name="mvdirtsk_params" from="${val}_movedirtask" silent="false"/>
	<echo message="${mvdirtsk_params}"/>
	<propertyregex property="mv_srcdir" input="${mvdirtsk_params}" regexp="([^,]+)[,]{1}([^,]+)[,]{1}([^,]+)" select="\1" casesensitive="true"/>
	<propertyregex property="mv_destdir" input="${mvdirtsk_params}" regexp="([^,]+)[,]{1}([^,]+)[,]{1}([^,]+)" select="\2" casesensitive="true"/>
	<propertyregex property="mv_includes_match" input="${mvdirtsk_params}" regexp="([^,]+)[,]{1}([^,]+)[,]{1}([^,]+)" select="\3" casesensitive="true"/>
	<propertyregex property="mv_excludes_match" input="${mvdirtsk_params}" regexp="([^,]+)[,]{1}([^,]+)[,]{1}([^,]+)[,]{1}([^,]+)" select="\4" casesensitive="true"/>
	<if>
		<isset property="mv_excludes_match"/>
		<then>
			<property name="mv_excl" value="${mv_excludes_match}"/>
		</then>
		<else>
			<property name="mv_excl" value=""/>
		</else>
	</if>
	<antcall target="movedir">
		<param name="${val}_move_fileset_dir" value="${mv_srcdir}"/>
		<param name="${val}_move_todir" value="${mv_destdir}"/>
		<param name="${val}_move_includes" value="${mv_includes_match}"/>
		<param name="${val}_move_excludes" value="${mv_excl}"/>
	</antcall>
</target>

<!-- ======================================================================
                 RMIC  TASK
======================================================================= -->

<target name="rmictask">
    <property name="rmiclog" value="rmictask"/>
    <record name="${basedir}/buildlogs/${rmiclog}_${val}_${msec}.log" action="start" loglevel="info"/>
    <record name="${basedir}/buildlogs/${rmiclog}_${val}_${msec}_err.log" action="start" loglevel="error"/>
    <record name="${basedir}/buildlogs/${rmiclog}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>

    <propertycopy name="rmicclass" from="${val}_classname" silent="true"/>
    <propertycopy name="base" from="${val}_basename" silent="true"/>
    <echo message="${rmicclass}"/>
    <echo message="${basedir}"/>
    <rmic classname="${rmicclass}" base="${base}"/>

    <record name="${basedir}/buildlogs/${rmiclog}_${val}_${msec}_err.log" action="stop"/>
    <record name="${basedir}/buildlogs/${rmiclog}_${val}_${msec}.log" action="stop"/>
</target>

<!-- ======================================================================
		DELTASK TARGET
====================================================================== -->

<target name="deletetask" depends="init">
	<property name="deltsk" value="deltask"/>
	<record name="${basedir}/buildlogs/${deltsk}_${val}_${msec}.log" action="start" loglevel="info"/>
	<record name="${basedir}/buildlogs/${deltsk}_${val}_${msec}_err.log" action="start" loglevel="error"/>
	<record name="${basedir}/buildlogs/${deltsk}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>
	<propertycopy name="del_params" from="${val}_deletetask" silent="false"/>
	<echo message="${del_params}"/>
	<propertyregex property="del_srcdir" input="${del_params}" regexp="([^,]+)[,]{1}([^,]+)" select="\1" casesensitive="true"/>
	<propertyregex property="del_includes_match" input="${del_params}" regexp="([^,]+)[,]{1}([^,]+)" select="\2" casesensitive="true"/>
	<propertyregex property="del_excludes_match" input="${del_params}" regexp="([^,]+)[,]{1}([^,]+)[,]{1}([^,]+)" select="\3" casesensitive="true"/>
	<if>
		<isset property="del_excludes_match"/>
		<then>
			<property name="del_excl" value="${del_excludes_match}"/>
		</then>
		<else>
			<property name="del_excl" value=""/>
		</else>
	</if>
	<antcall target="del">
		<param name="${val}_del_fileset_dir" value="${del_srcdir}"/>
		<param name="${val}_delete_includes" value="${del_includes_match}"/>
		<param name="${val}_delete_excludes" value="${del_excludes_match}"/>
	</antcall>
</target>
<!-- ===============================================================================
                        FOR GO COMPILATION TARGET
===============================================================================  -->
<target name="goinstall" depends="init">
	<propertycopy property="input_dir" from="${val}_sourcedir" silent="true" />
	<propertycopy property="args" from="${val}_args" silent="true"/>
	<propertycopy property="goos" from="${val}_goos" silent="true" />
	<propertycopy property="goarch" from="${val}_goarch" silent="true" />
	<property environment="env" />
	<propertycopy property="go_root" from="env.GOROOT"/>
	<propertycopy property="go_path" from="env.GOPATH"/>
	<propertyregex property="argument" input="${args}" regexp="(^\w+$/)" select="\1" casesensitive="true"/>

	<mkdir dir="${source_basedir}/bin"/> 

	<if>
		<isset property="argument" />
		<then>
			<property name="argmnt" value="${args}" />
		</then>
	<else>
		<property name="argmnt" value=" install" />
	</else>
	</if>

	<if>
		<not><isset property="go_root" /></not>			
		<then>
			<echo message="Please set GOROOT in environment variable." />
		</then>		
	</if>

	<!--
		.go file - package name will be main means binary will be created under ${GO_PATH}/bin ( for testcases files ) 
		Example : snmp_go / src / examples / getapi / api.go ( package name contains as main ) - output name will be ${GO_PATH}/bin/getapi
	-->

	<foreach param="sub_dir" target="createExfile" inheritall="true">
		<path>
			<dirset dir="${input_dir}" includes="**" />
		</path>
	</foreach>
</target>

<target name="createExfile" depends="init">
	<property environment="env" />
	<fileset dir="${sub_dir}" id="src.files">
		<include name="*.go" />
	</fileset>

	<if>
		<not>
			<resourcecount when="equal" count="0" refid="src.files" />
		</not>
		<then>
			<for list="${goarch}" param="GoArch">
				<sequential>
					<exec dir="${sub_dir}" executable="go" failonerror="true">
						<env key="GOOS" value="${goos}" />
						<env key="GOARCH" value="@{GoArch}" />
						<arg line="${argmnt}"/>
					</exec>
				</sequential>	
			</for>
		</then>
	</if>

	<!--
		.go file - package name will be other than main - .a will be created under ${GO_PATH}/pkg/os_specific_folder ( release purposes )
		Example : snmp_go / src / webnms / getapi / api.go ( package name contains as webnms ) - output name will be ${GO_PATH}/pkg/os_specific_folder/webnms/webnms.a
	-->
</target>
<!-- ======================================================================
                REPLACE TEXT STRING TARGET
====================================================================== -->
<target name="replacetextstring" depends="init">
	<property name="replacetextstring" value="repstr"/>
  	<propertycopy name="sourcefile" from="${val}_source_file" silent="false"/>
    	<propertycopy name="destinationfile" from="${val}_destination_file" silent="false"/>
     	<propertycopy name="searchtoken" from="${val}_searchtoken" silent="false"/>
     	<propertycopy name="replacetoken" from="${val}_replacetoken" silent="false"/>
    	<dirname property="destfiledirname" file="${destinationfile}" />
    	<basename property="destfilename" file="${destinationfile}"/>
                <loadfile property="sourcefilecontent" srcFile="${sourcefile}">
                </loadfile>
                <loadfile property="destfilecontent" srcFile="${destinationfile}">
                </loadfile>
                <for param="sourcefileline" list="${sourcefilecontent}" delimiter="${line.separator}" >
                <sequential>
        		<propertyregex property="sourceresult" input="@{sourcefileline}" regexp="(^${searchtoken}*)=(.*)" select ="\2" casesensitive="true"/>
        		<propertyregex property="sourcekeyresult" input="@{sourcefileline}" regexp="(^${searchtoken}*)=(.*)" select ="\1" casesensitive="true"/>
                </sequential>
                </for>
                <for param="destfileline" list="${destfilecontent}" delimiter="${line.separator}" >
                <sequential>
                	<propertyregex property="destresult" input="@{destfileline}" regexp="(^${replacetoken}*)=(.*)" select ="\2" casesensitive="true"/>
        		<propertyregex property="destkeyresult" input="@{destfileline}" regexp="(^${replacetoken}*)=(.*)" select ="\1" casesensitive="true"/>
                </sequential>
                </for>
        	<fileset id='value' dir="${destfiledirname}">
            		<patternset id="file"><include name="${destfilename}"/></patternset>
            		<contains text="${searchtoken}" />
        	</fileset>
                <if>
            	<and>
                <not>
                    <equals arg1="${destkeyresult}" arg2="${replacetoken}"/>
                </not>
                    <resourcecount when="equal" count="0" refid="value" />
            	</and>
            	<then>
                	<echo file="${destinationfile}" append="true">${sourcekeyresult}=${sourceresult}</echo>
            	</then>
            	<else>
                	<replace file="${destinationfile}" token="${destresult}" value="${sourceresult}" />
            	</else>
        	</if>
</target>



<!-- ======================================================================
                          SCALA COMPILE TARGET
====================================================================== -->
  <target name="scalainit" depends="init">
  <property environment="env"/>
  <propertycopy name="scalapath" from="${val}_scalahome" silent="false"/>
        <if>
                <isset property="scalapath"/>
                <then>
                        <property name="scala.dir" location="${env.SCALA_HOME}"/>
                        <property name="scala-library.jar" location="${scala.dir}/lib/scala-library.jar"/>
                        <property name="scala-reflect.jar" location="${scala.dir}/lib/scala-reflect.jar"/>
                        <property name="scala-compiler.jar" location="${scala.dir}/lib/scala-compiler.jar"/>
                        <property name="scala-xml.jar" location="${scala.dir}/lib/scala-xml.jar"/>
                        <property name="scala-parser-combinators.jar" location="${scala.dir}/lib/scala-parser-combinators.jar"/>

                        <path id="project.classpath">
                                <pathelement location="${scala-library.jar}"/>
                                <pathelement location="${scala-xml.jar}"/>
                                <pathelement location="${scala-parser-combinators.jar}"/>

                        </path>

                        <path id="scala.classpath">
                                <pathelement location="${scala-compiler.jar}"/>
                                <pathelement location="${scala-reflect.jar}"/>
                                <pathelement location="${scala-library.jar}"/>
                        </path>

                        <taskdef resource="scala/tools/ant/antlib.xml" classpathref="scala.classpath"/>
                        <echo message="scala.dir : ${scala.dir}"/>
                </then>
                <else>
                        <fail status="0" message="Scala home not define" />

                </else>
        </if>

  </target>


<!-- ======================================================================
                          SCALA COMPILE TARGET
====================================================================== -->
<target name="scalacompilesrc" depends="scalainit">

<property name="scalasrc" value="scalacompilesrc"/>
<record name="${basedir}/buildlogs/${scalasrc}_${val}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${scalasrc}_${val}_${msec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${scalasrc}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>

<if>
<equals arg1="${common_classdir}" arg2="true"/>
<then>
<property name="classdir" value="${classes_dir}"/>
</then>
<else>
<propertycopy name="classdir" from="${val}_classes_dir" silent="true"/>
</else>
</if>

<if>
<equals arg1="${common_classpath}" arg2="true"/>
<then>
<property name="clp" value="${classpath}"/>
</then>
<else>
<propertycopy name="clp" from="${val}_classpath" silent="true"/>
</else>
</if>

<propertycopy name="scalasource_dir" from="${val}_scalacompile_srcdir" silent="true"/>
<propertycopy name="src_includes" from="${val}_scalacompile_includes" silent="true"/>
<propertycopy name="src_excludes" from="${val}_scalacompile_excludes" silent="true"/>

<echo message="${val}"/>
<echo message="${src}"/>
<echo message="${clp}"/>
<echo message="scalasource_dir : ${source_basedir}"/>
<echo message="classes dir : ${classdir}"/>
<echo message="scala_src_dir : ${src_includes}"/>
<if>
        <isset property="scalasource_dir"/>
        <then>
                <property name="scalacompile_srcdir" value="${scalasource_dir}"/>
        </then>
        <else>
                <property name="scalacompile_srcdir" value="${source_basedir}"/>
        </else>
</if>
<echo message="scala_src_dir : ${scalacompile_srcdir}"/>
<echo message="scala_src_dir : ${src_includes}"/>
<mkdir dir="${classdir}"/>
<scalac
        srcdir="${scalacompile_srcdir}"
        includes="${src_includes}"
        excludes="${src_excludes}"
        destdir="${classdir}"
        classpathref="project.classpath"
        classpath="${clp}"
        
/>
<record name="${basedir}/buildlogs/${scalasrc}_${val}_${msec}_err.log" action="stop"/>
<record name="${basedir}/buildlogs/${scalasrc}_${val}_${msec}.log" action="stop"/>
</target>


<!-- ======================================================================
                          SCALA COMPILE TARGET
====================================================================== -->
<target name="scalasrccompile" depends="init">
        <property name="scalajar" value="scalasrccompile"/>
	
	<record name="${basedir}/buildlogs/${scalajar}_${val}_${msec}.log" action="start" loglevel="info"/>
	<record name="${basedir}/buildlogs/${scalajar}_${val}_${msec}_err.log" action="start" loglevel="error"/>
	<record name="${basedir}/buildlogs/${scalajar}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>


        <propertycopy name="scalacompileclp" from="${val}_scalasrccompile_classpath" silent="false"/>
        <propertycopy name="scalasrc_classesdir" from="${val}_scalasrccompile_classes" silent="false"/>
        <propertycopy name="scalacompilejar" from="${val}_scalasrccompile_jar" silent="false"/>
        <propertycopy name="scalacompilesrcdir" from="${val}_scalasrccompile_srcdir" silent="true"/>
        <propertycopy name="scalacompileinclude" from="${val}_scalasrccompile_includes" silent="true"/>
        <propertycopy name="scalacompileexclude" from="${val}_scalasrccompile_excludes" silent="true"/>
        <propertycopy name="scalajarincludes" from="${val}_scalasrccompile_jar_includes" silent="true"/>
        <propertycopy name="scalajarexcludes" from="${val}_scalasrccompile_jar_excludes" silent="true"/>
        <if>
                <isset property="scalacompilesrcdir"/>
                <then>
                        <property name="scalacompile_srcdir" value="${scalacompilesrcdir}"/>
                </then>
                <else>
                        <property name="scalacompile_srcdir" value="${source_basedir}"/>
                </else>
        </if>
        <if>
                <isset property="scalacompileinclude"/>
                <then>
                        <property name="scalacompile_include" value="${scalacompileinclude}"/>
                </then>
                <else>
                        <property name="scalacompile_include" value="**"/>
                </else>
        </if>

        <if>
                <isset property="scalajarincludes"/>
                <then>
                        <property name="scalajar_include" value="${scalajarincludes}"/>
                </then>
                <else>
                        <property name="scalajar_include" value="**"/>
                </else>
        </if>
        <if>
                <isset property="scalajarexcludes"/>
                <then>
                        <property name="scalajar_exclude" value="${scalajarexcludes}"/>
                </then>
                <else>
                        <property name="scalajar_exclude" value=""/>
                </else>
        </if>

        <antcall target="scalacompilesrc">
                <param name="val" value="${val}"/>
                <param name="${val}_classpath" value="${scalacompileclp}"/>
                <param name="${val}_classes_dir" value="${scalasrc_classesdir}"/>
                <param name="${val}_scalacompile_srcdir" value="${scalacompile_srcdir}"/>
                <param name="${val}_scalacompile_includes" value="${scalacompileinclude}"/>
                <param name="${val}_scalacompile_excludes" value="${scalacompileexclude}"/>
        </antcall>
        <echo message="converting ${cjar} to srccompile task is finished"/>
        <if>
                <available file="${scalacompilejar}" type="file"/>
                <then>
                        <property name="jarupd" value="true"/>
                </then>
                <else>
                        <property name="jarupd" value="false"/>
                </else>
        </if>
        <antcall target="genjar">
                <param name="val" value="${val}"/>
                <param name="${val}_jar_file" value="${scalacompilejar}"/>
                <param name="${val}_jar_srcdir" value="${scalasrc_classesdir}"/>
                <param name="${val}_jar_includes" value="${scalajar_include}"/>
                <param name="${val}_jar_excludes" value="${scalajar_exclude}"/>
                <param name="${val}_jar_update" value="${jarupd}"/>
        </antcall>
        <echo message="converting ${sjc} to srcgenjar task is finished"/>
<record name="${basedir}/buildlogs/${scalajar}_${val}_${msec}_err.log" action="stop"/>
<record name="${basedir}/buildlogs/${scalajar}_${val}_${msec}.log" action="stop"/>

</target>
<!-- ======================================================================
    DLLTASK TARGET
====================================================================== -->
<target name="dlltask" depends="init">
    <property name="dtask" value="dlltask"/>
    <record name="${basedir}/buildlogs/${dtask}_${val}_${msec}.log" action="start" loglevel="info"/>
    <record name="${basedir}/buildlogs/${dtask}_${val}_${msec}_err.log" action="start" loglevel="error"/>
    <record name="${basedir}/buildlogs/${dtask}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>
    <propertycopy name="dllargs" from="${val}_dll_args" silent="false"/>
    <propertycopy name="javaclp" from="${val}_java_classpath" silent="true"/>
    <propertycopy name="javacls" from="${val}_java_class" silent="true"/>
    <propertycopy name="dllunzip_exclude" from="${val}_files_exclude" silent="true"/>

    <if>
        <not><isset property="build_id" /></not>
	<then>
		<echo message="Build id is not passed in dlltask" file="${basedir}/build_err.txt" append="true"/>
                <fail message="Build id is not passed" />
        </then>
    </if>
    
    <if>
        <not><isset property="branch_name" /></not>
	<then>
		<echo message="Branch name is not passed in dlltask" file="${basedir}/build_err.txt" append="true"/>
                <fail message="Branch name is not passed" />
        </then>
    </if>

    <propertyregex property="dll_macname" input="${dllargs}" regexp="(.*)\s[0-9].*" select="\1" casesensitive="true" override="true"/>

    <propertyregex property="product_zip"
        input="${dllargs}"
        regexp="([^\s]+)([\s]+)([^\s]+)([^\s]+)([\s]+)([^\s]+)"
        select="\6"
        casesensitive="false" />


    <antcallback target="javatask">
    <param name="val" value="duplicate"/>
    <param name="${val}_java_classpath" value="${build_dir}/utility_packages/exe/Regression.jar"/>
    <param name="${val}_java_class" value="com.adventnet.testtools.regression.DuplicateFileFinder"/>
    <param name="${val}_java_args" value="${product_zip}"/>
    </antcallback>


    <if>
        <not>
            <isset property="javaclp"/>
        </not>
        <then>
            <property name="javaclp" value="${build_dir}/utility_packages/exe/Regression.jar"/>
        </then>
    </if>
    <if>
        <not>
            <isset property="javacls"/>
        </not>
        <then>
            <property name="javacls" value="com.adventnet.testtools.regression.ExeCreationClient"/>
        </then>
    </if>

    <propertyregex property="output_zip" input="${dllargs}" regexp="([^\s]+)([\s]+)([^\s]+)([^\s]+)([\s]+)([^\s]+)([\s]+)([^\s]+)" select="\8" casesensitive="false" />
    <dirname property="unzip_todir" file="${output_zip}"/>
    <basename property="unzip_include" file="${output_zip}"/>
    <basename property="unzip_exclude" file="${dllunzip_exclude}"/>
    <property name="unzip_srcdir" value="${basedir}/localworkdir"/>
    <propertyregex property="arguments" input="${dllargs}" regexp="${output_zip}" replace="${unzip_include}" global="true" />

    <antcallback target="javatask">
        <param name="${val}_java_classpath" value="${javaclp}"/>
        <param name="${val}_java_class" value="${javacls}"/>
        <param name="${val}_java_args" value="${arguments} ${build_id} dlltask ${product_id} ${product_name} ${branch_name} ${build_id} cm-notify@zohocorp.com 90 8000,7000,6000"/>
    </antcallback>

    <echo message="${output_dir}"/>
    <echo message="${output_zip}"/>
    <echo message="${unzip_todir}"/>
    <echo message="${unzip_include}"/>

    <antcallback target="unzip">
        <param name="${val}_unzip_srcdir" value="${unzip_srcdir}"/>
        <param name="${val}_unzip_todir" value="${unzip_todir}"/>
        <param name="${val}_files_include" value="${unzip_include}"/>
        <param name="${val}_files_exclude" value="${unzip_exclude}"/>
    </antcallback>
    <if>
        <not><equals arg1="${product_name}" arg2="DESKTOPCENTRAL" /></not>
    <then>
    <copy todir="${build_dir}/output" overwrite="true" includeEmptyDirs="false" verbose="${copylogfile}">
                                <fileset dir="${unzip_todir}" includes="dll_logs/**" excludes=""/>
    </copy>
    </then>
    </if>
    <!--antcallback target="copy">
        <param name="${val}_auto_dlllogs_copy_todir" value="${output_dir}"/>
        <param name="${val}_auto_dlllogs_fileset_dir" value="${unzip_todir}"/>
        <param name="${val}_auto_dlllogs_copy_includes" value="dll_logs/**"/>
    </antcallback-->
    <antcall target="eco">
                <param name="val" value="${val}_dllmachinename"/>
                <param name="${val}_dllmachinename_eco_msg" value="${dll_macname}"/>
                <param name="${val}_dllmachinename_eco_file" value="${basedir}/dependency_server_name.txt"/>
                <param name="${val}_dllmachinename_eco_opt" value="true"/>
    </antcall>

</target>

<!--###############################################################################
              FileTransfer Task
###############################################################################-->
<target name="ftp" depends="init">
    <propertycopy name="srcfile_list" from="${val}_scp_srcfile" silent="false"/>
    <propertycopy name="destdir" from="${val}_scp_destdir" silent="false"/>
    <propertycopy name="keyname" from="${val}_key" silent="false"/>
    <propertycopy name="scpdestdir" from="${val}_outputdir" silent="false" />
    <propertycopy name="argument" from="${val}_args" silent="true"/>
    <propertycopy name="binargument" from="${val}_binargs" silent="true"/>
    <propertycopy name="binary_type" from="${val}_binary_type" silent="true"/>

    <property name="srcdir" value="${basedir}"/>
    <property name="machinename" value="ismp-build"/>
    <property name="username" value="ismp"/>
    <property name="password" value="Als@ismp#28"/>
    <property name="executable_file" value="/advent3/ismp/InstallShield/MP50/Ismp_wrapper.sh"/>
    <property name="dircreation_file" value="/advent3/ismp/InstallShield/MP50/Ismp_dircreation.sh"/>
    <property name="port" value="22"/>

    <replaceregexp file="${basedir}/ismp/ismp_setup/Projects/${binargument}/${binargument}.xml" match="Build_Id=([^&lt;]*)" replace="Build_Id=${build_id}" flags="g" />

    <propertyregex property="build_configration" input="${argument}" regexp="([^\s]+)" select="\1" casesensitive="false" />
    <propertyregex property="custom_bin" input="${argument}" regexp="([^\s]+)[\s]([^\s]+)" select="\2" casesensitive="false" />
    <propertyregex property="ismpproj_src_zip" input="${srcfile_list}" regexp=",*(([^,]*)hg_ismp_src.zip)" select="\1" casesensitive="false" />

    <antcallback target="ziptask">
    <param name="${val}_zip_name" value="${ismpproj_src_zip}"/>
    <param name="${val}_execdir" value="${basedir}/ismp/ismp_setup/Projects/${binargument}"/>
    <param name="${val}_dir_tozip" value="."/>
    <param name="${val}_zip_exclude" value=""/>
    </antcallback>


    <property name="todestdir" value="/advent3/ismp/InstallShield/MP50/Projects/${day}/${keyname}_${build_id}_${build_configration}"/>

<if>
   <isset property="custom_bin"/>
    <then>
    <basename property="linuxbinfile" file="${custom_bin}"/>
    <propertyregex property="outbinname" input="${linuxbinfile}" regexp="zip" replace="bin" global="true" />
    <propertyregex property="custom_bin_mod" input="${custom_bin}" regexp="zip" replace="bin" global="true" />

    <antcallback target="geturl">
    <param name="${val}_url" value="${custom_bin_mod}"/>
    <param name="${val}_dest_zip" value="${build_dir}/${outbinname}"/>
    </antcallback>

    <replaceregexp file="${basedir}/ismp/ismp_setup/Projects/${binargument}/${binargument}.xml" match="(\$A.*linux-customized.*.bin)" replace="$A(\${keyname}_HOME)/${outbinname}" flags="g"/>

    <antcallback target="ziptask">
    <param name="${val}_zip_name" value="${ismpproj_src_zip}"/>
    <param name="${val}_execdir" value="${basedir}/ismp/ismp_setup/Projects/${binargument}"/>
    <param name="${val}_dir_tozip" value="."/>
    <param name="${val}_zip_exclude" value=""/>
    </antcallback>

    <antcallback target="ziptask">
    <param name="${val}_zip_name" value="${ismpproj_src_zip}"/>
    <param name="${val}_execdir" value="${build_dir}"/>
    <param name="${val}_dir_tozip" value="${outbinname}"/>
    <param name="${val}_zip_exclude" value=""/>
    </antcallback>

    </then>
</if>

    <antcall target="transferfile">
        <param name="srcfilelist" value="${srcfile_list}" />
        <param name="mcname" value="${machinename}" />
        <param name="username" value="${username}" />
        <param name="password" value="${password}" />
        <param name="port" value="${port}" />
    </antcall>

    <echo message="THE SCRIPT PATH AND CORRESPONDING ARGUMENT IS ${executable_file} ${todestdir} ${keyname} ${build_configration}" />
    <sshexec host="${machinename}" username="${username}" password="${password}" port="22" command="sh -x ${executable_file} ${todestdir} ${keyname} ${build_configration} ${binargument}" />
    <if>
    <not>
        <equals arg1="${build_configration}" arg2="64bit" />
    </not>
    <then>
          <if>
            <and>
                  <not><equals arg1="${binary_type}" arg2="bin" /></not>
                  <not><equals arg1="${binary_type}" arg2="exe" /></not>
            </and>
          <then>
                 <scp file="${username}@${machinename}:${todestdir}/default/disk1/${binary_type}" todir="${scpdestdir}" port="${port}" password="${password}"/>
        </then>
        <else>
                 <scp file="${username}@${machinename}:${todestdir}/default/disk1/**.${binary_type}" todir="${scpdestdir}" port="${port}" password="${password}"/>
        </else>                  
        </if>
    </then>
    <else>
          <if>
            <and>
                  <not><equals arg1="${binary_type}" arg2="bin" /></not>
                  <not><equals arg1="${binary_type}" arg2="exe" /></not>
            </and>
          <then>
                 <scp file="${username}@${machinename}:${todestdir}/64bit/disk1/${binary_type}" todir="${scpdestdir}" port="${port}" password="${password}"/>
          </then>
          <else>
                 <scp file="${username}@${machinename}:${todestdir}/64bit/disk1/**.${binary_type}" todir="${scpdestdir}" port="${port}" password="${password}"/>
          </else>
          </if>
    </else>
    </if>

    <antcall target="eco">
                <param name="val" value="${val}_ftpmachinename"/>
                <param name="${val}_ftpmachinename_eco_msg" value="${machinename}"/>
                <param name="${val}_ftpmachinename_eco_file" value="${basedir}/dependency_server_name.txt"/>
                <param name="${val}_ftpmachinename_eco_opt" value="true"/>
    </antcall>


</target>

<target name="transferfile" depends="init">

    <echo message="The Project dir creation Starts..." />
    <sshexec host="${machinename}" username="${username}" password="${password}" port="22" command="sh -x ${dircreation_file} ${todestdir}" />
    <echo message="The Project dir creation ends..." />

    <echo message="THE source file list is ${srcfilelist}" />
    <for list="${srcfilelist}" param="srcfile">
        <sequential>
            <propertyregex property="zipname" input="@{srcfile}" regexp="(.*)/(.*.zip)" select ="\2" casesensitive="true" override ="true" />
            <echo message="THE ZIP NAME IS :::   ${zipname}" />
            <scp file="@{srcfile}" todir="${username}@${mcname}:${todestdir}/${zipname}" port="${port}" password="${password}"/>
        </sequential>
        </for>
</target>
<!-- ###################### MSPDESK TEAM SPECIFIC CHANGE  ######################## -->

<target name="concatdir" depends="init">
<property name="ctask" value="concatmsp"/>
<record name="${basedir}/buildlogs/${ctask}_${sec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${ctask}_${sec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${ctask}_${sec}_err.log" action="start" loglevel="warn" append="yes"/>


<propertycopy name="destdir" from="${val}_dest_dir" silent="false"/>
<propertycopy name="filesetdir" from="${val}_fileset_dir" silent="false"/>
<propertycopy name="srcfile"    from="${val}_src_file" silent="false"/>
<foreach param="to_file_path" target="mergefile" inheritall="true">
                <path>
                        <fileset dir="${destdir}" includes="*.properties" excludes=""/>
                </path>
</foreach>
</target>

<target name="mergefile" depends="init">
        <basename property="propertyname" file="${to_file_path}"/>
        <available file="${filesetdir}/${propertyname}" property="src_prop_avail"/>
        <echo message="src_porp_path : ${filesetdir}/${propertyname}"/>
        <!--available file="${src_porp_path}" property="src_prop_avail"/-->
        <if>
                <isset property ="src_prop_avail"/>
        <then>
                <echo message="${filesetdir}/${propertyname} is present"/>
                <concat destfile="${to_file_path}" append="true">
                <filelist dir="${filesetdir}" files="${propertyname}"/>
                 </concat>
        </then>
        <else>
                <echo message="${filesetdir}/${propertyname} is not present"/>
                <concat destfile="${to_file_path}" append="true">
                <filelist dir="${filesetdir}" files="${srcfile}"/>
                 </concat>
        </else>
        </if>
</target>

<!-- ======================================================================
	MAC PKG TASK TARGET
====================================================================== -->

<target name="macpkgtask" depends="init">
        <property name="mptask" value="macpkgtask"/>
        <record name="${basedir}/buildlogs/${mptask}_${val}_${msec}.log" action="start" loglevel="info"/>
        <record name="${basedir}/buildlogs/${mptask}_${val}_${msec}_err.log" action="start" loglevel="error"/>
        <record name="${basedir}/buildlogs/${mptask}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>

        <propertycopy name="macpkglocalsrc" from="${val}_macpkg_localsrc" silent="false"/>
        <propertycopy name="macpkglocaldest" from="${val}_macpkg_localdest" silent="false"/>
        <propertycopy name="macpkgremotesrc" from="${val}_macpkg_remotesrc" silent="false"/>
        <propertycopy name="macpkgremotedest" from="${val}_macpkg_remotedest" silent="false"/>
        <propertycopy name="macpkghost" from="${val}_macpkg_host" silent="false"/>
        <propertycopy name="macpkguser" from="${val}_macpkg_user" silent="false"/>
        <propertycopy name="macpkgpasswd" from="${val}_macpkg_passwd" silent="true"/>
        <propertycopy name="macpkgcmd" from="${val}_macpkg_cmd" silent="false"/>

        <propertyregex property="macpkg_dir" input="${macpkgremotesrc}" regexp="(.*)/(.*)" select ="\1" casesensitive="true" override ="true"/>
	<antversion property="ant_version_above_1_9_7" atleast="1.9.7"/>

	<if>
		<and>
               <contains  substring="InstallAnywhere2015" string = "${macpkgremotesrc}" />
               <isset property="macpkgpasswd"/>
               </and>
                   <then>

                <echo message="bincreation task started"/>

                <antcall target="bincreationtask">
                          <param name="${val}_bincreation_localsrc" value="${macpkglocalsrc}"/>
                          <param name="${val}_bincreation_localdest" value="${macpkglocaldest}"/>
                          <param name="${val}_bincreation_remotesrc" value="${macpkgremotesrc}"/>
			  <param name="${val}_bincreation_remotedest" value="${macpkgremotedest}"/>
                           <param name="${val}_bincreation_host" value="${macpkghost}"/>
                          <param name="${val}_bincreation_user" value="${macpkguser}"/>
                        <param name="${val}_bincreation_passwd" value="${macpkgpasswd}"/>
                          <param name="${val}_bincreation_cmd" value="${macpkgcmd}"/>
               </antcall>
        </then>


	<elseif>
			<and>
			<contains  substring="InstallAnywhere2015" string = "${macpkgremotesrc}" />

	                <not> <isset property="macpkgpasswd"/> </not>
			</and>
                        <then>
                        	<echo message="bincreation task started without password"/>		
			<antcall target="bincreationtask">
                   <param name="${val}_bincreation_localsrc" value="${macpkglocalsrc}"/>
                        <param name="${val}_bincreation_localdest" value="${macpkglocaldest}"/>
                         <param name="${val}_bincreation_remotesrc" value="${macpkgremotesrc}"/>
                      <param name="${val}_bincreation_remotedest" value="${macpkgremotedest}"/>
                      <param name="${val}_bincreation_host" value="${macpkghost}"/>
                       <param name="${val}_bincreation_user" value="${macpkguser}"/>
			                                                                                                                                                                                                            <param name="${val}_bincreation_cmd" value="${macpkgcmd}"/>
			                                                                                                                                                                                                            </antcall>

                        </then>
          </elseif>
        <else>


        <if>
                <and>
                <isset property="macpkgpasswd"/>
                <not><equals arg1="${macpkgpasswd}" arg2=""/></not>
                </and>
                <then>
                	<if>
                	<isset property="ant_version_above_1_9_7"/>
                	<then>
                        	<sshexec host="${macpkghost}" username="${macpkguser}" password="${macpkgpasswd}" command="mkdir -p ${macpkg_dir}" trust="true" serverAliveIntervalSeconds="300"/>
	                        <scp file="${macpkglocalsrc}" todir="${macpkguser}@${macpkghost}:${macpkgremotesrc}" password="${macpkgpasswd}" trust="true" serverAliveIntervalSeconds="300"/>
        	                <sshexec host="${macpkghost}" username="${macpkguser}" password="${macpkgpasswd}" command="${macpkgcmd}" trust="true" serverAliveIntervalSeconds="300"/>
                	        <scp file="${macpkguser}@${macpkghost}:${macpkgremotedest}" todir="${macpkglocaldest}" password="${macpkgpasswd}" trust="true" serverAliveIntervalSeconds="300"/>
                	</then>
                	<else>
                        	<sshexec host="${macpkghost}" username="${macpkguser}" password="${macpkgpasswd}" command="mkdir -p ${macpkg_dir}" trust="true"/>
	                        <scp file="${macpkglocalsrc}" todir="${macpkguser}@${macpkghost}:${macpkgremotesrc}" password="${macpkgpasswd}" trust="true"/>
        	                <sshexec host="${macpkghost}" username="${macpkguser}" password="${macpkgpasswd}" command="${macpkgcmd}" trust="true"/>
                	        <scp file="${macpkguser}@${macpkghost}:${macpkgremotedest}" todir="${macpkglocaldest}" password="${macpkgpasswd}" trust="true"/>
                        </else>
                        </if>
                </then>
                <else>
                        <if>
                                <available file="${user.home}/.ssh/id_rsa" type="file"/>
                                <then>
                                        <sshexec host="${macpkghost}" username="${macpkguser}" keyfile="${user.home}/.ssh/id_rsa" command="mkdir -p ${macpkg_dir}" trust="true"/>
                                        <scp file="${macpkglocalsrc}" todir="${macpkguser}@${macpkghost}:${macpkgremotesrc}" keyfile="${user.home}/.ssh/id_rsa" trust="true"/>
                                        <sshexec host="${macpkghost}" username="${macpkguser}" keyfile="${user.home}/.ssh/id_rsa" command="${macpkgcmd}" trust="true"/>
                                        <!--scp file="${macpkguser}@${macpkghost}:${macpkgremotedest}" todir="${macpkglocaldest}" keyfile="${user.home}/.ssh/id_rsa" trust="true"/-->
					<echo message="Receiving following output package/file ${macpkgremotedest} from ${macpkghost}"/>
		                        <exec dir="${basedir}" executable="scp" failonerror="true" resultproperty="exitValue">
                                                   <arg line="-o StrictHostKeyChecking=no -r ${macpkguser}@${macpkghost}:${macpkgremotedest} ${macpkglocaldest}"/>
                                        </exec>
                                </then>
                        <else>
				<echo message="Authentication required to connect ${macpkghost} host."/>
				<echo message="Authentication required to connect ${macpkghost} host." file="${basedir}/build_err.txt" append="true"/>
                                <fail message="${mptask}:${val} task failed"/>
                        </else>
                        </if>
                </else>
        </if>

    <antcall target="eco">
                <param name="val" value="${val}_macpkgmachinename"/>
                <param name="${val}_macpkgmachinename_eco_msg" value="${macpkghost}"/>
                <param name="${val}_macpkgmachinename_eco_file" value="${basedir}/dependency_server_name.txt"/>
                <param name="${val}_macpkgmachinename_eco_opt" value="true"/>
    </antcall>
	</else>
        </if>

</target>
<!-- ======================================================================
        BINCREATION TASK TARGET
====================================================================== -->

<target name="bincreationtask" depends="init">
        <property name="mptask" value="bincreationtask"/>
        <record name="${basedir}/buildlogs/${bincreationtask}_${val}_${msec}.log" action="start" loglevel="info"/>
        <record name="${basedir}/buildlogs/${bincreationtask}_${val}_${msec}_err.log" action="start" loglevel="error"/>
        <record name="${basedir}/buildlogs/${mptask}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>

        <propertycopy name="bincreationlocalsrc" from="${val}_bincreation_localsrc" silent="false"/>
        <propertycopy name="bincreationlocaldest" from="${val}_bincreation_localdest" silent="false"/>
        <propertycopy name="bincreationremotesrc" from="${val}_bincreation_remotesrc" silent="false"/>
        <propertycopy name="bincreationremotedest" from="${val}_bincreation_remotedest" silent="false"/>
        <propertycopy name="bincreationhost" from="${val}_bincreation_host" silent="false"/>
        <propertycopy name="bincreationuser" from="${val}_bincreation_user" silent="false"/>
        <propertycopy name="bincreationpasswd" from="${val}_bincreation_passwd" silent="true"/>
        <propertycopy name="bincreationcmd" from="${val}_bincreation_cmd" silent="false"/>

	<propertyregex property="bincreation_dir" input="${bincreationremotesrc}" regexp="(.*)/(.*)" select ="\1" casesensitive="true" override ="true"/>
	<antversion property="ant_version_above_1_9_7" atleast="1.9.7"/>

	<dirname property="binsrc_dirpath" file="${bincreationlocalsrc}"/>
	<basename property="binsrc_filename" file="${bincreationlocalsrc}"/>

	<if>
		<not>                
			<contains casesensitive="false" substring="output" string= "${binsrc_dirpath}"/>                 
		</not>
               <then>
                        <property name="binsrc_dirpath" value="${build_dir}/output"/>
                        <antcall target="copy">
                                 <param name="${val}_copy_todir" value="${build_dir}/output"/>
                                 <param name="${val}_fileset_dir" value="${binsrc_dirpath}"/>
                                 <param name="${val}_copy_includes" value="${binsrc_filename}"/>
                         </antcall>

               </then>

        </if>



        <if>
                <and>
                <isset property="bincreationpasswd"/>
                <not><equals arg1="${bincreationpasswd}" arg2=""/></not>
                </and>
                <then>
                        <if>
                        <isset property="ant_version_above_1_9_7"/>
                        <then>
                                <sshexec host="${bincreationhost}" username="${bincreationuser}" password="${bincreationpasswd}" command="mkdir -p ${bincreation_dir}" trust="true" serverAliveIntervalSeconds="300"/>
                                <scp file="${bincreationlocalsrc}" todir="${bincreationuser}@${bincreationhost}:${bincreationremotesrc}" password="${bincreationpasswd}" trust="true" serverAliveIntervalSeconds="300"/>
                                <sshexec host="${bincreationhost}" username="${bincreationuser}" password="${bincreationpasswd}" command="${bincreationcmd}" trust="true" serverAliveIntervalSeconds="300"/>
                                <scp file="${bincreationuser}@${bincreationhost}:${bincreationremotedest}" todir="${bincreationlocaldest}" password="${bincreationpasswd}" trust="true" serverAliveIntervalSeconds="300"/>
                        </then>
                        <else>
                                <sshexec host="${bincreationhost}" username="${bincreationuser}" password="${bincreationpasswd}" command="mkdir -p ${bincreation_dir}" trust="true"/>
                                <scp file="${bincreationlocalsrc}" todir="${bincreationuser}@${bincreationhost}:${bincreationremotesrc}" password="${bincreationpasswd}" trust="true"/>
                                <sshexec host="${bincreationhost}" username="${bincreationuser}" password="${bincreationpasswd}" command="${bincreationcmd}" trust="true"/>
                                <scp file="${bincreationuser}@${bincreationhost}:${bincreationremotedest}" todir="${bincreationlocaldest}" password="${bincreationpasswd}" trust="true"/>
                        </else>
                        </if>
                </then>
                <else>
                        <if>
                                <available file="${user.home}/.ssh/id_rsa" type="file"/>
                                <then>
                                        <sshexec host="${bincreationhost}" username="${bincreationuser}" keyfile="${user.home}/.ssh/id_rsa" command="mkdir -p ${bincreation_dir}" trust="true"/>
                                        <scp file="${bincreationlocalsrc}" todir="${bincreationuser}@${bincreationhost}:${bincreationremotesrc}" keyfile="${user.home}/.ssh/id_rsa" trust="true"/>
                                        <sshexec host="${bincreationhost}" username="${bincreationuser}" keyfile="${user.home}/.ssh/id_rsa" command="${bincreationcmd}" trust="true"/>
                                        <!--scp file="${macpkguser}@${macpkghost}:${macpkgremotedest}" todir="${macpkglocaldest}" keyfile="${user.home}/.ssh/id_rsa" trust="true"/-->
                                        <echo message="Receiving following output package/file ${bincreationremotedest} from ${bincreationhost}"/>
                                        <exec dir="${basedir}" executable="scp" failonerror="true" resultproperty="exitValue">
                                                   <arg line="-o StrictHostKeyChecking=no -r ${bincreationuser}@${bincreationhost}:${bincreationremotedest} ${bincreationlocaldest}"/>
                                        </exec>
                                </then>
                        <else>
				<echo message="Authentication required to connect ${macpkghost} host."/>
				<echo message="Authentication required to connect ${macpkghost} host." file="${basedir}/build_err.txt" append="true"/>
                                <fail message="${mptask}:${val} task failed"/>
                        </else>
                        </if>
                </else>
	</if>

	<antcall target="eco">
                <param name="val" value="${val}_bincreationmachinename"/>
                <param name="${val}_bincreationmachinename_eco_msg" value="${bincreationhost}"/>
                <param name="${val}_bincreationmachinename_eco_file" value="${basedir}/dependency_server_name.txt"/>
                <param name="${val}_bincreationmachinename_eco_opt" value="true"/>
        </antcall>


</target>


<!-- ======================================================================
        REMOTE TASK TARGET
====================================================================== -->

<target name="remotetask" depends="init">
        <property name="remote" value="remotetask"/>
        <record name="${basedir}/buildlogs/${mptask}_${val}_${msec}.log" action="start" loglevel="info"/>
        <record name="${basedir}/buildlogs/${mptask}_${val}_${msec}_err.log" action="start" loglevel="error"/>
        <record name="${basedir}/buildlogs/${mptask}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>

        <propertycopy name="remotelocalsrc" from="${val}_remotetask_localsrc" silent="false"/>
        <propertycopy name="remotelocalsrc_files" from="${val}_remotetask_localsrc_files" silent="true"/>
        <propertycopy name="remotelocaldest" from="${val}_remotetask_localdest" silent="false"/>
        <propertycopy name="remotesrc" from="${val}_remotetask_remotesrc" silent="false"/>
        <propertycopy name="remotedest" from="${val}_remotetask_remotedest" silent="false"/>
        <propertycopy name="remotehost" from="${val}_remotetask_host" silent="false"/>
        <propertycopy name="remotelogin" from="${val}_remotetask_user" silent="false"/>
        <propertycopy name="remotecmd" from="${val}_remotetask_cmd" silent="false"/>

        <propertyregex property="remotepkg_dir" input="${remotesrc}" regexp="(.*)/(.*)" select ="\1" casesensitive="true" override ="true"/>
        <if>
                <available file="${user.home}/.ssh/id_rsa" type="file"/>
                <then>
                        <if>
                        <isset property="remotelocalsrc_files"/>
                        <then>  
                                <if>    
                                <available file="${remotelocalsrc}" type="dir"/>
                                <then>  
                                        
                                <sshexec host="${remotehost}" username="${remotelogin}" keyfile="${user.home}/.ssh/id_rsa" command="mkdir -p ${remotesrc}" trust="true"/>

                                <scp todir="${remotelogin}@${remotehost}:${remotesrc}" keyfile="${user.home}/.ssh/id_rsa" trust="true">
                                        <fileset dir="${remotelocalsrc}" casesensitive="yes" includes="${remotelocalsrc_files}" />
                                </scp>  

                                </then> 
                                <else>  
					<echo message="${remotelocalsrc} and ${remotesrc} should be a directory."/>
					<echo message="${remotelocalsrc} and ${remotesrc} should be a directory." file="${basedir}/build_err.txt" append="true"/>
                                        <fail message="${remote}:${val} task failed"/>
                                </else> 
                                </if>   
                        </then> 
                        <else>  
                                <sshexec host="${remotehost}" username="${remotelogin}" keyfile="${user.home}/.ssh/id_rsa" command="mkdir -p ${remotepkg_dir}" trust="true"/>
                                <scp file="${remotelocalsrc}" todir="${remotelogin}@${remotehost}:${remotesrc}" keyfile="${user.home}/.ssh/id_rsa" trust="true"/>
                        </else> 
                        </if>

                        <sshexec host="${remotehost}" username="${remotelogin}" keyfile="${user.home}/.ssh/id_rsa" command="${remotecmd}" trust="true"/>
                        <!--scp file="${remotelogin}@${remotehost}:${remotedest}" todir="${remotelocaldest}" keyfile="${user.home}/.ssh/id_rsa" trust="true"/-->
			<echo message="Receiving following output package/file ${remotedest} from ${remotehost}"/>
            		<exec dir="${basedir}" executable="scp" failonerror="true" resultproperty="exitValue">
                            <arg line="-o StrictHostKeyChecking=no -r ${remotelogin}@${remotehost}:${remotedest} ${remotelocaldest}"/>
                        </exec>

                </then>
                <else>
			<echo message="Authentication required to connect ${remotehost} host. Kindly enable the keyparing to connect the ${remotehost} ."/>
			<echo message="Authentication required to connect ${remotehost} host. Kindly enable the keyparing to connect the ${remotehost} ." file="${basedir}/build_err.txt" append="true"/>
                        <fail message="${remote}:${val} task failed"/>
                </else>
        </if>

    <antcall target="eco">
                <param name="val" value="${val}_remotemachinename"/>
                <param name="${val}_remotemachinename_eco_msg" value="${remotehost}"/>
                <param name="${val}_remotemachinename_eco_file" value="${basedir}/dependency_server_name.txt"/>
                <param name="${val}_remotemachinename_eco_opt" value="true"/>
    </antcall>

</target>

<!-- ======================================================================
             WSDL COMPILE TASK TARGET
====================================================================== -->
<target name="wsdlexec" depends="init">
        <property name="wsdl" value="wsdlexec"/>
        <propertycopy name="wsdlclasspath" from="${val}_wsdlexec_classpath" silent="false"/>
        <propertycopy name="wsdlsrcfile" from="${val}_wsdlexec_srcfile" silent="false"/>
        <propertycopy name="wsdloutputdir" from="${val}_wsdlexec_outputdir" silent="false"/>
        <mkdir dir="${wsdloutputdir}"/>

        <taskdef resource="axis-tasks.properties" classpath="${wsdlclasspath}"/>
        <axis-wsdl2java output="${wsdloutputdir}" testcase="true" verbose="true" url="${wsdlsrcfile}" />

</target>

<target name="jarjar" depends="init">
        <property name="jarjar" value="jarjar"/>
        <propertycopy name="jarclasspath" from="${val}_jarjar_classpath" silent="false"/>
        <propertycopy name="jarsrcfile" from="${val}_jarjar_srcfile" silent="false"/>
        <propertycopy name="jardestfile" from="${val}_jarjar_destfile" silent="false"/>
        <propertycopy name="jarpattern" from="${val}_jarjar_pattern" silent="false"/>
        <propertycopy name="jarresult" from="${val}_jarjar_result" silent="false"/>

        <taskdef name="jarjar" classname="com.tonicsystems.jarjar.JarJarTask" classpath="${jarclasspath}"/>
        <jarjar destfile="${jardestfile}">
                <zipfileset src="${jarsrcfile}"/>
                <rule pattern="${jarpattern}" result="${jarresult}"/>

        </jarjar>
</target>

<!-- ======================================================================
       DuplicateFileFinder
====================================================================== -->

<target name="duplicatefilefinder" depends="init">
<property name="dfilefinder" value="duplicatefilefinder"/>
<propertycopy name="zipfile" from="${val}_zipfile" silent="false"/>
<propertycopy name="logfile" from="${val}_logfile" silent="false"/>
<propertycopy name="argument" from="${val}_args" silent="false"/>
<propertycopy name="javahome" from="${val}_javahome" silent="false"/>

	<antcall target="exec">
        	<param name="${val}_exec_dir" value="${basedir}"/>
        	<param name="${val}_exec_command" value="${javahome}"/>
         	<param name="${val}_exec_args" value="${argument} ${zipfile}"/>
         	<param name="${val}_exec_append" value="true"/>
         	<param name="${val}_exec_output" value="${logfile}"/>
	</antcall>

</target>

<!-- ======================================================================
       MD5SUM check
====================================================================== -->
<target name="md5sum" depends="init">
<property name="md5sum" value="mdsum"/>
<propertycopy name="windowsfile" from="${val}_md5sum_windowsfile" silent="false"/>
<propertycopy name="linuxfile" from="${val}_md5sum_linuxfile" silent="false"/>
	
	 <fail message="Problem while creating ${linuxfile}. Please check the error logs : ${output_dir}/exe_logs">
                <condition>
                <not>
                        <available file="${linuxfile}" property="exe.present"/>
                </not>
                </condition>
        </fail>

         <exec dir="${basedir}" executable="md5sum" failonerror="true" append="true" output="${basedir}/linuxmd5sumcheck.txt">
                     <arg line="${linuxfile}"/>
         </exec>
	
        <basename property="linuxfilename" file="${linuxfile}"/>
        <loadfile property="windowsoutputfile" srcfile="${windowsfile}"/>
        <propertyregex property="windowsfilename" input="${windowsoutputfile}" regexp="(^.*) +(.*)" select ="\2" casesensitive="true"/>
        <basename property="windowsname" file="${windowsfilename}"/>
        <if>
             <equals arg1="${windowsname}" arg2="*${linuxfilename}" />
             <then>
        	<loadfile property="linuxoutputfile" srcfile="${basedir}/linuxmd5sumcheck.txt"/>
                        <propertyregex property="linuxmd5sum" input="${linuxoutputfile}" regexp="(^.*)  (.*)" select ="\1" casesensitive="true"/>
        	<loadfile property="windowsoutputfile" srcfile="${windowsfile}"/>
                        <propertyregex property="windowsmd5sum" input="${windowsoutputfile}" regexp="(^.*) +(.*)" select ="\1" casesensitive="true"/>
        	<fail message="${linuxmd5sum} not = ${windowsmd5sum}">
                	<condition>
                        	<not>
                                	<equals arg1="${linuxmd5sum}" arg2="${windowsmd5sum}" />
                        	</not>
                	</condition>
        	</fail>
        <echo message= " ${linuxmd5sum} = ${windowsmd5sum} "/>
        </then>
        </if>
</target>

<!-- ======================================================================
       CONTEXT PACKAGER ORDER
====================================================================== -->

<target name="contextpkg" depends="init">
<propertycopy name="context" from="${val}_contextpkg_context" silent="false"/>
<propertycopy name="contexthome" from="${val}_contextpkg_home" silent="true"/>
<propertycopy name="excludefiles" from="${val}_contextpkg_excludes" silent="true"/>
<echo message="context : ${context}"/>
<propertyregex property="contextval"
               input="${context}"
                     regexp="(.*),"
                                                         select="\1"
                                       casesensitive="false" />
<echo message="cntxtval:${contextval}"/>
<foreach list="${context}"
               target="callcontextorder"
               inheritall="true"
               param="propa">
</foreach>
</target>

<!-- ======================================================================
       CONTEXT ORDER CALLING
====================================================================== -->

<target name="callcontextorder">
<propertycopy name="calla" from="${propa}_order" silent="true"/>
<echo message="contextVal in Order : ${propa}"/>
<echo message="context Home : ${contexthome}"/>
<echo message="callProp : ${calla}"/>
<foreach list="${calla}"
                   target="calltask"
                   inheritall="false"
                   param="prop">
    </foreach>
</target>

<!-- ======================================================================
       CONTEXT PACKAGER PARALLEL ORDER
====================================================================== -->

<target name="contextpkgpara" depends="init">
<propertycopy name="context" from="${val}_contextpkg_context" silent="false"/>
<propertycopy name="contexthome" from="${val}_contextpkg_home" silent="true"/>
<propertycopy name="excludefiles" from="${val}_contextpkg_excludes" silent="true"/>
<echo message="context : ${context}"/>
<propertyregex property="contextval"
               input="${context}"
                     regexp="(.*),"
                                                         select="\1"
                                       casesensitive="false" />
<echo message="cntxtval:${contextval}"/>
<parallel failonany="true">
<for list="${context}" parallel="true" param="ordername">
<sequential>
               <antcall target="parallelexecution" inheritall="true">
               <param name="ordername" value="@{ordername}"/>
               </antcall>
</sequential>
</for>
</parallel>
</target>


<!-- ==========================================================================
                To Remove Unwanted Java Import from the Java File
=========================================================================== -->
 
<target name="removeunwantedjavaimport" depends="init">
    <property name="remjavaimport" value="removeunwantedjavaimport"/>
    <record name="${basedir}/buildlogs/${remjavaimport}_${val}_${msec}.log" action="start" loglevel="info"/>
    <record name="${basedir}/buildlogs/${remjavaimport}_${val}_${msec}_err.log" action="start" loglevel="error"/>
    <record name="${basedir}/buildlogs/${remjavaimport}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>
 
    <propertycopy name="file" from="${val}_file" silent="false"/>
    <propertycopy name="import_names" from="${val}_import_names" silent="false"/>
 
    <echo message="remove unwanted java import task param:-${val}"/>
    <echo message="file:-${file}"/>
    <echo message="import names to be removed :-${import_names}"/>
 
    <if>
            <available file="${file}" type="file"/>
        <then>
            <for param="import" list="${import_names}" delimiter="," >
                <sequential>
                    <!--replace file="${file}" token="import @{import};${line.separator}" value="" /-->
                    <replaceregexp file="${file}" byline="false" match="(import\s+@{import}\s*;(${line.separator})?)" replace="" />
                    <echo message="Removed the import @{import}" />
                </sequential>
            </for>
        </then>
        <else>
            <echo message="${file} Does not exists, please check the file path specified " />
        </else>
    </if>
    
    <record name="${basedir}/buildlogs/${remjavaimport}_${val}_${msec}_err.log" action="stop"/>
    <record name="${basedir}/buildlogs/${remjavaimport}_${val}_${msec}.log" action="stop"/>
</target>
 
<!--===================================================================================
    Replaces Strings from the file, Multiple Token and Value, specified once  
====================================================================================-->
<target name="multiple_replace" depends="init">
        <property name="multiple_rep" value="multiple_replace"/>
        <propertycopy name="src_file" from="${val}_file" silent="false"/>
        <propertycopy name="getTokenVal" from="${val}_tokenVal" silent="false"/>
        <for param="customtokval" list="${getTokenVal}" delimiter="`">
            <sequential>
                <propertyregex property="get_custom_token" input="@{customtokval}" regexp="([^~]*)~(.*)"  select="\1" casesensitive="true" override="true"/>
                <propertyregex property="get_custom_val" input="@{customtokval}" regexp="([^~]*)~(.*)" select="\2" casesensitive="true" override="true"/>
                <echo message="ReplaceToken:${get_custom_token}" />
                <echo message="ReplaceVal:${get_custom_val} " />
                <replace file="${src_file}" token="${get_custom_token}" value="${get_custom_val}" />

            </sequential>
       </for>

</target>

<!-- ======================================================================
                                     GET DID_INJECTION_UTILS TARGET
====================================================================== -->

<target name="getdidinjectionutilsdep" depends="init">

<property name="getdidinjutilsdep" value="getdidinjectionutilsdep"/>
<record name="${basedir}/buildlogs/${getdidinjutilsdep}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${getdidinjutilsdep}_${msec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${getdidinjutilsdep}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>

<if>
        <not>
                <isset property="did_url"/>
        </not>
        <then>
                <antcall target="geturl">
                        <param name="${val}_url" value="http://build/me/did_injection_utils/milestones/stable/DIDInjectionUtils.zip"/>
                        <param name="${val}_dest_zip" value="${build_dir}/zips/did_injection_utils/DIDInjectionUtils.zip"/>
                </antcall>
                <antcall target="unzip">
                        <param name="${val}_unzip_srcdir" value="${build_dir}/zips/did_injection_utils"/>
                        <param name="${val}_unzip_todir" value="${build_dir}/dependencies/did_injection_utils"/>
                        <param name="${val}_files_include" value="DIDInjectionUtils.zip"/>
                </antcall>
                <antcall target="replacefile">
                         <param name="${val}_file" value="${build_dir}/dependencies/did_injection_utils/DIDInjectionUtils/Script_Files/ReadDID.rul"/>
                         <param name="${val}_tok" value="build_id=&quot;NA&quot;"/>
                         <param name="${val}_value" value="build_id=&quot;${build_id}&quot;"/>
		 </antcall>

	         <antcall target="replacefile">
	                 <param name="val" value="${val}_did_build_id"/>
        	         <param name="${val}_did_build_id_file" value="${build_dir}/dependencies/did_injection_utils/DIDInjectionUtils/Script_Files/IntegUtils.rul"/>
                	 <param name="${val}_did_build_id_tok" value="build_id=&quot;NA&quot;"/>
                 	 <param name="${val}_did_build_id_value" value="build_id=&quot;${build_id}&quot;"/>
        	</antcall>

        </then>
</if>

<record name="${basedir}/buildlogs/${getdidinjutilsdep}_${msec}_err.log" action="stop"/>
<record name="${basedir}/buildlogs/${getdidinjutilsdep}_${msec}.log" action="stop"/>
</target>

<!-- ======================================================================
	GET ACCOUNTCREATION TARGET
====================================================================== -->

<target name="getaccountcreationdep" depends="init">

<property name="getacccreationdep" value="getaccountcreationdep"/>
<record name="${basedir}/buildlogs/${getacccreationdep}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${getacccreationdep}_${msec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${getacccreationdep}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>

<antcall target="geturl">
	<param name="${val}_url" value="http://build/framework/accountcreation/milestones/stable/AccountCreation.zip"/>
	<param name="${val}_dest_zip" value="${build_dir}/zips/accountcreation/AccountCreation.zip"/>
</antcall>

<antcall target="unzip">
	<param name="${val}_unzip_srcdir" value="${build_dir}/zips/accountcreation"/>
	<param name="${val}_unzip_todir" value="${build_dir}/dependencies/accountcreation"/>
	<param name="${val}_files_include" value="AccountCreation.zip"/>
</antcall>

<record name="${basedir}/buildlogs/${getacccreationdep}_${msec}_err.log" action="stop"/>
<record name="${basedir}/buildlogs/${getacccreationdep}_${msec}.log" action="stop"/>

</target>

<!-- ========================================================================
	TARGET :  MULTIFILE CONCAT 
======================================================================    -->

<target name="multifile_concat">
        <propertycopy name="src_dir" from="${val}_src_dir" silent="false" />
        <propertycopy name="dest_dir" from="${val}_dest_dir" silent="false" />
        <propertycopy name="default_file" from="${val}_default_property" silent="false" />

	<fileset id="destfileset" dir="${dest_dir}">
		<include name="*.properties" />
	</fileset>
	<pathconvert pathsep="," property="dest_prop_file" refid="destfileset" />

	<for list="${dest_prop_file}" param="propfile" delimiter=",">
		<sequential>
			<propertyregex property="basefile" input="@{propfile}" regexp="(.*[\\\/])(.*$)" select="\2" override="true" casesensitive="true"/>
			<if>
				<available file="${src_dir}/${basefile}" type="file"/>
				<then>
					<antcall target="concat">
						<param name="${val}_dest_file" value="@{propfile}" />
						<param name="${val}_src_file" value="${basefile}" />
						<param name="${val}_fileset_dir" value="${src_dir}" />
					</antcall>
				</then>
				<else>
					<if>
						<isset property="default_file" />
						<then>
							<antcall target="concat">
								<param name="${val}_dest_file" value="@{propfile}" />
								<param name="${val}_src_file" value="${default_file}" />
								<param name="${val}_fileset_dir" value="${src_dir}" />
							</antcall>
						</then>
					</if>
				</else>
			</if>
		</sequential>
	</for>
</target>

<!-- ========================================================================
		DDPARSER TASK
======================================================================    -->

<target name="ddparsertask">
	<propertycopy name="ddsrcdir" from="${val}_dd_srcdir" silent="false"/>
	<propertycopy name="dddestdir" from="${val}_dd_destdir" silent="false"/>
	<propertycopy name="ddincludes" from="${val}_dd_includes" silent="false"/>
	<propertycopy name="ddexcludes" from="${val}_dd_excludes" silent="true"/>
	<foreach param="ddparam" target="parseddfiles" inheritall="true">
	<path>
		<fileset dir="${ddsrcdir}" casesensitive="yes" includes="${ddincludes}" excludes="${ddexcludes}"/>
	</path>
	</foreach>
</target>
<target name="parseddfiles" depends="init">
	<antcall target="ddparser">
		<param name="${val}_ddinp" value="${ddparam}"/>
		<param name="${val}_ddout" value="${dddestdir}"/>
	</antcall>
</target>


<!-- ========================================================================
                ZCOMPONENTS MERGE TASK 
======================================================================    -->

<target name="zcomponentsmerge" depends="init">
<property name="zcomp_name" value="zcomponentsmerge"/>
        <propertycopy name="zcompreq" from="${val}_components_list" silent="true"/>
        <propertycopy name="zcomptodir" from="${val}_componentcopy_todir" silent="true"/>
        
        <propertycopy name="zcomsrcdir" from="${val}_zcomp_sourcedir" silent="false"/>
        <propertycopy name="zcomscsssrcdir" from="${val}_scss_srcdir" silent="true"/>
        <propertycopy name="zcomopfilename" from="${val}_copy_filename" silent="true"/>
	<propertycopy name="zcomopcopycontext" from="${val}_copycontext_includes" silent="true"/>
	<propertycopy name="zcomopcopycontextexclude" from="${val}_copycontext_excludes" silent="true"/>
	<propertycopy name="zcomopincludewebcomponent" from="${val}_include_webcomponent" silent="true"/>
	<propertycopy name="zcomopincludertlcss" from="${val}_include_rtl_css" silent="true"/>
	<propertycopy name="zcomopcssprepro" from="${val}_css_preprocessor" silent="true"/>
	<propertycopy name="zcomompthemesrcdir" from="${val}_theme_variables_srcdir" silent="true"/>
	<propertycopy name="zcomconfigfile" from="${val}_zcompconfig_file" silent="true"/>

	<echo message="zcomopcssprepro:- ${zcomopcssprepro}"/>

	<if>
	        <and>
		        <isset property="zcomopincludewebcomponent"/>
		        <not><equals arg1="${zcomopincludewebcomponent}" arg2=""/></not>
	        </and>
                <then>
                       <property name="zcomopincludewebcomponent_ed" value="${zcomopincludewebcomponent}"/>
                </then>
                <else>
	               <property name="zcomopincludewebcomponent_ed" value="false"/> 
                </else>
        </if>
	<echo message="zcomop_include_rtl_css:- ${zcomopincludertlcss}"/>
	<if>
	        <and>
		        <isset property="zcomopincludertlcss"/>
		        <not><equals arg1="${zcomopincludertlcss}" arg2=""/></not>
	        </and>
                <then>
                       <property name="zcomopincludertlcss_ed" value="${zcomopincludertlcss}"/>
                </then>
                <else>
	               <property name="zcomopincludertlcss_ed" value="false"/> 
                </else>
        </if>
	<if>
                <isset property="zcompreq"/>
                <then>
                       <property name="zcompreq_def" value="${zcompreq}"/>
                </then>
                <else>
                       <property name="zcompreq_def" value="ALL"/>
                </else>
        </if>

	<if>
                <isset property="zcomptodir"/>
                <then>
                       <property name="zcomptodir_def" value="${zcomptodir}"/>
                </then>
                <else>
                       <property name="zcomptodir_def" value="${source_basedir}"/>
                </else>
        </if>

	 <if>
                <isset property="zcomopcssprepro"/>
                <then>
                       <property name="zcomopcssprepro_def" value="${zcomopcssprepro}"/>
                </then>
                <else>
                       <property name="zcomopcssprepro_def" value="scss"/>
                </else>
        </if>
	

        <echo message="task name:- ${zcomp_name}"/>
        <echo message="task param:- ${val}"/>
        <echo message="zcomp_components_list:- ${zcompreq_def}"/>
        <echo message="zcomp_op_copydir:- ${zcomptodir_def}"/>
        
        <echo message="zcomp_scss_todir:- ${zcomscsssrcdir}"/>
	<echo message="zcomp_sourcedir_path:- ${zcomsrcdir}"/>
        <echo message="zcomp_copy_filename:- ${zcomopfilename}"/>
	<echo message="zcomop_copycontext:- ${zcomopcopycontext}"/>
	<echo message="zcomop_include_webcomponent:- ${zcomopincludewebcomponent_ed}"/>
	<echo message="zcomop_include_rtl_css:- ${zcomopincludertlcss_ed}"/>
	<echo message="zcomp_used_product:- ${product_name}"/>
	<echo message="zcomop_branch:- ${branch_name}"/>

        <echo message="zcomponents scss copy task started."/>
        <echo message="zcomponents zcomponents include copy task started."/>

	<if>
	        <isset property="zcomompthemesrcdir"/>
		<then>
			<property name="zcomscsssrcdir_com" value="${zcomompthemesrcdir}"/>
		</then>

		<elseif>
                <isset property="zcomscsssrcdir"/>

                        <then>
                        <property name="zcomscsssrcdir_com" value="${zcomscsssrcdir}"/>

                        </then>
                 </elseif>


	</if>

	<if>
                <isset property="zcomscsssrcdir_com"/>
                <then>
                <antcall target="copy">
                        <param name="${val}_copy_todir" value="${zcomsrcdir}/${zcomopcssprepro_def}/custom/"/>
                        <param name="${val}_fileset_dir" value="${zcomscsssrcdir_com}"/>
                        <param name="${val}_copy_includes" value="**"/>
                </antcall>
                </then>
        </if>


        <echo message="zcomponents scss copy task ended."/>
	
	<if>
                <isset property="zcomopcopycontext"/>
                <then>
		    <if>
                	<equals arg1="${zcomopcopycontext}" arg2="**" />
                	<then>
                        	<property name="zcomopcopycontext_op" value="ALL"/>
                	</then>
                 	<else>
                        	<property name="zcomopcopycontext_op" value="${zcomopcopycontext}"/>
                	</else>
        	    </if>		
		</then>
               	<else>
                       	<property name="zcomopcopycontext_op" value="EMPTY"/>

               	</else>
        </if>

	<echo message="zcomponents zcomponents include copy task ended."/>
        <echo message="zcomponents exec task started."/>
        
  
        <replaceregexp file="${zcomsrcdir}/build/zcomponents-merge.sh" match="http://integ-docker:4873/" replace="http://cm-npmregistry/"/>
	<if>
                <isset property="zcomopcopycontextexclude"/>
                <then>
                       <antcall target="exec">
                        <param name="${val}_exec_dir" value="${zcomsrcdir}/build"/>
                        <param name="${val}_exec_command" value="bash"/>
                        <param name="${val}_exec_args" value="-x ${zcomsrcdir}/build/zcomponents-merge.sh ${zcompreq_def}:${zcomopfilename} ${zcomopcopycontext_op} ${zcomopcopycontextexclude} ${zcomopincludewebcomponent_ed} ${product_name} ${branch_name} ${zcomopincludertlcss_ed} ${zcomopcssprepro_def} ${zcomconfigfile}"/>
                        </antcall>

                </then>
                <else>
                        <antcall target="exec">
                        <param name="${val}_exec_dir" value="${zcomsrcdir}/build"/>
                        <param name="${val}_exec_command" value="bash"/>
                        <param name="${val}_exec_args" value="-x ${zcomsrcdir}/build/zcomponents-merge.sh ${zcompreq_def}:${zcomopfilename} ${zcomopcopycontext_op} \'\' ${zcomopincludewebcomponent_ed} ${product_name} ${branch_name} ${zcomopincludertlcss_ed} ${zcomopcssprepro_def} ${zcomconfigfile}"/>
                        </antcall>
		</else>
	</if>
    
        <echo message="zcomponents exec task ended."/>

        <echo message="zcomponents op copy task started."/>

        <antcall target="copy">
                <param name="${val}_copy_todir" value="${zcomptodir_def}"/>
                <param name="${val}_fileset_dir" value="${zcomsrcdir}/zcomponents"/>
                <param name="${val}_copy_includes" value="**"/>
        </antcall>
        <echo message="zcomponents op copy task ended."/>

</target>

<!-- ========================================================================
                ZCOMPONENTS MERGE TASK 
======================================================================    -->

<target name="zcomponentsmergetask" depends="init">
        <property name="zcomptsk" value="zcomponentsmergetask"/>
        <record name="${basedir}/buildlogs/${cpytsk}_${val}_${msec}.log" action="start" loglevel="info"/>
        <record name="${basedir}/buildlogs/${cpytsk}_${val}_${msec}_err.log" action="start" loglevel="error"/>
        <record name="${basedir}/buildlogs/${cpytsk}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>

        <propertycopy name="zcomptsk_params" from="${val}_zcomponentsmergetask" silent="false"/>
        <echo message="${zcomptsk_params}"/>

	<propertyregex property="zcomp_list_match" input="${zcomptsk_params}" regexp="([^,]+),([^,]+),([^,]+),([^,]*),([^,]*),([^,]*),([^,]*),([^,]*),([^,]*)" select="\1" casesensitive="true"/>
	<propertyregex property="zcomp_source_match" input="${zcomptsk_params}" regexp="([^,]+),([^,]+),([^,]+),([^,]*),([^,]*),([^,]*),([^,]*),([^,]*),([^,]*)" select="\2" casesensitive="true"/>
	<propertyregex property="zcomp_componentcopy_match" input="${zcomptsk_params}" regexp="([^,]+),([^,]+),([^,]+),([^,]*),([^,]*),([^,]*),([^,]*),([^,]*),([^,]*)" select="\3" casesensitive="true"/>
	<propertyregex property="zcomp_scss_srcdir_match" input="${zcomptsk_params}" regexp="([^,]+),([^,]+),([^,]+),([^,]*),([^,]*),([^,]*),([^,]*),([^,]*),([^,]*)" select="\4" casesensitive="true"/>
	<propertyregex property="zcomp_copy_filename_match" input="${zcomptsk_params}" regexp="([^,]+),([^,]+),([^,]+),([^,]*),([^,]*),([^,]*),([^,]*),([^,]*),([^,]*)" select="\5" casesensitive="true"/>
        <propertyregex property="zcomp_copycontext_match" input="${zcomptsk_params}" regexp="([^,]+),([^,]+),([^,]+),([^,]*),([^,]*),([^,]*),([^,]*),([^,]*),([^,]*)" select="\6" casesensitive="true"/>
        <propertyregex property="zcomp_copycontext_exclude_match" input="${zcomptsk_params}" regexp="([^,]+),([^,]+),([^,]+),([^,]*),([^,]*),([^,]*),([^,]*),([^,]*),([^,]*)" select="\7" casesensitive="true"/>
	<propertyregex property="zcomp_include_webcomponent_match" input="${zcomptsk_params}" regexp="([^,]+),([^,]+),([^,]+),([^,]*),([^,]*),([^,]*),([^,]*),([^,]*),([^,]*)" select="\8" casesensitive="true"/>
	<propertyregex property="zcomp_include_rtl_css_match" input="${zcomptsk_params}" regexp="([^,]+),([^,]+),([^,]+),([^,]*),([^,]*),([^,]*),([^,]*),([^,]*),([^,]*)" select="\9" casesensitive="true"/>
	 <propertyregex property="zcomopcssprepro_match" input="${zcomptsk_params}" regexp="([^,]+),([^,]+),([^,]+),([^,]*),([^,]*),([^,]*),([^,]*),([^,]*),([^,]*)" select="\10" casesensitive="true"/>
        <propertyregex property="zcomconfigfile_match" input="${zcomptsk_params}" regexp="([^,]+),([^,]+),([^,]+),([^,]*),([^,]*),([^,]*),([^,]*),([^,]*),([^,]*)" select="\11" casesensitive="true"/>


	<echo message="${zcomp_list_match}"/>

	<propertyregex property="zcomp_components_list_split" input="${zcomp_list_match}" regexp=" " replace="," casesensitive="true"/>

	<echo message="${zcomp_components_list_split}"/>
	<if>
                <isset property="zcomp_components_list_split"/>
                <then>
                       <property name="zcomp_components_list_split_spl" value="${zcomp_components_list_split}"/>
                </then>
                <else>
                        <property name="zcomp_components_list_split_spl" value="ALL"/>
                </else>
        </if>

	<if>
                <isset property="zcomp_source_match"/>
                <then>
                       <property name="zcomp_source_match_spl" value="${zcomp_source_match}"/>
                </then>
                <else>
                        <property name="zcomp_source_match_spl" value="${source_basedir}"/>
                </else>
        </if>


	<if>
                <isset property="zcomp_scss_srcdir_match"/>
                <then>
                       <property name="zcomp_scss_srcdir_match_spl" value="${zcomp_scss_srcdir_match}"/>
                </then>
                <else>
                        <property name="zcomp_scss_srcdir_match_spl" value=""/>
                </else>
        </if>
        <if>
                <isset property="zcomp_copy_filename_match"/>
                <then>
                        <property name="zcomp_copy_filename_match_spl" value="${zcomp_copy_filename_match}"/>
                </then>
                <else>
                        <property name="zcomp_copy_filename_match_spl" value=""/>
                </else>
        </if>

        <if>
                <isset property="zcomp_copycontext_match"/>
                <then>
                        <property name="zcomp_copycontext_match_spl" value="${zcomp_copycontext_match}"/>
                </then>
                <else>
                        <property name="zcomp_copycontext_match_spl" value=""/>
                </else>
        </if>

        <if>
                <isset property="zcomp_copycontext_exclude_match"/>
                <then>
                        <property name="zcomp_copycontext_exclude_match_spl" value="${zcomp_copycontext_exclude_match}"/>
                </then>
                <else>
                        <property name="zcomp_copycontext_exclude_match_spl" value=""/>
                </else>
        </if>

	<if>
                <isset property="zcomp_include_webcomponent_match"/>
                <then>
                        <property name="zcomp_include_webcomponent_match_spl" value="${zcomp_include_webcomponent_match}"/>
                </then>
                <else>
                        <property name="zcomp_include_webcomponent_match_spl" value="false"/>
                </else>
        </if>

	<if>
                <isset property="zcomp_include_rtl_css_match"/>
                <then>
                        <property name="zcomp_include_rtl_css_match_spl" value="${zcomp_include_rtl_css_match}"/>
                </then>
                <else>
                        <property name="zcomp_include_rtl_css_match_spl" value="false"/>
                </else>
        </if>

	<if>
	        <isset property="zcomopcssprepro_match"/>
	        <then>
	        	<property name="zcomopcssprepro_match_spl" value="${zcomopcssprepro_match}"/>
	        </then>
	        <else>
	        	<property name="zcomopcssprepro_match_spl" value=""/>
		</else>
	</if>


        <antcall target="zcomponentsmerge">
                <param name="${val}_components_list" value="${zcomp_components_list_split_spl}"/>
                <param name="${val}_componentcopy_todir" value="${zcomp_componentcopy_match}"/>
                <param name="${val}_zcomp_sourcedir" value="${zcomp_source_match_spl}"/>
		<param name="${val}_scss_todir" value="${zcomp_source_match_spl}/${zcomopcssprepro_def}/custom/"/>

		<param name="${val}_scss_srcdir" value="${zcomp_scss_srcdir_match_spl}"/>
                <param name="${val}_copy_filename" value="${zcomp_copy_filename_match_spl}"/>
                <param name="${val}_copycontext_includes" value="${zcomp_copycontext_match_spl}"/>
                <param name="${val}_copycontext_excludes" value="${zcomp_copycontext_exclude_match_spl}"/>
		<param name="${val}_include_webcomponent" value="${zcomp_include_webcomponent_match_spl}"/>
		<param name="${val}_include_rtl_css" value="${zcomp_include_rtl_css_match_spl}"/>
		<param name="${val}_css_preprocessor" value="${zcomopcssprepro_match_spl}"/>
		<param name="${val}_zcompconfig_file" value="${zcomconfigfile_match}"/>
		

        </antcall>
</target>

<!-- ====================================================================
		JUNIT COMPILE
=======================================================================-->

<target name="junit" depends="init">

<property name="csrc" value="junit_compilesrc"/>
<record name="${basedir}/buildlogs/${csrc}_${val}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${csrc}_${val}_${msec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${csrc}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>

<propertycopy name="src_dir" from="${val}_junit_compile_srcdir" silent="false"/>
<propertycopy name="src_include" from="${val}_junit_compile_includes" silent="false"/>
<propertycopy name="src_exclude" from="${val}_junit_compile_excludes" silent="true"/>
<propertycopy name="src_class_path" from="${val}_junit_class_path" silent="false"/>
<propertycopy name="src_classes_dir" from="${val}_junit_classes_dir" silent="false"/>
<propertycopy name="src_output_dir" from="${val}_junit_output_dir" silent="false"/>
<propertycopy name="src_hfail_opt" from="${val}_junit_haltonfailure" silent="false"/>
<propertycopy name="src_skipnon_tests" from="${val}_junit_skipnontests" silent="false"/>


<if>
    <not>
         <available file="${src_classes_dir}" type="dir"/>
    </not>
    <then>
          <mkdir dir="${src_classes_dir}"/>
    </then>
</if>
<if>
    <not>
         <available file="${src_output_dir}" type="dir"/>
    </not>
    <then>
          <mkdir dir="${src_output_dir}"/>
    </then>
</if>

   <javac 
	srcdir="${src_dir}" 
	classpath="${src_class_path}" 
	includes="${src_include}" 
        excludes="${src_exclude}"
	destdir="${src_classes_dir}" 
	includeantruntime="false"/>

<if>
	<equals arg1="${src_hfail_opt}" arg2="true" />
	<then>
	    <junit printsummary="yes" haltonfailure="yes">
      		<classpath>
        		<pathelement location="${src_classes_dir}"/>
        		<pathelement path="${src_class_path}"/>
	       </classpath>

	      <formatter type="xml"/>

          <batchtest skipNonTests="${src_skipnon_tests}" fork="yes" todir="${src_output_dir}">
		        <fileset dir="${src_dir}">
		          <include name="${src_include}"/>
			  <exclude name="${src_exclude}"/>
		        </fileset>
	      </batchtest>

    	     </junit>
	 </then>
<else>
            <junit printsummary="yes" haltonfailure="no">
                <classpath>
                        <pathelement location="${src_classes_dir}"/>
                        <pathelement path="${src_class_path}"/>
               </classpath>

              <formatter type="xml"/>

                <batchtest skipNonTests="${src_skipnon_tests}" fork="yes" todir="${src_output_dir}">
                        <fileset dir="${src_dir}">
                          <include name="${src_include}"/>
                        </fileset>
              </batchtest>
             </junit>
</else>

</if>




<record name="${basedir}/buildlogs/${csrc}_${val}_${msec}_err.log" action="stop"/>
<record name="${basedir}/buildlogs/${csrc}_${val}_${msec}.log" action="stop"/>

</target>

<!-- ====================================================================
                STATIC FILE FINERPRINT
=======================================================================-->

<target name="fingerprint" depends="init">
    <property name="fprint" value="fingerprint" />
    <record name="${basedir}/buildlogs/${fprint}_${val}_${msec}.log" action="start" loglevel="info"/>
    <record name="${basedir}/buildlogs/${fprint}_${val}_${msec}_err.log" action="start" loglevel="error"/>
    <record name="${basedir}/buildlogs/${fprint}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>

    <propertycopy name="srcdir" from="${val}_fingerprint_srcdir" silent="false" />
    <propertycopy name="destdir" from="${val}_fingerprint_destdir" silent="false" />
    <propertycopy name="flincludes" from="${val}_fingerprint_includes" silent="false" />
    <propertycopy name="flexcludes" from="${val}_fingerprint_excludes" silent="true" />   
    <propertycopy name="mapping_file_name" from="${val}_fingerprint_mapping_file_name" silent="false" />

    <echo message=" '${flincludes}' --hash -o '${destdir}' --file '${destdir}/${mapping_file_name}'" />
    <exec dir="${srcdir}" executable="nodeRev" failonerror="true">
        <arg line=" '${flincludes}' --hash -o '${destdir}' --file '${mapping_file_name}'" />
    </exec>

</target>

<!-- ======================================================================
                                     ANDROIDAPP TARGET
====================================================================== -->

<target name="androidapp" depends="init">
<property name="aapp" value="androidapp"/>

<record name="${basedir}/buildlogs/${aapp}_${val}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${aapp}_${val}_${msec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${aapp}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>

<propertycopy name="rootdir" from="${val}_android_root_dir" silent="false"/>
<propertycopy name="appdir" from="${val}_android_app_dir" silent="false"/>
<propertycopy name="androidcmd" from="${val}_android_cmd" silent="false"/>
<propertycopy name="androidarg" from="${val}_android_arg" silent="false"/>
<propertycopy name="gradlever" from="${val}_gradle_wrapper_version" silent="true"/>
<propertycopy name="srczip_protected" from="${val}_srczip_password_protect" silent="true"/>
<propertycopy name="common_cachedir" from="android_gradle_common_cachedir" silent="true"/>

<!-- Set android properties -->

<property name="utlility_dir" value="${build_dir}/utility_packages/GradleWrapper"/>
<property name="android_home" value="${env.ANDROID_SDK_HOME}"/>
<property name="gradleflder" value="${rootdir}/gradle"/>
<property name="gradleprop" value="${rootdir}/gradle.properties"/>
<property name="gradlescript" value="${rootdir}/gradlew"/>

<!-- make output dir -->

<if>
  <not>
        <available file="${build_dir}/output" type="dir"/>
  </not>
  <then>
        <mkdir dir="${build_dir}/output"/>
  </then>
</if>

<!-- Copy wrapper files -->

<if>
   <not>
	<or>
        <available file="${gradleflder}" type="dir"/>
        <available file="${gradlescript}" type="file"/>
	</or>
   </not>
    <then>
	<if>
	<available file="${utlility_dir}" type="dir"/>
	<then> 

	<!-- copy android wrapper files -->
	<if>
	<available file="${gradleprop}" type="file"/>
	<then>

	        <antcall target="copy">
        	<param name="val" value="${val}_wrapperfls"/>
	        <param name="${val}_wrapperfls_copy_todir" value="${rootdir}"/>
        	<param name="${val}_wrapperfls_fileset_dir" value="${utlility_dir}"/>
	        <param name="${val}_wrapperfls_copy_includes" value="**"/>
        	<param name="${val}_wrapperfls_copy_excludes" value="build.gradle gradle.properties"/>
	        </antcall>
	</then>
	<else>
        	<antcall target="copy">
	        <param name="val" value="${val}_wrapperfls"/>
        	<param name="${val}_wrapperfls_copy_todir" value="${rootdir}"/>
	        <param name="${val}_wrapperfls_fileset_dir" value="${utlility_dir}"/>
        	<param name="${val}_wrapperfls_copy_includes" value="**"/>
	        <param name="${val}_wrapperfls_copy_excludes" value="build.gradle"/>
        	</antcall>

	</else>
	</if>

        <!-- chmod 755 permission for gradlew script -->

        <antcall target="chmod">
        <param name="val" value="${val}_cmod"/>
        <param name="${val}_cmod_chmod_dir" value="${rootdir}"/>
        <param name="${val}_cmod_chmod_perm" value="755"/>
        <param name="${val}_cmod_chmod_includes" value="gradlew"/>
        </antcall>

       </then>
       <else>

	 <echo message="${utlility_dir} is not available.. Please run the hgclone task to get it." file="${basedir}/build_err.txt" append="true"/>

         <fail message="${utlility_dir} is not available.. Please run the hgclone task to get it."/>
        </else>
      </if>
  </then>
</if>

<if>
    <not>
        <available file="${appdir}/zoho-android-release-key.keystore" type="file"/>
    </not>
    <then>

        <!-- copy android keystore files -->
        <antcall target="copy">
        <param name="val" value="${val}_keystore"/>
        <param name="${val}_keystore_copy_todir" value="${appdir}"/>
        <param name="${val}_keystore_fileset_dir" value="${android_home}"/>
        <param name="${val}_keystore_copy_includes" value="zoho-android-release-key.keystore"/>
        </antcall>

        <!-- copy android property files -->

        <antcall target="copy">
        <param name="val" value="${val}_property"/>
        <param name="${val}_property_copy_todir" value="${rootdir}"/>
        <param name="${val}_property_fileset_dir" value="${android_home}"/>
        <param name="${val}_property_copy_includes" value="local.properties"/>
        </antcall>
    </then>
</if>

<!-- Replace gradle wrapper version in gradle-wrapper.properties file -->
<if>
  <isset property="gradlever"/>
   <then>
        <antcall target="replacefile">
		<param name="val" value="${val}_gwrapper"/>
		<param name="${val}_gwrapper_file" value="${gradleflder}/wrapper/gradle-wrapper.properties"/>
		<param name="${val}_gwrapper_tok" value="4.6"/>
		<param name="${val}_gwrapper_value" value="${gradlever}"/>
        </antcall>
   </then>
</if>

<!-- include report generation plugin in app level build.gradle file -->

<property name="app_rep_value" value="apply plugin: 'com.android.application'${line.separator}apply plugin: 'project-report'"/>
<property name="lib_rep_value" value="apply plugin: 'com.android.library'${line.separator}apply plugin: 'project-report'"/>

<loadfile property="plugin_check" srcFile="${appdir}/build.gradle"/>

<propertyregex property="grep_dq_report_txt" input="${plugin_check}" regexp="(apply plugin: &quot;project-report&quot;*)(.*)" select="\1" casesensitive="true" override="true"/>
<propertyregex property="grep_sq_report_txt" input="${plugin_check}" regexp="(apply plugin: 'project-report'*)(.*)" select="\1" casesensitive="true" override="true"/>

<propertyregex property="grep_sq_app_txt" input="${plugin_check}" regexp="(apply plugin: 'com.android.application'*)(.*)" select="\1" casesensitive="true" override="true"/>
<propertyregex property="grep_dq_app_txt" input="${plugin_check}" regexp="(apply plugin: &quot;com.android.application&quot;*)(.*)" select="\1" casesensitive="true" override="true"/>

<propertyregex property="grep_sq_lib_txt" input="${plugin_check}" regexp="(apply plugin: 'com.android.library'*)(.*)" select="\1" casesensitive="true" override="true"/>
<propertyregex property="grep_dq_lib_txt" input="${plugin_check}" regexp="(apply plugin: &quot;com.android.library&quot;*)(.*)" select="\1" casesensitive="true" override="true"/>

<if>
	<not>
	<or>
		<isset property="grep_dq_report_txt"/>
		<isset property="grep_sq_report_txt"/>
	</or>
	</not>
	<then>
           <if>
		<isset property="grep_sq_app_txt"/>
		<then>
			<property name="app_tok_value" value="apply plugin: 'com.android.application'"/>
			<property name="app_replace_value" value="${app_rep_value}"/>
		</then>
		<elseif>
                  <isset property="grep_dq_app_txt"/>
		  <then>
			<property name="app_tok_value" value="apply plugin: &quot;com.android.application&quot;"/>
                        <property name="app_replace_value" value="${app_rep_value}"/>
		  </then>	
		</elseif>
                <elseif>
                   <isset property="grep_dq_lib_txt"/>
                  <then>
                        <property name="app_tok_value" value="apply plugin: &quot;com.android.library&quot;"/>
                        <property name="app_replace_value" value="${lib_rep_value}"/>
                  </then>
                </elseif>
                <elseif>
                   <isset property="grep_sq_lib_txt"/>
                  <then>
                        <property name="app_tok_value" value="apply plugin: 'com.android.library'"/>
                        <property name="app_replace_value" value="${lib_rep_value}"/>
                  </then>
                </elseif>
	   </if>
	</then>
</if>    

<!-- Copy gradle-wrapper.jar if not available during build time -->

<if>
   <not>
        <or>
        <available file="${gradleflder}/wrapper/gradle-wrapper.jar" type="file"/>
        </or>
   </not>
   <then>
        <antcall target="copy">
        <param name="val" value="${val}_wrapperjar"/>
        <param name="${val}_wrapperfls_copy_todir" value="${rootdir}/gradle/wrapper"/>
        <param name="${val}_wrapperfls_fileset_dir" value="${utlility_dir}/gradle/wrapper"/>
        <param name="${val}_wrapperfls_copy_includes" value="gradle-wrapper.jar"/>
        </antcall>
   </then>
</if>

<!-- Replace gradle wrapper version as per ant.properties value -->

<if>
	<and>
	<isset property="app_tok_value"/>
	<isset property ="app_replace_value"/>
	</and>
<then>
        <antcall target="replacefile">
                 <param name="val" value="${val}_plugname"/>
                 <param name="${val}_plugname_file" value="${appdir}/build.gradle"/>
                 <param name="${val}_plugname_tok" value="${app_tok_value}"/>
                 <param name="${val}_plugname_value" value="${app_replace_value}"/>
        </antcall>	
</then>
</if>

<!-- Create Dependency package folder -->

<if>
	<isset property="common_cachedir"/>
	<then>
		<property name="gradle_cachedir" value="${common_cachedir}/android_dependency_folder"/>
	</then>
	<else>
		<property name="gradle_cachedir" value="${rootdir}/android_dependency_folder"/>
	</else>
</if>

<mkdir dir="${gradle_cachedir}"/>

<!-- run gradlew script to get android output package -->

<antcall target="exec">
        <param name="val" value="${val}_build"/>
        <param name="${val}_build_exec_dir" value="${rootdir}"/>
        <param name="${val}_build_exec_command" value="${androidcmd}"/>
        <param name="${val}_build_exec_args" value="${androidarg} -g ${gradle_cachedir} --profile"/>
</antcall>

<!-- Create Android Profile report folder to know the execution time for each task from gradle -->
<property name="profiledir" value="${build_dir}/output/android_profile_report"/>
<mkdir dir="${profiledir}"/>

<antcall target="eco">
        <param name="val" value="${val}_profilescript"/>
        <param name="${val}_profilescript_eco_msg" value="nameofhtml=${val}_profile.html;for htmlname in `find ${rootdir}/build/reports/profile -iname '*.html'`; do profilefoldername=`dirname $htmlname`; mv $htmlname $profilefoldername/$nameofhtml; done; cp -rvf ${profilefoldername}/** ${profiledir}"/>
        <param name="${val}_profilescript_eco_file" value="/tmp/${val}_profile.sh"/>
        <param name="${val}_profilescript_eco_opt" value="false"/>
</antcall>

<antcall target="exec">
        <param name="val" value="${val}_profile"/>
        <param name="${val}_profile_exec_dir" value="${rootdir}"/>
        <param name="${val}_profile_exec_command" value="sh"/>
        <param name="${val}_profile_exec_args" value="/tmp/${val}_profile.sh"/>
</antcall>

<!-- src zip generation for rebrand requirement -->

<if>
	<and>
	<equals arg1="${srczip_protected}" arg2="yes" />
        <isset property="srczip_protected"/>
	</and>
	<then>
	<mkdir dir="${build_dir}/output/zips"/>
        <antcall target="ziptask">
		<param name="val" value="${val}_androidsrc"/>
		<param name="${val}_androidsrc_execdir" value="${rootdir}"/>
		<param name="${val}_androidsrc_zip_name" value="${build_dir}/output/zips/android_build_setup.zip"/>
		<param name="${val}_androidsrc_dir_tozip" value="."/>
		<param name="${val}_androidsrc_zip_exclude" value="local.properties **/zoho-android-release-key.keystore **/build/** **/build/ .gradle/** ./gradle/"/>
        </antcall>
	</then>
</if>

<!-- Generate dependency report -->

<antcall target="exec">
	<param name="val" value="${val}_report"/>
        <param name="${val}_report_exec_dir" value="${rootdir}"/>
        <param name="${val}_report_exec_command" value="${androidcmd}"/>
        <param name="${val}_report_exec_args" value="gradlew htmlDependencyReport --info"/>
</antcall>

<!-- Generate dependency report folder as zip for security report -->

<antcall target="ziptask">
<param name="val" value="${val}_reportzip"/>
<param name="${val}_reportzip_execdir" value="${appdir}/build/reports/project"/>
<param name="${val}_reportzip_zip_name" value="${build_dir}/output/android_dependency_report.zip"/>
<param name="${val}_reportzip_dir_tozip" value="dependencies"/>
<param name="${val}_reportzip_zip_exclude" value=""/>
</antcall>

<!-- Generate android class zip for security report-->

<antcall target="eco">
	<param name="val" value="${val}_ecoscript"/>
        <param name="${val}_ecoscript_eco_msg" value="find -iname '*.class'; if [ $? -eq 0 ]; then find -type f \( -name '*.class' -o -name '*.aar' -o -iname '*.jar' \) | grep -v 'thirdparty_packages\|utility_packages\|gradle-wrapper.jar\|outputs\|android_dependency_folder' | zip ${build_dir}/output/android_java_classes.zip -@ ; cd ${gradle_cachedir}/..; find android_dependency_folder -type f \( -name '*.aar' -o -iname '*.jar' \) | grep -v 'android_dependencies_folder/caches/modules-2' | zip ${build_dir}/output/android_java_classes.zip -@ ; else echo 'no class available to generate the zip for security report'; fi"/>
        <param name="${val}_ecoscript_eco_file" value="${rootdir}/generate_android_classes_zip.sh"/>
        <param name="${val}_ecoscript_eco_opt" value="false"/>
</antcall>

<antcall target="exec">
        <param name="val" value="${val}_classeszip"/>
        <param name="${val}_classeszip_exec_dir" value="${rootdir}"/>
        <param name="${val}_classeszip_exec_command" value="sh"/>
        <param name="${val}_classeszip_exec_args" value="generate_android_classes_zip.sh"/>
</antcall>

<if>
	<available file="${appdir}/zoho-android-release-key.keystore" type="file"/>
	<then>
		<delete file="${appdir}/zoho-android-release-key.keystore"/>
		<echo message="Keystore file deleted.."/>
	</then>
</if>

<record name="${basedir}/buildlogs/${aapp}_${val}_${msec}_err.log" action="stop"/>
<record name="${basedir}/buildlogs/${aapp}_${val}_${msec}.log" action="stop"/>
</target>

<!-- ======================================================================
                                          ANDROID AAB to APKs
====================================================================== -->

<target name="bundletoapk" depends="init">
<property name="btoapk" value="bundletoapk"/>

<record name="${basedir}/buildlogs/${btoapk}_${val}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${btoapk}_${val}_${msec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${btoapk}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>

<propertycopy name="bundlepath" from="${val}_input_bundle_path" silent="false"/>
<propertycopy name="apkpath" from="${val}_output_apk_path" silent="false"/>
<propertycopy name="apkmode" from="${val}_output_apk_mode" silent="true"/>

<!-- Set bundletoapk properties -->

<property name="bundletooljar" value="${env.ANDROID_SDK_HOME}/tools/bundletool-all-0.10.2.jar"/>
<property name="androidkeystore" value="${env.ANDROID_SDK_HOME}/zoho-android-release-key.keystore"/>

<!-- Check APK Mode  -->
<if>
        <isset property="apkmode"/>
        <then>
                <property name="mode" value="${apkmode}"/>
        </then>
        <else>
                <property name="mode" value="universal"/>
        </else>
</if>

<!-- Generate .aab to .apks -->
<echo message="${bundlepath} converting to apks in following ${apkpath} ...."/>
<antcall target="exec">
        <param name="val" value="${val}_atob"/>
        <param name="${val}_atob_exec_dir" value="${basedir}"/>
        <param name="${val}_atob_exec_command" value="java"/>
        <param name="${val}_atob_exec_args" value="-jar ${bundletooljar} build-apks --bundle=${bundlepath} --output=${apkpath} --mode=${mode} --ks=${androidkeystore} --ks-key-alias=${env.RELKEY} --key-pass=pass:${env.KEYPWD} --ks-pass=pass:${env.KSTOREPWD}"/>
</antcall>

<chmod file="${apkpath}" perm="755"/>

<echo message="bundletoapk task completed.."/>

<record name="${basedir}/buildlogs/${btoapk}_${val}_${msec}_err.log" action="stop"/>
<record name="${basedir}/buildlogs/${btoapk}_${val}_${msec}.log" action="stop"/>
</target>


<!-- ################################################################################ -->

<target name="scaladoc" depends="init">

<property name="sdoc" value="scaladoc"/>

<record name="${basedir}/buildlogs/${sdoc}_${val}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${sdoc}_${val}_${msec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${sdoc}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>

<propertycopy name="srcdir" from="${val}_scaladoc_srcdir" silent="false"/>
<propertycopy name="destdir" from="${val}_scaladoc_todir" silent="false"/>
<propertycopy name="scala_classpath" from="${val}_scaladoc_classpath" silent="false"/>
<propertycopy name="deprecation" from="${val}_deprecation_check_needed" silent="true"/>

<if>
	<isset property="deprecation"/>
<then>
	<property name="deprecate" value="no"/>
</then>
<else>
        <property name="deprecate" value="yes"/>
</else>
</if>

<property name="scala.dir" location="${env.SCALA_HOME}"/>
<property name="scala-library.jar" value="${scala.dir}/lib/scala-library.jar" />
<property name="scala-compiler.jar" value="${scala.dir}/lib/scala-compiler.jar" />
<property name="scala-reflect.jar" value="${scala.dir}/lib/scala-reflect.jar"/>
<property name="scala-xml_2.11-1.0.4.jar" value="${scala.dir}/lib/scala-xml_2.11-1.0.4.jar"/>
<property name="scala-parser-combinators.jar" value="${scala.dir}/lib/scala-parser-combinators_2.11-1.0.4.jar"/>

<property name="scala-test.dir" value="main/test" />
<path id="build.classpath">
    <pathelement location="${scala_classpath}" />
    <pathelement location="${scala-library.jar}" />
    <pathelement location="${scala-reflect.jar}"/>
    <pathelement location="${scala-xml_2.11-1.0.4.jar}"/>
    <pathelement location="${scala-parser-combinators.jar}"/>
    <pathelement location="${env.SCALA_HOME}/lib/scala-xml_2.11-1.0.4.jar" />
</path>
<taskdef resource="scala/tools/ant/antlib.xml">
    <classpath>
        <pathelement location="${scala_classpath}" />
        <pathelement location="${scala-compiler.jar}" />
        <pathelement location="${scala-library.jar}" />
        <pathelement location="${scala-reflect.jar}"/>
        <pathelement location="${env.SCALA_HOME}/lib/scala-xml_2.11-1.0.4.jar" />
        <pathelement location="${scala-parser-combinators.jar}"/>
    </classpath>
</taskdef>

  <mkdir dir="${destdir}"  />
  <scaladoc
    srcdir="${srcdir}"
    destdir="${destdir}"
    deprecation="${deprecate}" unchecked="yes"
    classpathref="build.classpath">
      <include name="**" />
      <exclude name="${scala-test.dir}/**/*.scala" />
  </scaladoc>

<record name="${basedir}/buildlogs/${sdoc}_${val}_${msec}.log" action="stop"/>
<record name="${basedir}/buildlogs/${sdoc}_${val}_${msec}_err.log" action="stop"/>

</target>

<!-- ======================================================================
			IOSAPP TARGET
====================================================================== -->

<target name="iosapp" depends="init">
<property name="iapp" value="iapp"/>

<record name="${basedir}/buildlogs/${iapp}_${val}_${msec}.log" action="start" loglevel="info"/>
<record name="${basedir}/buildlogs/${iapp}_${val}_${msec}_err.log" action="start" loglevel="error"/>
<record name="${basedir}/buildlogs/${iapp}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>

<propertycopy name="src_dir" from="${val}_ios_src_dir" silent="false"/>
<propertycopy name="src_include" from="${val}_ios_src_includes" silent="false"/>
<propertycopy name="src_exclude" from="${val}_ios_src_excludes" silent="true"/>
<propertycopy name="mcname" from="${val}_ios_machine_name" silent="false"/>
<propertycopy name="mclogin" from="${val}_ios_login" silent="false"/>
<propertycopy name="xcver" from="${val}_xcode_version" silent="false"/>
<propertycopy name="podcmd" from="${val}_pod_command" silent="true"/>
<propertycopy name="xccmd" from="${val}_xcode_command" silent="true"/>

<!-- Copy SRC Files -->

<antcall target="copy">
	<param name="val" value="${val}_src"/>
	<param name="${val}_src_copy_todir" value="${build_dir}/MACSRC"/>
	<param name="${val}_src_fileset_dir" value="${src_dir}"/>
	<param name="${val}_src_copy_includes" value="${src_include}"/>
	<param name="${val}_src_copy_excludes" value="${src_exclude}"/>
</antcall>

<if>
<available file="${basedir}/hg_utils/utility_packages/ios" type="dir"/>
<then>
<antcall target="copy">
	<param name="val" value="${val}_bldfiles"/>
	<param name="${val}_bldfiles_copy_todir" value="${build_dir}/MACSRC/build"/>
	<param name="${val}_bldfiles_fileset_dir" value="${basedir}/hg_utils/utility_packages/ios"/>
	<param name="${val}_bldfiles_copy_includes" value="mobileprovisionParser placemobileprovision.sh plist_generator.sh"/>
</antcall>
</then>
<else>
	<fail message="hg_utils folder not available, kindly use hgclone:cmtp task to get it. Contact integration-team for further clarification."/>
</else>
</if>

<!-- Set ios properties -->
<property name="output_dir" value="${build_dir}/output"/>
<property name="failonerror" value="true"/>
<property name="mac_home_dir" value="/Users/${mclogin}"/>
<property name="srczip" value="${build_dir}/mac_src.zip"/>
<property name="mac_build_dir" value="${mac_home_dir}/WH_DIR/${day}/${product_name}/${build_id}"/>
<property name="mac_build_src_dir" value="${mac_home_dir}/WH_DIR/${day}/${product_name}/${build_id}/MACSRC"/>
<property name="mac_build_output_zip" value="-o StrictHostKeyChecking=no -r ${mclogin}@${mcname}:${mac_build_src_dir}/build/output/*.zip ${output_dir}/"/>
<property name="createdir" value="-o StrictHostKeyChecking=no -l ${mclogin} ${mcname} mkdir -p ${mac_build_dir}"/>
<property name="transfersrc" value="-o StrictHostKeyChecking=no ${srczip} ${mclogin}@${mcname}:${mac_build_dir}"/>
<property name="extractzip" value="-o StrictHostKeyChecking=no -l  ${mclogin} ${mcname} unzip -d ${mac_build_dir} ${mac_build_dir}/mac_src.zip"/>
<property name="xcodebuild" value="/Applications/${xcver}.app/Contents/Developer/usr/bin/xcodebuild"/>
<property name="execute_cmd" value="-o StrictHostKeyChecking=no -l  ${mclogin} ${mcname} cd ${mac_build_src_dir}/build; sh -x ios_build.sh"/>
<property name="xcodebuild" value="/Applications/${xcver}.app/Contents/Developer/usr/bin/xcodebuild"/>

<!-- Script Generation Start-->

<mkdir dir="${output_dir}"/>

<property name="mac_src_base_dir" value="${build_dir}/MACSRC"/>

<if>
	<available file="${mac_src_base_dir}/build/podinstall.sh" type="file"/>
	<then>
		<delete file="${mac_src_base_dir}/build/podinstall.sh"/>
	</then>
</if>

<if>
	<available file="${mac_src_base_dir}/build/podinstall.sh" type="file"/>
	<then>
		<delete file="${mac_src_base_dir}/build/podinstall.sh"/>
	</then>
</if>

<property name="templatestart" value="main()${line.separator}{${line.separator}&#009;IFS=@${line.separator}${line.separator}&#009;CURDIR=`pwd`${line.separator}&#009;mkdir -p ${CURDIR}/output${line.separator}"/>

<echo message="${templatestart}${line.separator}" file="${mac_src_base_dir}/build/ios_build.sh" append="false"/>

<if>
<isset property="podcmd"/>
<then>
	<if>
	<and>
	<isset property="pod_file_dir"/>
	<isset property="pod_version"/>
	</and>
	<then>
	<echo message="echo &quot;Pod Installation Started ..&quot;${line.separator}cd ${mac_build_src_dir}/${pod_file_dir}${line.separator}" file="${mac_src_base_dir}/build/podinstall.sh" append="true"/>
	<for list="${podcmd}" param="podc" delimiter=";">
	<sequential>
		<echo message="@{podc}${line.separator}" file="${mac_src_base_dir}/build/podinstall.sh" append="true"/>
	</sequential>
	</for>
	<echo message="${line.separator}cd Pods${line.separator}chmod 755 **/*.sh${line.separator}cd -${line.separator}echo &quot;Pod Installation Ended ..&quot;${line.separator}" file="${mac_src_base_dir}/build/podinstall.sh" append="true"/>
	<echo message="${line.separator}${line.separator}&#009;sh ${mac_build_src_dir}/build/podinstall.sh${line.separator}" file="${mac_src_base_dir}/build/ios_build.sh" append="true"/>
	</then>
	<else>
		<fail message="Either pod_file_dir or pod_version variable is not defined. Kindly add it then start a build..."/>
	</else>
	</if>
</then>
</if>

<if>
<isset property="xccmd"/>
<then>
	<echo message="&#009;build${line.separator}" file="${mac_src_base_dir}/build/ios_build.sh" append="true"/>
	<echo message="${line.separator}}${line.separator}build()${line.separator}{${line.separator}" file="${mac_src_base_dir}/build/ios_build.sh" append="true"/>
	<for list="${xccmd}" param="xcmd" delimiter=";">
	<sequential>
		<echo message="&#009;@{xcmd}${line.separator}" file="${mac_src_base_dir}/build/ios_build.sh" append="true"/>
	</sequential>
	</for>
	<echo message="if [ $? -ne 0 ]${line.separator}then${line.separator}echo -e &quot;Xcode command failed, Please check above error log..&quot;${line.separator}fi" file="${mac_src_base_dir}/build/ios_build.sh" append="true"/>
	<echo message="${line.separator}}${line.separator}" file="${mac_src_base_dir}/build/ios_build.sh" append="true"/>
</then>
<else>
<if>
<isset property="ios_app_project_schemes"/>
<then>
	<for list="${ios_app_project_schemes}" param="proj">
	<sequential>
		<echo message="Project: @{proj}"/>
		<if>
			<not>
			<or>
				<isset property="@{proj}_xcode_project_name"/>
				<isset property="@{proj}_xcode_project_dir"/>
			</or>
			</not>
			<then>
				<fail message="The below params not available in ant.properties, kindly add the below line and corresponding value.${line.separator}@{proj}_xcode_project_name=&lt;value&gt;${line.separator}@{proj}_xcode_project_dir=&lt;value&gt;${line.separator}"/>
			</then>
			<else>
				<propertycopy name="projname" from="@{proj}_xcode_project_name"/>
				<propertycopy name="projdir" from="@{proj}_xcode_project_dir"/>
			</else>
		</if>
		<if>
		<isset property="@{proj}_configuration"/>
		<then>
			<echo message="@{proj}_configuration"/>
			<propertycopy name="configvalue" from="@{proj}_configuration"/>
			<if>
				<isset property="configvalue"/>
				<then>
				<echo message="${configvalue}"/>
					<for list="${configvalue}" param="config">
					<sequential>
						<echo message="configuration: @{config}"/>
						<if>
							<not>
							<or>
								<isset property="@{proj}_@{config}_scheme_name"/>
								<isset property="@{proj}_@{config}_profile_dir"/>
							</or>
							</not>
							<then>
								<fail message="The below params not available in ant.properties, kindly add the below line and corresponding value.${line.separator}@{proj}_@{config}_scheme_name=&lt;value&gt;${line.separator}@{proj}_@{config}_profile_dir=&lt;value&gt;${line.separator}"/>
							</then>
							<else>
							<var name="schemename" unset="true"/>
							<var name="profiledir" unset="true"/>
							<propertycopy name="schemename" from="@{proj}_@{config}_scheme_name"/>
							<propertycopy name="profiledir" from="@{proj}_@{config}_profile_dir"/>
							<echo message="${line.separator}&#009;sh ${mac_build_src_dir}/build/placemobileprovision.sh ${mac_build_src_dir}/${profiledir}" file="${mac_src_base_dir}/build/ios_build.sh" append="true"/>
							<echo message="${line.separator}&#009;bash ${mac_build_src_dir}/build/plist_generator.sh ${mac_build_src_dir}/${profiledir}" file="${mac_src_base_dir}/build/ios_build.sh" append="true"/>
							<echo message="${line.separator}&#009;build ${mac_build_src_dir}/${projdir} &quot;${projname}&quot; &quot;${schemename}&quot; ${mac_build_src_dir}/${profiledir}/exportOptions.plist &quot;@{config}&quot;${line.separator}" file="${mac_src_base_dir}/build/ios_build.sh" append="true"/>
							</else>
						</if>
					</sequential>
					</for>
				</then>
				<else>
					<fail message="There is no configuraton name available for @{proj}_configuration"/>
				</else>
			</if>
		</then>
		<else>
			<fail message="@{proj} configuration not set"/>
		</else>
		</if>
	</sequential>
	</for>

	<echo message="${line.separator}}${line.separator}build()${line.separator}{${line.separator}&#009;PROJECT_HOME=&quot;${1}&quot;${line.separator}&#009;PROJECT_NAME=&quot;${2}&quot;${line.separator}&#009;SCHME_NAME=&quot;${3}&quot;${line.separator}&#009;PLIST_PATH=&quot;${4}&quot;${line.separator}&#009;CONFIGURATION=&quot;${5}&quot;${line.separator}" file="${mac_src_base_dir}/build/ios_build.sh" append="true"/>

        <echo message="${line.separator}&#009;cd ${PROJECT_HOME}${line.separator}${line.separator}&#009;echo &quot;${PROJECT_NAME} ${CONFIGURATION} build started ..&quot;${line.separator}" file="${mac_src_base_dir}/build/ios_build.sh" append="true"/>
	
	<echo message="${line.separator}&#009;${xcodebuild} -scheme &quot;${SCHME_NAME}&quot; -configuration &quot;${CONFIGURATION}&quot; clean" file="${mac_src_base_dir}/build/ios_build.sh" append="true"/>

	<echo message="${line.separator}&#009;${xcodebuild} -scheme &quot;${SCHME_NAME}&quot; -configuration &quot;${CONFIGURATION}&quot; archive -archivePath &quot;${PROJECT_HOME}/${PROJECT_NAME}.xcarchive&quot; -workspace &quot;${PROJECT_NAME}.xcworkspace&quot;" file="${mac_src_base_dir}/build/ios_build.sh" append="true"/>

	<echo message="${line.separator}${line.separator}&#009;if [ $? -ne 0 ]${line.separator}&#009;then${line.separator}&#009;&#009;echo &quot;Xcodebuild ${PROJECT_NAME} ${CONFIGURATION} app generation failed, kindly check the error logs&quot;${line.separator}&#009;&#009;exit 1${line.separator}&#009;fi" file="${mac_src_base_dir}/build/ios_build.sh" append="true"/>

	<echo message="${line.separator}&#009;${xcodebuild} -exportArchive -exportOptionsPlist ${PLIST_PATH} -archivePath &quot;${PROJECT_HOME}/${PROJECT_NAME}.xcarchive&quot; -exportPath &quot;${PROJECT_HOME}/${PROJECT_NAME}.xcarchive/Products/Applications&quot;" file="${mac_src_base_dir}/build/ios_build.sh" append="true"/>

        <echo message="${line.separator}${line.separator}&#009;if [ $? -ne 0 ]${line.separator}&#009;then${line.separator}&#009;&#009;echo &quot;Xcodebuild ${PROJECT_NAME} ${CONFIGURATION} archive generation failed, kindly check the error logs&quot;${line.separator}&#009;&#009;exit 1${line.separator}&#009;fi" file="${mac_src_base_dir}/build/ios_build.sh" append="true"/>

	<echo message="${line.separator}${line.separator}&#009;zip -ry ${CURDIR}/output/${PROJECT_HOME}_${CONFIGURATION}_iOS.zip &quot;${PROJECT_HOME}/${PROJECT_NAME}.xcarchive&quot;${line.separator}" file="${mac_src_base_dir}/build/ios_build.sh" append="true"/>

	<echo message="${line.separator}&#009;echo &quot;${PROJECT_NAME} ${CONFIGURATION} build ended ..&quot;${line.separator}" file="${mac_src_base_dir}/build/ios_build.sh" append="true"/>

	<echo message="${line.separator}}${line.separator}main $*${line.separator}" file="${mac_src_base_dir}/build/ios_build.sh" append="true"/>

</then>
<else>
	<fail message="ios_app_project_schemes variable should be availabe, add the following line in ant.properties and provide the value ${line.separator}ios_app_project_schemes=&lt;project name comma separated&gt;"/>
</else>
</if>
</else>
</if>

<!-- src zip generation -->

<echo message="Src zip generation started .."/>

<exec dir="${build_dir}" executable="zip" failonerror="${failonerror}" resultproperty="exitValue">
    <arg line="-ry ${srczip} MACSRC"/>
</exec>

<echo message="Src zip generation ended .."/>

<!-- Create Build Dir In Mac Machine && Transfer srczip to mac machine -->

<exec dir="${basedir}" executable="ssh" failonerror="${failonerror}" resultproperty="exitValue">
    <arg line="${createdir}"/>
</exec>

<exec dir="${basedir}" executable="scp" failonerror="${failonerror}" resultproperty="exitValue">
    <arg line="${transfersrc}"/>
</exec>

<exec dir="${basedir}" executable="ssh" failonerror="${failonerror}" resultproperty="exitValue">
    <arg line="${extractzip}"/>
</exec>

<!-- Script Execution Started -->

<exec dir="${basedir}" executable="ssh" failonerror="${failonerror}" resultproperty="exitValue">
    <arg line="${execute_cmd}"/>
</exec>

<!-- Output zip Transfer Started -->

<exec dir="${basedir}" executable="scp" failonerror="${failonerror}" resultproperty="exitValue">
    <arg line="${mac_build_output_zip}"/>
</exec>

<!-- End -->

<record name="${basedir}/buildlogs/${iapp}_${val}_${msec}_err.log" action="stop"/>
<record name="${basedir}/buildlogs/${iapp}_${val}_${msec}.log" action="stop"/>
</target>




<!-- ======================================================================
    WINDOWS TASK TARGET
====================================================================== -->
<target name="wintask" depends="init">
    <property name="dtask" value="wintask"/>
    <record name="${basedir}/buildlogs/${dtask}_${val}_${msec}.log" action="start" loglevel="info"/>
    <record name="${basedir}/buildlogs/${dtask}_${val}_${msec}_err.log" action="start" loglevel="error"/>
    <record name="${basedir}/buildlogs/${dtask}_${val}_${msec}_err.log" action="start" loglevel="warn" append="yes"/>
    <propertycopy name="dllargs" from="${val}_wintask" silent="false"/>
    <propertycopy name="javaclp" from="${val}_java_classpath" silent="true"/>
    <propertycopy name="javacls" from="${val}_java_class" silent="true"/>
    <propertycopy name="dllunzip_exclude" from="${val}_files_exclude" silent="true"/>
    <property name="fltransfer_prod_home" value="${basedir}/dependencies/integ_file_transfer" />

    <if>
        <not><isset property="build_id" /></not>
	<then>
		<echo message="Build id is not passed in wintask" file="${basedir}/build_err.txt" append="true"/>
                <fail message="Build id is not passed" />
        </then>
    </if>
    
    <if>
        <not><isset property="product_name" /></not>
	<then>
		<echo message="product_name param is not passed in wintask" file="${basedir}/build_err.txt" append="true"/>
                <fail message="product_name param is not passed" />
        </then>
    </if>

    <propertyregex property="dll_machine_name" input="${dllargs}" regexp="([^\s]+)" select="\1" casesensitive="true" override="true"/>
    <propertyregex property="input_zip" input="${dllargs}" regexp="([^\s]+)\s([^\s]+)" select="\2" casesensitive="false" />
    <propertyregex property="output_zip" input="${dllargs}" regexp="([^\s]+)\s([^\s]+)\s([^\s]+)" select="\3" casesensitive="false" />
    <propertyregex property="batfile_name" input="${dllargs}" regexp="([^\s]+)\s([^\s]+)\s([^\s]+)\s([^\s]+)" select="\4" casesensitive="false" />

    <antcallback target="javatask">
    <param name="val" value="duplicate"/>
    <param name="${val}_java_classpath" value="${basedir}/utility_packages/exe/Regression.jar"/>
    <param name="${val}_java_class" value="com.adventnet.testtools.regression.DuplicateFileFinder"/>
    <param name="${val}_java_args" value="${input_zip}"/>
    </antcallback>


  <antcall target="geturl">
  <param name="${val}_url" value="http://build/integ/remoteexecutor/milestones/production/Jetty_standalone_linux64_WITHOUT_JRE.zip"/>
  <param name="${val}_dest_zip" value="${basedir}/zips/WindowsFileTransfer/FileTransfer.zip"/>
  </antcall>

  <antcall target="unzip">
  <param name="${val}_unzip_srcdir" value="${basedir}/zips/WindowsFileTransfer"/>
  <param name="${val}_unzip_todir" value="${fltransfer_prod_home}"/>
  <param name="${val}_files_include" value="FileTransfer.zip"/>
  </antcall>

  <property name="javaclp" value="${fltransfer_prod_home}" />
  <if>
    <isset property="javaclp"/>
    <then>
          <if>
           <available file="${javaclp}" type="dir" />
           <then>
            <var name="javaclp" value="${javaclp}"/>
            <echo message="Inside Directory Check" />
            <for param="jarfiles">
             <path>
               <fileset dir="${javaclp}">
                  <include name="**/*.jar"/>
               </fileset>
             </path>
             <sequential>
               <var name="javaclp" value="${javaclp}:@{jarfiles}" />
             </sequential>
            </for>
           </then>
          </if>
    </then>
</if>

    <if>
        <not>
            <isset property="javacls"/>
        </not>
        <then>
            <property name="javacls" value="com.integ.websocket.client.ClientRunner"/>
        </then>
    </if>

    <!--antcallback target="javatask">
        <param name="${val}_java_classpath" value="${java_classpath}"/>
        <param name="${val}_java_class" value="${javacls}"/>
	<param name="${val}_java_args" value="-Dprod.home=${fltransfer_prod_home} -Dinteg.logspath=${fltransfer_prod_home}/logs/ -cp ${javaclp} ${javacls} ${dll_machine_name} ${product_name} ${basedir}/logs/ ${build_id} ${val} ${input_zip} ${output_zip} ${batfile_name}"/>
    </antcallback-->

    <echo message="${javaclp} --------" />
    <exec dir="${basedir}" executable="/zoho/build/downloads/java/jdk1.8.0_66/jre/bin/java" failonerror="${failonerror}">
	    <arg line="-Dprod.home=${fltransfer_prod_home} -Dinteg.logspath=${fltransfer_prod_home}/logs/ -cp ${javaclp} ${javacls} ${dll_machine_name} ${product_name} ${source_basedir}/../logs/ ${build_id} ${val} ${input_zip} ${output_zip} ${batfile_name}"/>
    </exec>

    <antcall target="eco">
                <param name="val" value="${val}_dllmachinename"/>
                <param name="${val}_dllmachinename_eco_msg" value="${dll_macname}"/>
                <param name="${val}_dllmachinename_eco_file" value="${basedir}/dependency_server_name.txt"/>
                <param name="${val}_dllmachinename_eco_opt" value="true"/>
    </antcall>

</target>
